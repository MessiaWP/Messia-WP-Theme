1702936352
waR3U4bTeM%3A8b05cdfedf68b9aaa6f70eb1d7ce27ec-2ad6bb22311e7e0fa0b941da305214fb
s:22348:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjJhZDZiYjIyMzExZTdlMGZhMGI5NDFkYTMwNTIxNGZiIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTY6Il90YWJzX2R5bmFtaWMuanMiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czozNToic3JjL2pzL19jb21wb25lbnRzL190YWJzX2R5bmFtaWMuanMiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjE1ODQxOiIoZnVuY3Rpb24gKCkgewoKCS8qKgoJICogQ29uc3RydWN0b3IuCgkgKgoJICogQHJldHVybiB2b2lkCgkgKi8KCXdpbmRvdy5keW5hbWljVGFicyA9IGZ1bmN0aW9uICgpIHsKCgkJY29uc3Qgc3RhcnRVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbik7CgoJCWNvbnN0IGRlZmF1bHRzID0gewoJCQljb250YWluZXI6IGZhbHNlLAoJCQlzY3JvbGxNYXJnaW46IDAsCgkJCXNjcm9sbE1hcmdpblNoaWZ0OiAwLAoJCQlvYnNlcnZlcjogewoJCQkJcm9vdDogbnVsbCwKCQkJCXJvb3RNYXJnaW46ICcwcHgnLAoJCQkJdGhyZXNob2xkOiBbMF0sCgkJCQlkZWxheTogMCwKCQkJCXRyYWNrVmlzaWJpbGl0eTogZmFsc2UsCgkJCX0sCgkJfTsKCgkJY29uc3QKCQkJb3B0aW9ucyA9IGV4dGVuZERlZmF1bHRzKGRlZmF1bHRzLCBhcmd1bWVudHNbMF0pLAoJCQljb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjsKCgkJY29uc3QKCQkJdGFiTGlzdCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcudGFiLWxpc3QnKSwKCQkJdGFic0NvbnRlbnQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnRhYi1jb250ZW50Jyk7CgoJCXZhciBzdXBwb3J0ZWQgPSBmYWxzZTsKCgkJaWYgKCF3aW5kb3cuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHsKCQkJY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ25vdC1zdXBwb3J0ZWQnKTsKCQkJY29uc29sZS5lcnJvcignVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgIkR5bmFtaWMgVGFicyIuJyk7CgkJfSBlbHNlIHsKCQkJc3VwcG9ydGVkID0gdHJ1ZTsKCQl9CgoJCWlmIChjb250YWluZXIuaGFzT3duUHJvcGVydHkoJ2R5bmFtaWNUYWJzJykpIHsKCQkJcmV0dXJuOwoJCX0KCgkJaWYgKHRhYkxpc3QgPT09IG51bGwpIHsKCQkJY29uc29sZS53YXJuKCdET00gZWxlbWVudCB3aXRoICJ0YWItbGlzdCIgbm90IGZvdW5kLicpOwoJCQlyZXR1cm47CgkJfQoKCQlpZiAodGFic0NvbnRlbnQgPT09IG51bGwpIHsKCQkJY29uc29sZS53YXJuKCdObyB0YWIgY29udGVudCBlbGVtZW50cyBmb3VuZC4nKTsKCQkJcmV0dXJuOwoJCX0KCgkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnRhaW5lciwgJ2R5bmFtaWNUYWJzJywgewoJCQl2YWx1ZTogewoJCQkJb3B0aW9uczogb3B0aW9ucywKCQkJCWRlc3Ryb3k6ICgpID0+IHsKCQkJCQlpZiAoIWNvbnRhaW5lci5oYXNPd25Qcm9wZXJ0eSgnZHluYW1pY1RhYnMnKSkgewoJCQkJCQlyZXR1cm47CgkJCQkJfQoKCQkJCQlpZiAoc3VwcG9ydGVkKSB7CgkJCQkJCWRldGFjaFBhZ2luYXRpb24oY29udGFpbmVyKTsKCQkJCQkJZGV0YWNoRXZlbnRzKGNvbnRhaW5lcik7CgkJCQkJCWRldGFjaE9ic2VydmVycyhjb250YWluZXIpOwoJCQkJCX0gZWxzZSB7CgkJCQkJCWRldGFjaFNpbXBsZUV2ZW50cyhjb250YWluZXIpOwoJCQkJCX0KCgkJCQkJZGVsZXRlIGNvbnRhaW5lci5keW5hbWljVGFiczsKCQkJCX0sCgkJCX0sCgkJCWNvbmZpZ3VyYWJsZTogdHJ1ZSwKCQl9KTsKCgkJaWYgKHN1cHBvcnRlZCkgewoJCQlhdHRhY2hQYWdpbmF0aW9uKGNvbnRhaW5lcik7CgkJCWF0dGFjaEV2ZW50cyhjb250YWluZXIpOwoJCQlhdHRhY2hPYnNlcnZlcihjb250YWluZXIpOwoJCX0gZWxzZSB7CgkJCWF0dGFjaFNpbXBsZUV2ZW50cyhjb250YWluZXIpOwoJCX0KCgkJdGhpcy5pbnN0YW5jZSA9IGNvbnRhaW5lcjsKCgkJLyoqCgkJICogU2V0dXAgb3Rpb25zLgoJCSAqCgkJICogQHBhcmFtIHtvYmplY3R9IGN1cnJlbnQgRGVmYXVsdCBvcHRpb25zLgoJCSAqIEBwYXJhbSB7b2JqZWN0fSB1cGRhdGVzIFVzZXIgb3B0aW9ucwoJCSAqCgkJICogQHJldHVybiB7b2JqZWN0fQoJCSAqLwoJCWZ1bmN0aW9uIGV4dGVuZERlZmF1bHRzKGN1cnJlbnQsIHVwZGF0ZXMpIHsKCQkJZm9yIChrZXkgb2YgT2JqZWN0LmtleXModXBkYXRlcykpIHsKCQkJCWlmICghY3VycmVudC5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IHR5cGVvZiB1cGRhdGVzW2tleV0gIT09ICdvYmplY3QnIHx8IHVwZGF0ZXNba2V5XSBpbnN0YW5jZW9mIEVsZW1lbnQpIGN1cnJlbnRba2V5XSA9IHVwZGF0ZXNba2V5XTsKCQkJCWVsc2UgZXh0ZW5kRGVmYXVsdHMoY3VycmVudFtrZXldLCB1cGRhdGVzW2tleV0pOwoJCQl9CgkJCXJldHVybiBjdXJyZW50OwoJCX0KCgkJLyoqCgkJICogQ3JlYXRlIGFuZCBmaXJlIG9ic2VydmVyLgoJCSAqCgkJICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyIEhvbGUgdGFicyBjb250YWluZXIuCgkJICoKCQkgKiBAcmV0dXJuIHZvaWQKCQkgKi8KCQlmdW5jdGlvbiBhdHRhY2hPYnNlcnZlcihjb250YWluZXIpIHsKCgkJCWNvbnN0CgkJCQl0YWJzQ29udGVudCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcudGFiLWNvbnRlbnQnKSwKCQkJCW9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKG9ic2VydmVyQ2FsbGJhY2suYmluZChjb250YWluZXIpLCBjb250YWluZXIuZHluYW1pY1RhYnMub3B0aW9ucy5vYnNlcnZlcik7CgoJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udGFpbmVyLmR5bmFtaWNUYWJzLCAnb2JzZXJ2ZXInLCB7CgkJCQl2YWx1ZTogb2JzZXJ2ZXIsCgkJCQljb25maWd1cmFibGU6IHRydWUsCgkJCX0pOwoKCQkJdGFic0NvbnRlbnQuZm9yRWFjaCh0YWJDb250ZW50ID0+IHsKCQkJCW9ic2VydmVyLm9ic2VydmUodGFiQ29udGVudCk7CgkJCX0pOwoJCX0KCgkJLyoqCgkJICogRGVzdHJveSBvYnNlcnZlci4KCQkgKgoJCSAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvbnRhaW5lciBIb2xlIHRhYnMgY29udGFpbmVyLgoJCSAqCgkJICogQHJldHVybiB2b2lkCgkJICovCgkJZnVuY3Rpb24gZGV0YWNoT2JzZXJ2ZXJzKGNvbnRhaW5lcikgewoKCQkJY29uc3QKCQkJCXRhYnNDb250ZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy50YWItY29udGVudCcpLAoJCQkJb2JzZXJ2ZXIgPSBjb250YWluZXIuZHluYW1pY1RhYnMub2JzZXJ2ZXI7CgoJCQl0YWJzQ29udGVudC5mb3JFYWNoKHRhYkNvbnRlbnQgPT4gewoJCQkJdGFiQ29udGVudC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7CgkJCQlvYnNlcnZlci51bm9ic2VydmUodGFiQ29udGVudCk7CgkJCX0pOwoKCQkJZGVsZXRlIGNvbnRhaW5lci5keW5hbWljVGFiczsKCQl9CgoJCS8qKgoJCSAqIENyZWF0ZSBhbmQgZmlyZSBldmVudCBsaXN0ZXJzIGhhbmRsZXJzLgoJCSAqCgkJICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyIEhvbGUgdGFicyBjb250YWluZXIuCgkJICoKCQkgKiBAcmV0dXJuIHZvaWQKCQkgKi8KCQlmdW5jdGlvbiBhdHRhY2hFdmVudHMoY29udGFpbmVyKSB7CgoJCQljb25zdAoJCQkJdGFiSXRlbXMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnRhYi1pdGVtJyksCgkJCQlsZWZ0ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5saXN0LWxlZnQnKSwKCQkJCXJpZ2h0ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5saXN0LXJpZ2h0Jyk7CgoJCQl0YWJJdGVtcy5mb3JFYWNoKHRhYkl0ZW0gPT4gewoJCQkJdGFiSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xpY2tUYWJJdGVtKTsKCQkJfSk7CgoJCQlsZWZ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbGlzdExlZnQpOwoJCQlyaWdodC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGxpc3RSaWdodCk7CgoJCQl3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHBhZ2VMb2FkZWQuYmluZChjb250YWluZXIpLCB7IG9uY2U6IHRydWUgfSk7CgkJfQoKCQkvKioKCQkgKiBSZW1vdmUgZXZlbnQgaGFuZGxlcnMuCgkJICoKCQkgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb250YWluZXIgSG9sZSB0YWJzIGNvbnRhaW5lci4KCQkgKgoJCSAqIEByZXR1cm4gdm9pZAoJCSAqLwoJCWZ1bmN0aW9uIGRldGFjaEV2ZW50cyhjb250YWluZXIpIHsKCgkJCWNvbnN0IHRhYkl0ZW1zID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy50YWItaXRlbScpOwoKCQkJdGFiSXRlbXMuZm9yRWFjaCh0YWJJdGVtID0+IHsKCQkJCXRhYkl0ZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrVGFiSXRlbSk7CgkJCX0pOwoJCX0KCgkJLyoqCgkJICogSW5zZXJ0IHNjcm9sbCBoYW5kbGVycy4KCQkgKgoJCSAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvbnRhaW5lciBIb2xlIHRhYnMgY29udGFpbmVyLgoJCSAqCgkJICogQHJldHVybiB2b2lkCgkJICovCgkJZnVuY3Rpb24gYXR0YWNoUGFnaW5hdGlvbihjb250YWluZXIpIHsKCQkJY29uc3QKCQkJCWxlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwKCQkJCXJpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksCgkJCQl0YXJnZXQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnRhYi1saXN0Jyk7CgoJCQlsZWZ0LmNsYXNzTGlzdC5hZGQoJ3BhZ2luYXRpb24nLCAnbGlzdC1sZWZ0Jyk7CgkJCXJpZ2h0LmNsYXNzTGlzdC5hZGQoJ3BhZ2luYXRpb24nLCAnbGlzdC1yaWdodCcpOwoKCQkJdGFyZ2V0LnByZXBlbmQobGVmdCk7CgkJCXRhcmdldC5hcHBlbmRDaGlsZChyaWdodCk7CgkJfQoKCQkvKioKCQkgKiBEZWxldGUgc2Nyb2xsIGhhbmRsZXJzLgoJCSAqCgkJICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyIEhvbGUgdGFicyBjb250YWluZXIuCgkJICoKCQkgKiBAcmV0dXJuIHZvaWQKCQkgKi8KCQlmdW5jdGlvbiBkZXRhY2hQYWdpbmF0aW9uKGNvbnRhaW5lcikgewoJCQljb25zdCB0YXJnZXQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnBhZ2luYXRpb24nKTsKCgkJCXRhcmdldC5mb3JFYWNoKGhhbmRsZXIgPT4gewoJCQkJaGFuZGxlci5yZW1vdmUoKTsKCQkJfSk7CgkJfQoKCQkvKioKCQkgKiBDcmVhdGUgYW5kIGZpcmUgZXZlbnQgbGlzdGVycyBoYW5kbGVycyBpZiBJbnRlcnNlY3Rpb25PYnNlcnZlciBub3Qgc3VwcG9ydGVkLgoJCSAqCgkJICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyIEhvbGUgdGFicyBjb250YWluZXIuCgkJICoKCQkgKiBAcmV0dXJuIHZvaWQKCQkgKi8KCQlmdW5jdGlvbiBhdHRhY2hTaW1wbGVFdmVudHMoY29udGFpbmVyKSB7CgkJCWNvbnN0IHRhYkl0ZW1zID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy50YWItaXRlbScpOwoKCQkJdGFiSXRlbXMuZm9yRWFjaCh0YWJJdGVtID0+IHsKCQkJCXRhYkl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrVGFiSXRlbVNpbXBsZSk7CgkJCX0pOwoJCX0KCgkJLyoqCgkJICogUmVtb3ZlIGV2ZW50IGhhbmRsZXJzLgoJCSAqCgkJICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyIEhvbGUgdGFicyBjb250YWluZXIuCgkJICoKCQkgKiBAcmV0dXJuIHZvaWQKCQkgKi8KCQlmdW5jdGlvbiBkZXRhY2hFdmVudHMoY29udGFpbmVyKSB7CgoJCQljb25zdCB0YWJJdGVtcyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcudGFiLWl0ZW0nKTsKCgkJCXRhYkl0ZW1zLmZvckVhY2godGFiSXRlbSA9PiB7CgkJCQl0YWJJdGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGlja1RhYkl0ZW1TaW1wbGUpOwoJCQl9KTsKCQl9CgoJCS8qKgoJCSAqIEV2ZW50IGhhbmRsZXIgd2hlbiB0YWIgY2xpY2tlZC4KCQkgKgoJCSAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFBvaW50ZXIgZXZlbnQuCgkJICoKCQkgKiBAcmV0dXJuIHZvaWQKCQkgKi8KCQlmdW5jdGlvbiBvbkNsaWNrVGFiSXRlbShldmVudCkgewoJCQlldmVudC5wcmV2ZW50RGVmYXVsdCgpOwoKCQkJY29uc3QKCQkJCWNvbnRhaW5lciA9IHRoaXMucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LAoJCQkJdGFiTGlzdCA9IHRoaXMucGFyZW50RWxlbWVudCwKCQkJCXRhYklkID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKS5zdWJzdHJpbmcoMSksCgkJCQl0YWJDb250ZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYCMke3RhYklkfWApOwoKCQkJY29uc3QKCQkJCXRhYkxpc3RIZWlnaHQgPSB0YWJMaXN0Lm9mZnNldEhlaWdodDsKCgkJCWNvbnN0CgkJCQl0YWJDb250ZW50UGFyZW50U2Nyb2xsTm9kZSA9IGdldFNjcm9sbFBhcmVudCh0YWJDb250ZW50KSwKCQkJCXRhYkNvbnRlbnRQYXJlbnRTY3JvbGxOb2RlVG8gPSB0YWJDb250ZW50Lm9mZnNldFRvcCAtIHRhYkxpc3RIZWlnaHQgLSBjb250YWluZXIuZHluYW1pY1RhYnMub3B0aW9ucy5zY3JvbGxNYXJnaW5TaGlmdDsKCgkJCXN0YXJ0VXJsLmhhc2ggPSB0YWJJZDsKCgkJCXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7CgkJCQl0YWJVcmw6IHN0YXJ0VXJsLnRvU3RyaW5nKCksCgkJCX0sICcnLCBzdGFydFVybCk7CgoJCQlzY3JvbGxUbyh0YWJDb250ZW50UGFyZW50U2Nyb2xsTm9kZSwgdGFiQ29udGVudFBhcmVudFNjcm9sbE5vZGVUbywgMzAwLCAnVG9wJyk7CgkJfQoKCQkvKioKCQkgKiBFdmVudCBoYW5kbGVyIHdoZW4gdGFiIGNsaWNrZWQgYW5kIEludGVyc2VjdGlvbk9ic2VydmVyIG5vdCBzdXBwb3J0ZWQuCgkJICoKCQkgKiBAcGFyYW0ge0V2ZW50fSBldmVudCBQb2ludGVyIGV2ZW50LgoJCSAqCgkJICogQHJldHVybiB2b2lkCgkJICovCgkJZnVuY3Rpb24gb25DbGlja1RhYkl0ZW1TaW1wbGUoZXZlbnQpIHsKCgkJCS8vIENsZWFyIGFsbCBhY3RpdmUuCgkJCWNvbnN0IGFsbEFjdGl2ZVRhYnMgPSB0aGlzLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhYi1pdGVtLmFjdGl2ZScpOwoKCQkJYWxsQWN0aXZlVGFicy5mb3JFYWNoKGFjdGl2ZVRhYiA9PiBhY3RpdmVUYWIuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJykpOwoKCQkJdGhpcy5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTsKCgkJCWNvbnN0IHVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uKTsKCQkJdXJsLmhhc2ggPSB0YWJJZDsKCgkJCXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7CgkJCQl0YWJVcmw6IHVybC50b1N0cmluZygpLAoJCQl9LCAnJywgdXJsKTsKCQl9CgoJCS8qKgoJCSAqIEV2ZW50IGhhbmRsZXIgd2hlbiBzY3JvbGwgbGVmdCBjbGlja2VkLgoJCSAqCgkJICogQHBhcmFtIHtFdmVudH0gZXZlbnQgUG9pbnRlciBldmVudC4KCQkgKgoJCSAqIEByZXR1cm4gdm9pZAoJCSAqLwoJCWZ1bmN0aW9uIGxpc3RMZWZ0KGV2ZW50KSB7CgkJCWNvbnN0CgkJCQl0YWJQYXJlbnRTY3JvbGxOb2RlID0gdGhpcy5wYXJlbnRFbGVtZW50LAoJCQkJdGFiUGFyZW50U2Nyb2xsTm9kZVRvID0gdGFiUGFyZW50U2Nyb2xsTm9kZS5zY3JvbGxMZWZ0IC0gdGFiUGFyZW50U2Nyb2xsTm9kZS5vZmZzZXRXaWR0aDsKCgkJCXNjcm9sbFRvKHRhYlBhcmVudFNjcm9sbE5vZGUsIHRhYlBhcmVudFNjcm9sbE5vZGVUbywgMzAwLCAnTGVmdCcpCgkJCQkudGhlbigocmVzb2x2ZSkgPT4gewoJCQkJCXRvZ2dsZVBhZ2luYXRpb24obmV3QWN0aXZlVGFiKTsKCQkJCX0pOzsKCQl9CgoJCS8qKgoJCSAqIEV2ZW50IGhhbmRsZXIgd2hlbiBzY3JvbGwgcmlnaHQgY2xpY2tlZC4KCQkgKgoJCSAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFBvaW50ZXIgZXZlbnQuCgkJICoKCQkgKiBAcmV0dXJuIHZvaWQKCQkgKi8KCQlmdW5jdGlvbiBsaXN0UmlnaHQoZXZlbnQpIHsKCQkJY29uc3QKCQkJCXRhYlBhcmVudFNjcm9sbE5vZGUgPSB0aGlzLnBhcmVudEVsZW1lbnQsCgkJCQl0YWJQYXJlbnRTY3JvbGxOb2RlVG8gPSB0YWJQYXJlbnRTY3JvbGxOb2RlLnNjcm9sbExlZnQgKyB0YWJQYXJlbnRTY3JvbGxOb2RlLm9mZnNldFdpZHRoOwoKCQkJc2Nyb2xsVG8odGFiUGFyZW50U2Nyb2xsTm9kZSwgdGFiUGFyZW50U2Nyb2xsTm9kZVRvLCAzMDAsICdMZWZ0JykKCQkJCS50aGVuKChyZXNvbHZlKSA9PiB7CgkJCQkJdG9nZ2xlUGFnaW5hdGlvbihuZXdBY3RpdmVUYWIpOwoJCQkJfSk7OwoJCX0KCgkJLyoqCgkJICogaXJlIG9uY2Ugd2luZG93IGxvYWRlZCBhbmQgc2Nyb2xsIHRvIHByb3BwZXIgdGFiLgoJCSAqICd0aGlzJyAtIGlzIGEgdGFiIGNvbnRhaW5lciBoZXJlLgoJCSAqCgkJICogQHBhcmFtIHtFdmVudH0gZXZlbnQgV2luZG93IGxvYWRlZAoJCSAqCgkJICogQHJldHVybiB2b2lkCgkJICovCgkJZnVuY3Rpb24gcGFnZUxvYWRlZChldmVudCkgewoJCQljb25zdAoJCQkJdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24pLAoJCQkJaGFzaCA9IHVybC5oYXNoLAoJCQkJdGFicyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnLnRhYi1saXN0IC50YWItaXRlbScpOwoKCQkJZm9yIChsZXQgaSA9IDA7IGkgPCB0YWJzLmxlbmd0aDsgaSsrKSB7CgkJCQljb25zdAoJCQkJCXRhYiA9IHRhYnMuaXRlbShpKSwKCQkJCQlocmVmID0gdGFiLmdldEF0dHJpYnV0ZSgnaHJlZicpOwoKCQkJCWlmIChocmVmID09PSBoYXNoKSB7CgkJCQkJdGFiLmNsaWNrKCk7CgkJCQkJYnJlYWs7CgkJCQl9CgkJCX0KCQl9CgoJCS8qKgoJCSAqIENhbGxiYWNrIGZvciBJbnRlcnNlY3Rpb25PYnNlcnZlcgoJCSAqCgkJICogQHBhcmFtIHtIVE1MRWxlbWVudH0gICAgICAgICAgICAgICBjb250YWluZXIgICBIb2xlIHRhYnMgY29udGFpbmVyLgoJCSAqIEBwYXJhbSB7SW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeX0gdGFic0NvbnRlbnQgT2JzZXJ2ZWQgSFRNTCBlbGVtZW50cwoJCSAqIEBwYXJhbSB7SW50ZXJzZWN0aW9uT2JzZXJ2ZXJ9ICAgICAgb2JzZXJ2ZXIgICAgSW5zdGFuY2Ugb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIKCQkgKgoJCSAqIEByZXR1cm4gdm9pZAoJCSAqLwoJCWZ1bmN0aW9uIG9ic2VydmVyQ2FsbGJhY2sodGFic0NvbnRlbnQsIG9ic2VydmVyKSB7CgoJCQkvLyBIRVJFIHRoaXMgPSBjb250YWluZXIuCgoJCQkvLyBDbGVhciBhbGwgYWN0aXZlLgoJCQlsZXQgYWxsQWN0aXZlVGFicyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnLnRhYi1pdGVtLmFjdGl2ZScpOwoJCQljb25zdCBhbGxUYWJDb250ZW50ID0gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKCcudGFiLWNvbnRlbnQnKTsKCgkJCWFsbEFjdGl2ZVRhYnMuZm9yRWFjaChhY3RpdmVUYWIgPT4gYWN0aXZlVGFiLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpKTsKCgkJCS8vIFNldCBuZXcgYWN0aXZlIHRhYi4KCQkJdGFic0NvbnRlbnQuZm9yRWFjaCh0YWJDb250ZW50ID0+IHsKCgkJCQljb25zdAoJCQkJCWN1cnJlbnRUYWJJZCA9IHRhYkNvbnRlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZSgnaWQnKSwKCQkJCQljdXJyZW50VGFiVGFyZ2V0ID0gdGFiQ29udGVudC50YXJnZXQucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKGBbaHJlZj0iIyR7Y3VycmVudFRhYklkfSJdYCk7CgoJCQkJY3VycmVudFRhYlRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCB0YWJDb250ZW50LmlzSW50ZXJzZWN0aW5nKTsKCQkJfSk7CgoJCQkvLyBDaGVjayBhZ2FpbiBhY3RpdmUgdGFicy4KCQkJYWxsQWN0aXZlVGFicyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnLnRhYi1pdGVtLmFjdGl2ZScpOwoKCQkJLy8gSWYgbm8gYWN0aXZlIGZvdW5kIHdlIHNjcm9sbGVkIG91dCBvZiByb290CgkJCS8vIEZpbmQgd2hpY2ggdGFiIHBhbmUgY2xvc2UgdG8gYSB0YWIgbGlzdCAoZmlyc3R8bGFzdCkKCQkJLy8gQW5kIG1ha2UgaXQgYWN0aXZlLgoJCQlpZiAoYWxsQWN0aXZlVGFicy5sZW5ndGggPT09IDApIHsKCgkJCQljb25zdCBkaXN0YW5jZXMgPSBbXTsKCgkJCQlhbGxUYWJDb250ZW50LmZvckVhY2goKHRhYkNvbnRlbnQpID0+IHsKCQkJCQlkaXN0YW5jZXMucHVzaChNYXRoLmFicyh0YWJDb250ZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCkpOwoJCQkJfSk7CgoJCQkJY29uc3QKCQkJCQltaW4gPSBNYXRoLm1pbihkaXN0YW5jZXNbMF0sIGRpc3RhbmNlc1tkaXN0YW5jZXMubGVuZ3RoIC0gMV0pLAoJCQkJCWluZGV4ID0gZGlzdGFuY2VzLmluZGV4T2YobWluKSwKCQkJCQl0YXJnZXRUYWJJZCA9IGFsbFRhYkNvbnRlbnRbaW5kZXhdLmdldEF0dHJpYnV0ZSgnaWQnKTsKCgkJCQl0aGlzLnF1ZXJ5U2VsZWN0b3IoYFtocmVmPSIjJHt0YXJnZXRUYWJJZH0iXWApLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpOwoJCQl9CgoJCQkvLyBDaGVjayBhZ2FpbiBhY3RpdmUgdGFicyBhbmQgc2Nyb2xsIGl0IGludG8gdmlldyBpZiBuZWVkZWQuCgkJCW5ld0FjdGl2ZVRhYiA9IHRoaXMucXVlcnlTZWxlY3RvcignLnRhYi1pdGVtLmFjdGl2ZScpOwoKCQkJaWYgKG5ld0FjdGl2ZVRhYikgewoKCQkJCWNvbnN0CgkJCQkJbmV3QWN0aXZlVGFiUGFyZW50U2Nyb2xsTm9kZSA9IG5ld0FjdGl2ZVRhYi5jbG9zZXN0KCcudGFiLWxpc3QnKSwKCQkJCQluZXdBY3RpdmVUYWJQYXJlbnRTY3JvbGxOb2RlQ29vcmQgPSBuZXdBY3RpdmVUYWJQYXJlbnRTY3JvbGxOb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLAoJCQkJCW5ld0FjdGl2ZVRhYkNvb3JkID0gbmV3QWN0aXZlVGFiLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLAoJCQkJCW5ld0FjdGl2ZVRhYkxlZnQgPSBNYXRoLnRydW5jKG5ld0FjdGl2ZVRhYkNvb3JkLmxlZnQpLAoJCQkJCW5ld0FjdGl2ZVRhYlJpZ2h0ID0gTWF0aC50cnVuYyhuZXdBY3RpdmVUYWJDb29yZC5yaWdodCksCgkJCQkJbmV3QWN0aXZlVGFiUGFyZW50TGVmdCA9IE1hdGgudHJ1bmMobmV3QWN0aXZlVGFiUGFyZW50U2Nyb2xsTm9kZUNvb3JkLmxlZnQpLAoJCQkJCW5ld0FjdGl2ZVRhYlBhcmVudFJpZ2h0ID0gTWF0aC50cnVuYyhuZXdBY3RpdmVUYWJQYXJlbnRTY3JvbGxOb2RlQ29vcmQucmlnaHQpOwoKCQkJCWNvbnN0CgkJCQkJdGFic0l0ZW1zID0gbmV3QWN0aXZlVGFiUGFyZW50U2Nyb2xsTm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcudGFiLWl0ZW0nKSwKCQkJCQl0YWJzSXRlbXNBcnIgPSBBcnJheS5mcm9tKHRhYnNJdGVtcyksCgkJCQkJcHJldlRhYkluZGV4ID0gdGFic0l0ZW1zQXJyLmluZGV4T2YobmV3QWN0aXZlVGFiKSAtIDEsCgkJCQkJbmV4dFRhYkluZGV4ID0gdGFic0l0ZW1zQXJyLmluZGV4T2YobmV3QWN0aXZlVGFiKSArIDE7CgoJCQkJbGV0IG5ld0FjdGl2ZVRhYlBhcmVudFNjcm9sbE5vZGVUbyA9IGZhbHNlOwoKCQkJCS8vIFNjcm9sbCB0byB0aGUgcmlnaHQKCQkJCWlmIChuZXdBY3RpdmVUYWJSaWdodCA+PSBuZXdBY3RpdmVUYWJQYXJlbnRSaWdodCkgewoKCQkJCQkvLyBUaGlzIGlzIGFjdHVhbGx5IGludmlzaWJsZSB3aWR0aCBvZiBjdXJyZW50IHRhYiArIDgwJSB3aWR0aCBvZiBuZXh0IHRhYi4KCQkJCQljb25zdAoJCQkJCQluZXh0VGFiV2lkdGggPSAodHlwZW9mIHRhYnNJdGVtc0FycltuZXh0VGFiSW5kZXhdID09PSAndW5kZWZpbmVkJykgPyAwIDogdGFic0l0ZW1zQXJyW25leHRUYWJJbmRleF0ub2Zmc2V0V2lkdGggKiAwLjgsCgkJCQkJCXNoaWZ0ID0gbmV3QWN0aXZlVGFiUmlnaHQgLSBuZXdBY3RpdmVUYWJQYXJlbnRSaWdodCArIG5leHRUYWJXaWR0aDsKCgkJCQkJLy8gR2V0IGN1cnJlbnQgc2Nyb2xsIGFuZCBhZGQgc2hpZnQgKHNoaWZ0IGlzIHBvc2l0aXZlKS4KCQkJCQluZXdBY3RpdmVUYWJQYXJlbnRTY3JvbGxOb2RlVG8gPSBuZXdBY3RpdmVUYWJQYXJlbnRTY3JvbGxOb2RlLnNjcm9sbExlZnQgKyBzaGlmdDsKCgkJCQl9CgkJCQkvLyBTY3JvbGwgdG8gdGhlIGxlZnQKCQkJCWVsc2UgaWYgKG5ld0FjdGl2ZVRhYkxlZnQgPD0gbmV3QWN0aXZlVGFiUGFyZW50TGVmdCkgewoKCQkJCQkvLyBUaGlzIGlzIGFjdHVhbGx5IGludmlzaWJsZSB3aWR0aCBvZiBjdXJyZW50IHRhYiArIDgwJSB3aWR0aCBvZiBwcmV2aW91cyB0YWIuCgkJCQkJY29uc3QKCQkJCQkJcHJldlRhYldpZHRoID0gKHR5cGVvZiB0YWJzSXRlbXNBcnJbcHJldlRhYkluZGV4XSA9PT0gJ3VuZGVmaW5lZCcpID8gMCA6IHRhYnNJdGVtc0FycltwcmV2VGFiSW5kZXhdLm9mZnNldFdpZHRoICogMC44LAoJCQkJCQlzaGlmdCA9IG5ld0FjdGl2ZVRhYkxlZnQgLSBuZXdBY3RpdmVUYWJQYXJlbnRMZWZ0IC0gcHJldlRhYldpZHRoOwoKCQkJCQkvLyBHZXQgY3VycmVudCBzY3JvbGwgYW5kIGFkZCBzaGlmdCAoc2hpZnQgaXMgbmVnYXRpdmUpLgoJCQkJCW5ld0FjdGl2ZVRhYlBhcmVudFNjcm9sbE5vZGVUbyA9IG5ld0FjdGl2ZVRhYlBhcmVudFNjcm9sbE5vZGUuc2Nyb2xsTGVmdCArIHNoaWZ0OwoJCQkJfQoKCQkJCWlmIChuZXdBY3RpdmVUYWJQYXJlbnRTY3JvbGxOb2RlVG8gIT09IGZhbHNlKSB7CgkJCQkJc2Nyb2xsVG8obmV3QWN0aXZlVGFiUGFyZW50U2Nyb2xsTm9kZSwgbmV3QWN0aXZlVGFiUGFyZW50U2Nyb2xsTm9kZVRvLCAzMDAsICdMZWZ0JykKCQkJCQkJLnRoZW4oKHJlc29sdmUpID0+IHsKCQkJCQkJCXRvZ2dsZVBhZ2luYXRpb24obmV3QWN0aXZlVGFiKTsKCQkJCQkJfSk7CgkJCQl9CgkJCX0KCQl9CgoJCS8qKgoJCSAqIFNob3cvSGlkZSBhcnJvd3MgZm9yIHNjcm9sbGluZyB0YWJzLgoJCSAqCgkJICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYWN0aXZlVGFiIEN1cnJlbnQgYWN0aXZlIHRhYi4KCQkgKgoJCSAqIEByZXR1cm4gdm9pZAoJCSAqLwoJCWZ1bmN0aW9uIHRvZ2dsZVBhZ2luYXRpb24oYWN0aXZlVGFiKSB7CgkJCWNvbnN0CgkJCQl0YWJMaXN0ID0gYWN0aXZlVGFiLmNsb3Nlc3QoJy50YWItbGlzdCcpLAoJCQkJdGFic0l0ZW1zID0gdGFiTGlzdC5xdWVyeVNlbGVjdG9yQWxsKCcudGFiLWl0ZW0nKSwKCQkJCXRhYnNJdGVtc0FyciA9IEFycmF5LmZyb20odGFic0l0ZW1zKSwKCQkJCXRhYkl0ZW1zTGVuZ3RoID0gdGFic0l0ZW1zQXJyLmxlbmd0aDsKCgkJCWNvbnN0CgkJCQl0YWJzTGlzdENvb3JkID0gdGFiTGlzdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwKCQkJCWZpcnN0VGFiQ29vcmQgPSB0YWJzSXRlbXNBcnJbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksCgkJCQlsYXN0VGFiQ29vcmQgPSB0YWJzSXRlbXNBcnJbdGFiSXRlbXNMZW5ndGggLSAxXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKCgkJCWNvbnN0CgkJCQl0YWJzTGlzdENvb3JkTGVmdCA9IE1hdGgudHJ1bmModGFic0xpc3RDb29yZC5sZWZ0KSwKCQkJCXRhYnNMaXN0Q29vcmRSaWdodCA9IE1hdGgudHJ1bmModGFic0xpc3RDb29yZC5yaWdodCk7CgkJCWZpcnN0VGFiQ29vcmRMZWZ0ID0gTWF0aC50cnVuYyhmaXJzdFRhYkNvb3JkLmxlZnQpOwoJCQlsYXN0VGFiQ29vcmRSaWdodCA9IE1hdGgudHJ1bmMobGFzdFRhYkNvb3JkLnJpZ2h0KTsKCgkJCWlmIChmaXJzdFRhYkNvb3JkTGVmdCA8IHRhYnNMaXN0Q29vcmRMZWZ0KSB7CgkJCQl0YWJMaXN0LnF1ZXJ5U2VsZWN0b3IoJy5saXN0LWxlZnQnKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOwoJCQl9IGVsc2UgewoJCQkJdGFiTGlzdC5xdWVyeVNlbGVjdG9yKCcubGlzdC1sZWZ0Jykuc3R5bGUuZGlzcGxheSA9ICcnOwoJCQl9CgoJCQlpZiAobGFzdFRhYkNvb3JkUmlnaHQgPiB0YWJzTGlzdENvb3JkUmlnaHQpIHsKCQkJCXRhYkxpc3QucXVlcnlTZWxlY3RvcignLmxpc3QtcmlnaHQnKS5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOwoJCQl9IGVsc2UgewoJCQkJdGFiTGlzdC5xdWVyeVNlbGVjdG9yKCcubGlzdC1yaWdodCcpLnN0eWxlLmRpc3BsYXkgPSAnJzsKCQkJfQoJCX0KCgkJLyoqCgkJICogQ3VzdG9tIHNjcm9sbCB0by4KCQkgKgoJCSAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRvICAgICAgICBET00gRWxlbWVudCB0byBzY3JvbGwgdG8uCgkJICogQHBhcmFtIHtudW1iZXJ9ICAgICAgZHVyYXRpb24gIFNjcm9sbCBkdXJhdGlvbi4KCQkgKiBAcGFyYW0ge3N0cmluZ30gICAgICBkaXJlY3Rpb24gT25seSBMZWZ0fFRvcC4KCQkgKgoJCSAqIEByZXR1cm4gUHJvbWlzZS4KCQkgKi8KCQlmdW5jdGlvbiBzY3JvbGxUbyhlbGVtZW50LCB0bywgZHVyYXRpb24sIGRpcmVjdGlvbikgewoJCQljb25zdAoJCQkJc3RhcnQgPSBlbGVtZW50W2BzY3JvbGwke2RpcmVjdGlvbn1gXSwKCQkJCWNoYW5nZSA9IHRvIC0gc3RhcnQsCgkJCQlzdGFydERhdGUgPSArbmV3IERhdGUoKSwKCgkJCQkvKioKCQkJCSAqIFtlYXNlSW5PdXRRdWFkIGRlc2NyaXB0aW9uXQoJCQkJICoKCQkJCSAqIEBwYXJhbSB7bnVtYmVyfSB0IFRpbWVzdGFtcC4KCQkJCSAqIEBwYXJhbSB7bnVtYmVyfSBiIFN0YXJ0LgoJCQkJICogQHBhcmFtIHtudW1iZXJ9IGMgQ2hhbmdlLgoJCQkJICogQHBhcmFtIHtudW1iZXJ9IGQgRHVyYXRpb24uCgkJCQkgKgoJCQkJICogQHJldHVybiBmbG9hdAoJCQkJICovCgkJCQllYXNlSW5PdXRRdWFkID0gKHQsIGIsIGMsIGQpID0+IHsKCQkJCQl0IC89IGQgLyAyOwoJCQkJCWlmICh0IDwgMSkgcmV0dXJuIGMgLyAyICogdCAqIHQgKyBiOwoJCQkJCXQtLTsKCQkJCQlyZXR1cm4gLWMgLyAyICogKHQgKiAodCAtIDIpIC0gMSkgKyBiOwoJCQkJfSwKCQkJCWFuaW1hdGVTY3JvbGxQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewoJCQkJCWNvbnN0IGFuaW1hdGVTY3JvbGwgPSAoKSA9PiB7CgkJCQkJCWNvbnN0CgkJCQkJCQljdXJyZW50RGF0ZSA9ICtuZXcgRGF0ZSgpLAoJCQkJCQkJY3VycmVudFRpbWUgPSBjdXJyZW50RGF0ZSAtIHN0YXJ0RGF0ZTsKCgkJCQkJCWVsZW1lbnRbYHNjcm9sbCR7ZGlyZWN0aW9ufWBdID0gcGFyc2VJbnQoZWFzZUluT3V0UXVhZChjdXJyZW50VGltZSwgc3RhcnQsIGNoYW5nZSwgZHVyYXRpb24pKTsKCgkJCQkJCWlmIChjdXJyZW50VGltZSA8IGR1cmF0aW9uKSB7CgkJCQkJCQlyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZVNjcm9sbCk7CgkJCQkJCX0KCQkJCQkJZWxzZSB7CgkJCQkJCQllbGVtZW50W2BzY3JvbGwke2RpcmVjdGlvbn1gXSA9IHRvOwoJCQkJCQkJcmVzb2x2ZSgnZG9uZScpOwoJCQkJCQl9CgkJCQkJfTsKCQkJCQlhbmltYXRlU2Nyb2xsKCk7CgkJCQl9KTsKCgkJCXJldHVybiBhbmltYXRlU2Nyb2xsUHJvbWlzZTsKCQl9CgoJCS8qKgoJCSAqIEZpbmQgY2xvc2VzdCBzY3JvbGxhYmxlIERPTSBlbGVtZW50IHJlbGF0aXZlIHRvIGdpdmVuIG5vZGUuCgkJICoKCQkgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlIERPTSBub2RlLgoJCSAqCgkJICogQHJldHVybiBzdHJpbmcgRE9NIHNlbGVjdG9yLgoJCSAqLwoJCWZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlKSB7CgkJCWNvbnN0IHJlZ2V4ID0gLyhhdXRvfHNjcm9sbCkvOwoJCQljb25zdCBwYXJlbnRzID0gKF9ub2RlLCBwcykgPT4gewoJCQkJaWYgKF9ub2RlLnBhcmVudE5vZGUgPT09IG51bGwpIHsgcmV0dXJuIHBzOyB9CgkJCQlyZXR1cm4gcGFyZW50cyhfbm9kZS5wYXJlbnROb2RlLCBwcy5jb25jYXQoW19ub2RlXSkpOwoJCQl9OwoKCQkJY29uc3QKCQkJCXN0eWxlID0gKF9ub2RlLCBwcm9wKSA9PiBnZXRDb21wdXRlZFN0eWxlKF9ub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApLAoJCQkJb3ZlcmZsb3cgPSBfbm9kZSA9PiBzdHlsZShfbm9kZSwgJ292ZXJmbG93JykgKyBzdHlsZShfbm9kZSwgJ292ZXJmbG93LXknKSArIHN0eWxlKF9ub2RlLCAnb3ZlcmZsb3cteCcpLAoJCQkJc2Nyb2xsID0gX25vZGUgPT4gcmVnZXgudGVzdChvdmVyZmxvdyhfbm9kZSkpOwoKCQkJY29uc3Qgc2Nyb2xsUGFyZW50ID0gKF9ub2RlKSA9PiB7CgkJCQlpZiAoIShfbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IF9ub2RlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCkpIHsKCQkJCQlyZXR1cm47CgkJCQl9CgoJCQkJY29uc3QgcHMgPSBwYXJlbnRzKF9ub2RlLnBhcmVudE5vZGUsIFtdKTsKCgkJCQlmb3IgKGxldCBpID0gMDsgaSA8IHBzLmxlbmd0aDsgaSArPSAxKSB7CgkJCQkJaWYgKHNjcm9sbChwc1tpXSkpIHsKCQkJCQkJcmV0dXJuIHBzW2ldOwoJCQkJCX0KCQkJCX0KCgkJCQlyZXR1cm4gZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CgkJCX07CgoJCQlyZXR1cm4gc2Nyb2xsUGFyZW50KG5vZGUpOwoJCX0KCX0KfSgpKTsKIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";