1702936349
waR3U4bTeM%3A1a9296e0115a96c55463b7489685f3e8-a6bd142129887c5e8c19fd03f062dc64
s:644120:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"a6bd142129887c5e8c19fd03f062dc64";s:39:" phpDocumentor\Reflection\Php\File name";s:10:"select2.js";s:39:" phpDocumentor\Reflection\Php\File path";s:39:"includes/assets/js/libraries/select2.js";s:41:" phpDocumentor\Reflection\Php\File source";s:482171:"/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scss/_components/_select2.scss":
/*!********************************************!*\
  !*** ./src/scss/_components/_select2.scss ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/raw-loader/index.js!./node_modules/select2/dist/js/select2.full.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/raw-loader/index.js!./node_modules/select2/dist/js/select2.full.js ***!
  \*****************************************************************************************/
/***/ (function(module) {

module.exports = "/*!\n * Select2 4.0.13\n * https://select2.github.io\n *\n * Released under the MIT license\n * https://github.com/select2/select2/blob/master/LICENSE.md\n */\n;(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node/CommonJS\n    module.exports = function (root, jQuery) {\n      if (jQuery === undefined) {\n        // require('jQuery') returns a factory that requires window to\n        // build a jQuery instance, we normalize how we use modules\n        // that require this pattern but the window provided is a noop\n        // if it's defined (how jquery works)\n        if (typeof window !== 'undefined') {\n          jQuery = require('jquery');\n        }\n        else {\n          jQuery = require('jquery')(root);\n        }\n      }\n      factory(jQuery);\n      return jQuery;\n    };\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n} (function (jQuery) {\n  // This is needed so we can catch the AMD loader configuration and use it\n  // The inner file should be wrapped (by `banner.start.js`) in a function that\n  // returns the AMD loader references.\n  var S2 =(function () {\n  // Restore the Select2 AMD loader so it can be used\n  // Needed mostly in the language files, where the loader is not inserted\n  if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {\n    var S2 = jQuery.fn.select2.amd;\n  }\nvar S2;(function () { if (!S2 || !S2.requirejs) {\nif (!S2) { S2 = {}; } else { require = S2; }\n/**\n * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, http://github.com/requirejs/almond/LICENSE\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name) {\n            name = name.split('/');\n            lastIndex = name.length - 1;\n\n            // If wanting node ID compatibility, strip .js from end\n            // of IDs. Have to do this here, and not in nameToUrl\n            // because node allows either .js or non .js to map\n            // to same file.\n            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n            }\n\n            // Starts with a '.' so need the baseName\n            if (name[0].charAt(0) === '.' && baseParts) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that 'directory' and not name of the baseName's\n                //module. For instance, baseName of 'one/two/three', maps to\n                //'one/two/three.js', but we want the directory, 'one/two' for\n                //this normalization.\n                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                name = normalizedBaseParts.concat(name);\n            }\n\n            //start trimDots\n            for (i = 0; i < name.length; i++) {\n                part = name[i];\n                if (part === '.') {\n                    name.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        name.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n            //end trimDots\n\n            name = name.join('/');\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    //Creates a parts array for a relName where first part is plugin ID,\n    //second part is resource ID. Assumes relName has already been normalized.\n    function makeRelParts(relName) {\n        return relName ? splitPrefix(relName) : [];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relParts) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0],\n            relResourceName = relParts[1];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relResourceName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relResourceName));\n            } else {\n                name = normalize(name, relResourceName);\n            }\n        } else {\n            name = normalize(name, relResourceName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i, relParts,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n        relParts = makeRelParts(relName);\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relParts);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, makeRelParts(callback)).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\nS2.requirejs = requirejs;S2.require = require;S2.define = define;\n}\n}());\nS2.define(\"almond\", function(){});\n\n/* global jQuery:false, $:false */\nS2.define('jquery',[],function () {\n  var _$ = jQuery || $;\n\n  if (_$ == null && console && console.error) {\n    console.error(\n      'Select2: An instance of jQuery or a jQuery-compatible library was not ' +\n      'found. Make sure that you are including jQuery before Select2 on your ' +\n      'web page.'\n    );\n  }\n\n  return _$;\n});\n\nS2.define('select2/utils',[\n  'jquery'\n], function ($) {\n  var Utils = {};\n\n  Utils.Extend = function (ChildClass, SuperClass) {\n    var __hasProp = {}.hasOwnProperty;\n\n    function BaseConstructor () {\n      this.constructor = ChildClass;\n    }\n\n    for (var key in SuperClass) {\n      if (__hasProp.call(SuperClass, key)) {\n        ChildClass[key] = SuperClass[key];\n      }\n    }\n\n    BaseConstructor.prototype = SuperClass.prototype;\n    ChildClass.prototype = new BaseConstructor();\n    ChildClass.__super__ = SuperClass.prototype;\n\n    return ChildClass;\n  };\n\n  function getMethods (theClass) {\n    var proto = theClass.prototype;\n\n    var methods = [];\n\n    for (var methodName in proto) {\n      var m = proto[methodName];\n\n      if (typeof m !== 'function') {\n        continue;\n      }\n\n      if (methodName === 'constructor') {\n        continue;\n      }\n\n      methods.push(methodName);\n    }\n\n    return methods;\n  }\n\n  Utils.Decorate = function (SuperClass, DecoratorClass) {\n    var decoratedMethods = getMethods(DecoratorClass);\n    var superMethods = getMethods(SuperClass);\n\n    function DecoratedClass () {\n      var unshift = Array.prototype.unshift;\n\n      var argCount = DecoratorClass.prototype.constructor.length;\n\n      var calledConstructor = SuperClass.prototype.constructor;\n\n      if (argCount > 0) {\n        unshift.call(arguments, SuperClass.prototype.constructor);\n\n        calledConstructor = DecoratorClass.prototype.constructor;\n      }\n\n      calledConstructor.apply(this, arguments);\n    }\n\n    DecoratorClass.displayName = SuperClass.displayName;\n\n    function ctr () {\n      this.constructor = DecoratedClass;\n    }\n\n    DecoratedClass.prototype = new ctr();\n\n    for (var m = 0; m < superMethods.length; m++) {\n      var superMethod = superMethods[m];\n\n      DecoratedClass.prototype[superMethod] =\n        SuperClass.prototype[superMethod];\n    }\n\n    var calledMethod = function (methodName) {\n      // Stub out the original method if it's not decorating an actual method\n      var originalMethod = function () {};\n\n      if (methodName in DecoratedClass.prototype) {\n        originalMethod = DecoratedClass.prototype[methodName];\n      }\n\n      var decoratedMethod = DecoratorClass.prototype[methodName];\n\n      return function () {\n        var unshift = Array.prototype.unshift;\n\n        unshift.call(arguments, originalMethod);\n\n        return decoratedMethod.apply(this, arguments);\n      };\n    };\n\n    for (var d = 0; d < decoratedMethods.length; d++) {\n      var decoratedMethod = decoratedMethods[d];\n\n      DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);\n    }\n\n    return DecoratedClass;\n  };\n\n  var Observable = function () {\n    this.listeners = {};\n  };\n\n  Observable.prototype.on = function (event, callback) {\n    this.listeners = this.listeners || {};\n\n    if (event in this.listeners) {\n      this.listeners[event].push(callback);\n    } else {\n      this.listeners[event] = [callback];\n    }\n  };\n\n  Observable.prototype.trigger = function (event) {\n    var slice = Array.prototype.slice;\n    var params = slice.call(arguments, 1);\n\n    this.listeners = this.listeners || {};\n\n    // Params should always come in as an array\n    if (params == null) {\n      params = [];\n    }\n\n    // If there are no arguments to the event, use a temporary object\n    if (params.length === 0) {\n      params.push({});\n    }\n\n    // Set the `_type` of the first object to the event\n    params[0]._type = event;\n\n    if (event in this.listeners) {\n      this.invoke(this.listeners[event], slice.call(arguments, 1));\n    }\n\n    if ('*' in this.listeners) {\n      this.invoke(this.listeners['*'], arguments);\n    }\n  };\n\n  Observable.prototype.invoke = function (listeners, params) {\n    for (var i = 0, len = listeners.length; i < len; i++) {\n      listeners[i].apply(this, params);\n    }\n  };\n\n  Utils.Observable = Observable;\n\n  Utils.generateChars = function (length) {\n    var chars = '';\n\n    for (var i = 0; i < length; i++) {\n      var randomChar = Math.floor(Math.random() * 36);\n      chars += randomChar.toString(36);\n    }\n\n    return chars;\n  };\n\n  Utils.bind = function (func, context) {\n    return function () {\n      func.apply(context, arguments);\n    };\n  };\n\n  Utils._convertData = function (data) {\n    for (var originalKey in data) {\n      var keys = originalKey.split('-');\n\n      var dataLevel = data;\n\n      if (keys.length === 1) {\n        continue;\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k];\n\n        // Lowercase the first letter\n        // By default, dash-separated becomes camelCase\n        key = key.substring(0, 1).toLowerCase() + key.substring(1);\n\n        if (!(key in dataLevel)) {\n          dataLevel[key] = {};\n        }\n\n        if (k == keys.length - 1) {\n          dataLevel[key] = data[originalKey];\n        }\n\n        dataLevel = dataLevel[key];\n      }\n\n      delete data[originalKey];\n    }\n\n    return data;\n  };\n\n  Utils.hasScroll = function (index, el) {\n    // Adapted from the function created by @ShadowScripter\n    // and adapted by @BillBarry on the Stack Exchange Code Review website.\n    // The original code can be found at\n    // http://codereview.stackexchange.com/q/13338\n    // and was designed to be used with the Sizzle selector engine.\n\n    var $el = $(el);\n    var overflowX = el.style.overflowX;\n    var overflowY = el.style.overflowY;\n\n    //Check both x and y declarations\n    if (overflowX === overflowY &&\n        (overflowY === 'hidden' || overflowY === 'visible')) {\n      return false;\n    }\n\n    if (overflowX === 'scroll' || overflowY === 'scroll') {\n      return true;\n    }\n\n    return ($el.innerHeight() < el.scrollHeight ||\n      $el.innerWidth() < el.scrollWidth);\n  };\n\n  Utils.escapeMarkup = function (markup) {\n    var replaceMap = {\n      '\\\\': '&#92;',\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      '\\'': '&#39;',\n      '/': '&#47;'\n    };\n\n    // Do not try to escape the markup if it's not a string\n    if (typeof markup !== 'string') {\n      return markup;\n    }\n\n    return String(markup).replace(/[&<>\"'\\/\\\\]/g, function (match) {\n      return replaceMap[match];\n    });\n  };\n\n  // Append an array of jQuery nodes to a given element.\n  Utils.appendMany = function ($element, $nodes) {\n    // jQuery 1.7.x does not support $.fn.append() with an array\n    // Fall back to a jQuery object collection using $.fn.add()\n    if ($.fn.jquery.substr(0, 3) === '1.7') {\n      var $jqNodes = $();\n\n      $.map($nodes, function (node) {\n        $jqNodes = $jqNodes.add(node);\n      });\n\n      $nodes = $jqNodes;\n    }\n\n    $element.append($nodes);\n  };\n\n  // Cache objects in Utils.__cache instead of $.data (see #4346)\n  Utils.__cache = {};\n\n  var id = 0;\n  Utils.GetUniqueElementId = function (element) {\n    // Get a unique element Id. If element has no id,\n    // creates a new unique number, stores it in the id\n    // attribute and returns the new id.\n    // If an id already exists, it simply returns it.\n\n    var select2Id = element.getAttribute('data-select2-id');\n    if (select2Id == null) {\n      // If element has id, use it.\n      if (element.id) {\n        select2Id = element.id;\n        element.setAttribute('data-select2-id', select2Id);\n      } else {\n        element.setAttribute('data-select2-id', ++id);\n        select2Id = id.toString();\n      }\n    }\n    return select2Id;\n  };\n\n  Utils.StoreData = function (element, name, value) {\n    // Stores an item in the cache for a specified element.\n    // name is the cache key.\n    var id = Utils.GetUniqueElementId(element);\n    if (!Utils.__cache[id]) {\n      Utils.__cache[id] = {};\n    }\n\n    Utils.__cache[id][name] = value;\n  };\n\n  Utils.GetData = function (element, name) {\n    // Retrieves a value from the cache by its key (name)\n    // name is optional. If no name specified, return\n    // all cache items for the specified element.\n    // and for a specified element.\n    var id = Utils.GetUniqueElementId(element);\n    if (name) {\n      if (Utils.__cache[id]) {\n        if (Utils.__cache[id][name] != null) {\n          return Utils.__cache[id][name];\n        }\n        return $(element).data(name); // Fallback to HTML5 data attribs.\n      }\n      return $(element).data(name); // Fallback to HTML5 data attribs.\n    } else {\n      return Utils.__cache[id];\n    }\n  };\n\n  Utils.RemoveData = function (element) {\n    // Removes all cached items for a specified element.\n    var id = Utils.GetUniqueElementId(element);\n    if (Utils.__cache[id] != null) {\n      delete Utils.__cache[id];\n    }\n\n    element.removeAttribute('data-select2-id');\n  };\n\n  return Utils;\n});\n\nS2.define('select2/results',[\n  'jquery',\n  './utils'\n], function ($, Utils) {\n  function Results ($element, options, dataAdapter) {\n    this.$element = $element;\n    this.data = dataAdapter;\n    this.options = options;\n\n    Results.__super__.constructor.call(this);\n  }\n\n  Utils.Extend(Results, Utils.Observable);\n\n  Results.prototype.render = function () {\n    var $results = $(\n      '<ul class=\"select2-results__options\" role=\"listbox\"></ul>'\n    );\n\n    if (this.options.get('multiple')) {\n      $results.attr('aria-multiselectable', 'true');\n    }\n\n    this.$results = $results;\n\n    return $results;\n  };\n\n  Results.prototype.clear = function () {\n    this.$results.empty();\n  };\n\n  Results.prototype.displayMessage = function (params) {\n    var escapeMarkup = this.options.get('escapeMarkup');\n\n    this.clear();\n    this.hideLoading();\n\n    var $message = $(\n      '<li role=\"alert\" aria-live=\"assertive\"' +\n      ' class=\"select2-results__option\"></li>'\n    );\n\n    var message = this.options.get('translations').get(params.message);\n\n    $message.append(\n      escapeMarkup(\n        message(params.args)\n      )\n    );\n\n    $message[0].className += ' select2-results__message';\n\n    this.$results.append($message);\n  };\n\n  Results.prototype.hideMessages = function () {\n    this.$results.find('.select2-results__message').remove();\n  };\n\n  Results.prototype.append = function (data) {\n    this.hideLoading();\n\n    var $options = [];\n\n    if (data.results == null || data.results.length === 0) {\n      if (this.$results.children().length === 0) {\n        this.trigger('results:message', {\n          message: 'noResults'\n        });\n      }\n\n      return;\n    }\n\n    data.results = this.sort(data.results);\n\n    for (var d = 0; d < data.results.length; d++) {\n      var item = data.results[d];\n\n      var $option = this.option(item);\n\n      $options.push($option);\n    }\n\n    this.$results.append($options);\n  };\n\n  Results.prototype.position = function ($results, $dropdown) {\n    var $resultsContainer = $dropdown.find('.select2-results');\n    $resultsContainer.append($results);\n  };\n\n  Results.prototype.sort = function (data) {\n    var sorter = this.options.get('sorter');\n\n    return sorter(data);\n  };\n\n  Results.prototype.highlightFirstItem = function () {\n    var $options = this.$results\n      .find('.select2-results__option[aria-selected]');\n\n    var $selected = $options.filter('[aria-selected=true]');\n\n    // Check if there are any selected options\n    if ($selected.length > 0) {\n      // If there are selected options, highlight the first\n      $selected.first().trigger('mouseenter');\n    } else {\n      // If there are no selected options, highlight the first option\n      // in the dropdown\n      $options.first().trigger('mouseenter');\n    }\n\n    this.ensureHighlightVisible();\n  };\n\n  Results.prototype.setClasses = function () {\n    var self = this;\n\n    this.data.current(function (selected) {\n      var selectedIds = $.map(selected, function (s) {\n        return s.id.toString();\n      });\n\n      var $options = self.$results\n        .find('.select2-results__option[aria-selected]');\n\n      $options.each(function () {\n        var $option = $(this);\n\n        var item = Utils.GetData(this, 'data');\n\n        // id needs to be converted to a string when comparing\n        var id = '' + item.id;\n\n        if ((item.element != null && item.element.selected) ||\n            (item.element == null && $.inArray(id, selectedIds) > -1)) {\n          $option.attr('aria-selected', 'true');\n        } else {\n          $option.attr('aria-selected', 'false');\n        }\n      });\n\n    });\n  };\n\n  Results.prototype.showLoading = function (params) {\n    this.hideLoading();\n\n    var loadingMore = this.options.get('translations').get('searching');\n\n    var loading = {\n      disabled: true,\n      loading: true,\n      text: loadingMore(params)\n    };\n    var $loading = this.option(loading);\n    $loading.className += ' loading-results';\n\n    this.$results.prepend($loading);\n  };\n\n  Results.prototype.hideLoading = function () {\n    this.$results.find('.loading-results').remove();\n  };\n\n  Results.prototype.option = function (data) {\n    var option = document.createElement('li');\n    option.className = 'select2-results__option';\n\n    var attrs = {\n      'role': 'option',\n      'aria-selected': 'false'\n    };\n\n    var matches = window.Element.prototype.matches ||\n      window.Element.prototype.msMatchesSelector ||\n      window.Element.prototype.webkitMatchesSelector;\n\n    if ((data.element != null && matches.call(data.element, ':disabled')) ||\n        (data.element == null && data.disabled)) {\n      delete attrs['aria-selected'];\n      attrs['aria-disabled'] = 'true';\n    }\n\n    if (data.id == null) {\n      delete attrs['aria-selected'];\n    }\n\n    if (data._resultId != null) {\n      option.id = data._resultId;\n    }\n\n    if (data.title) {\n      option.title = data.title;\n    }\n\n    if (data.children) {\n      attrs.role = 'group';\n      attrs['aria-label'] = data.text;\n      delete attrs['aria-selected'];\n    }\n\n    for (var attr in attrs) {\n      var val = attrs[attr];\n\n      option.setAttribute(attr, val);\n    }\n\n    if (data.children) {\n      var $option = $(option);\n\n      var label = document.createElement('strong');\n      label.className = 'select2-results__group';\n\n      var $label = $(label);\n      this.template(data, label);\n\n      var $children = [];\n\n      for (var c = 0; c < data.children.length; c++) {\n        var child = data.children[c];\n\n        var $child = this.option(child);\n\n        $children.push($child);\n      }\n\n      var $childrenContainer = $('<ul></ul>', {\n        'class': 'select2-results__options select2-results__options--nested'\n      });\n\n      $childrenContainer.append($children);\n\n      $option.append(label);\n      $option.append($childrenContainer);\n    } else {\n      this.template(data, option);\n    }\n\n    Utils.StoreData(option, 'data', data);\n\n    return option;\n  };\n\n  Results.prototype.bind = function (container, $container) {\n    var self = this;\n\n    var id = container.id + '-results';\n\n    this.$results.attr('id', id);\n\n    container.on('results:all', function (params) {\n      self.clear();\n      self.append(params.data);\n\n      if (container.isOpen()) {\n        self.setClasses();\n        self.highlightFirstItem();\n      }\n    });\n\n    container.on('results:append', function (params) {\n      self.append(params.data);\n\n      if (container.isOpen()) {\n        self.setClasses();\n      }\n    });\n\n    container.on('query', function (params) {\n      self.hideMessages();\n      self.showLoading(params);\n    });\n\n    container.on('select', function () {\n      if (!container.isOpen()) {\n        return;\n      }\n\n      self.setClasses();\n\n      if (self.options.get('scrollAfterSelect')) {\n        self.highlightFirstItem();\n      }\n    });\n\n    container.on('unselect', function () {\n      if (!container.isOpen()) {\n        return;\n      }\n\n      self.setClasses();\n\n      if (self.options.get('scrollAfterSelect')) {\n        self.highlightFirstItem();\n      }\n    });\n\n    container.on('open', function () {\n      // When the dropdown is open, aria-expended=\"true\"\n      self.$results.attr('aria-expanded', 'true');\n      self.$results.attr('aria-hidden', 'false');\n\n      self.setClasses();\n      self.ensureHighlightVisible();\n    });\n\n    container.on('close', function () {\n      // When the dropdown is closed, aria-expended=\"false\"\n      self.$results.attr('aria-expanded', 'false');\n      self.$results.attr('aria-hidden', 'true');\n      self.$results.removeAttr('aria-activedescendant');\n    });\n\n    container.on('results:toggle', function () {\n      var $highlighted = self.getHighlightedResults();\n\n      if ($highlighted.length === 0) {\n        return;\n      }\n\n      $highlighted.trigger('mouseup');\n    });\n\n    container.on('results:select', function () {\n      var $highlighted = self.getHighlightedResults();\n\n      if ($highlighted.length === 0) {\n        return;\n      }\n\n      var data = Utils.GetData($highlighted[0], 'data');\n\n      if ($highlighted.attr('aria-selected') == 'true') {\n        self.trigger('close', {});\n      } else {\n        self.trigger('select', {\n          data: data\n        });\n      }\n    });\n\n    container.on('results:previous', function () {\n      var $highlighted = self.getHighlightedResults();\n\n      var $options = self.$results.find('[aria-selected]');\n\n      var currentIndex = $options.index($highlighted);\n\n      // If we are already at the top, don't move further\n      // If no options, currentIndex will be -1\n      if (currentIndex <= 0) {\n        return;\n      }\n\n      var nextIndex = currentIndex - 1;\n\n      // If none are highlighted, highlight the first\n      if ($highlighted.length === 0) {\n        nextIndex = 0;\n      }\n\n      var $next = $options.eq(nextIndex);\n\n      $next.trigger('mouseenter');\n\n      var currentOffset = self.$results.offset().top;\n      var nextTop = $next.offset().top;\n      var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);\n\n      if (nextIndex === 0) {\n        self.$results.scrollTop(0);\n      } else if (nextTop - currentOffset < 0) {\n        self.$results.scrollTop(nextOffset);\n      }\n    });\n\n    container.on('results:next', function () {\n      var $highlighted = self.getHighlightedResults();\n\n      var $options = self.$results.find('[aria-selected]');\n\n      var currentIndex = $options.index($highlighted);\n\n      var nextIndex = currentIndex + 1;\n\n      // If we are at the last option, stay there\n      if (nextIndex >= $options.length) {\n        return;\n      }\n\n      var $next = $options.eq(nextIndex);\n\n      $next.trigger('mouseenter');\n\n      var currentOffset = self.$results.offset().top +\n        self.$results.outerHeight(false);\n      var nextBottom = $next.offset().top + $next.outerHeight(false);\n      var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;\n\n      if (nextIndex === 0) {\n        self.$results.scrollTop(0);\n      } else if (nextBottom > currentOffset) {\n        self.$results.scrollTop(nextOffset);\n      }\n    });\n\n    container.on('results:focus', function (params) {\n      params.element.addClass('select2-results__option--highlighted');\n    });\n\n    container.on('results:message', function (params) {\n      self.displayMessage(params);\n    });\n\n    if ($.fn.mousewheel) {\n      this.$results.on('mousewheel', function (e) {\n        var top = self.$results.scrollTop();\n\n        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;\n\n        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;\n        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();\n\n        if (isAtTop) {\n          self.$results.scrollTop(0);\n\n          e.preventDefault();\n          e.stopPropagation();\n        } else if (isAtBottom) {\n          self.$results.scrollTop(\n            self.$results.get(0).scrollHeight - self.$results.height()\n          );\n\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      });\n    }\n\n    this.$results.on('mouseup', '.select2-results__option[aria-selected]',\n      function (evt) {\n      var $this = $(this);\n\n      var data = Utils.GetData(this, 'data');\n\n      if ($this.attr('aria-selected') === 'true') {\n        if (self.options.get('multiple')) {\n          self.trigger('unselect', {\n            originalEvent: evt,\n            data: data\n          });\n        } else {\n          self.trigger('close', {});\n        }\n\n        return;\n      }\n\n      self.trigger('select', {\n        originalEvent: evt,\n        data: data\n      });\n    });\n\n    this.$results.on('mouseenter', '.select2-results__option[aria-selected]',\n      function (evt) {\n      var data = Utils.GetData(this, 'data');\n\n      self.getHighlightedResults()\n          .removeClass('select2-results__option--highlighted');\n\n      self.trigger('results:focus', {\n        data: data,\n        element: $(this)\n      });\n    });\n  };\n\n  Results.prototype.getHighlightedResults = function () {\n    var $highlighted = this.$results\n    .find('.select2-results__option--highlighted');\n\n    return $highlighted;\n  };\n\n  Results.prototype.destroy = function () {\n    this.$results.remove();\n  };\n\n  Results.prototype.ensureHighlightVisible = function () {\n    var $highlighted = this.getHighlightedResults();\n\n    if ($highlighted.length === 0) {\n      return;\n    }\n\n    var $options = this.$results.find('[aria-selected]');\n\n    var currentIndex = $options.index($highlighted);\n\n    var currentOffset = this.$results.offset().top;\n    var nextTop = $highlighted.offset().top;\n    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);\n\n    var offsetDelta = nextTop - currentOffset;\n    nextOffset -= $highlighted.outerHeight(false) * 2;\n\n    if (currentIndex <= 2) {\n      this.$results.scrollTop(0);\n    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {\n      this.$results.scrollTop(nextOffset);\n    }\n  };\n\n  Results.prototype.template = function (result, container) {\n    var template = this.options.get('templateResult');\n    var escapeMarkup = this.options.get('escapeMarkup');\n\n    var content = template(result, container);\n\n    if (content == null) {\n      container.style.display = 'none';\n    } else if (typeof content === 'string') {\n      container.innerHTML = escapeMarkup(content);\n    } else {\n      $(container).append(content);\n    }\n  };\n\n  return Results;\n});\n\nS2.define('select2/keys',[\n\n], function () {\n  var KEYS = {\n    BACKSPACE: 8,\n    TAB: 9,\n    ENTER: 13,\n    SHIFT: 16,\n    CTRL: 17,\n    ALT: 18,\n    ESC: 27,\n    SPACE: 32,\n    PAGE_UP: 33,\n    PAGE_DOWN: 34,\n    END: 35,\n    HOME: 36,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    DELETE: 46\n  };\n\n  return KEYS;\n});\n\nS2.define('select2/selection/base',[\n  'jquery',\n  '../utils',\n  '../keys'\n], function ($, Utils, KEYS) {\n  function BaseSelection ($element, options) {\n    this.$element = $element;\n    this.options = options;\n\n    BaseSelection.__super__.constructor.call(this);\n  }\n\n  Utils.Extend(BaseSelection, Utils.Observable);\n\n  BaseSelection.prototype.render = function () {\n    var $selection = $(\n      '<span class=\"select2-selection\" role=\"combobox\" ' +\n      ' aria-haspopup=\"true\" aria-expanded=\"false\">' +\n      '</span>'\n    );\n\n    this._tabindex = 0;\n\n    if (Utils.GetData(this.$element[0], 'old-tabindex') != null) {\n      this._tabindex = Utils.GetData(this.$element[0], 'old-tabindex');\n    } else if (this.$element.attr('tabindex') != null) {\n      this._tabindex = this.$element.attr('tabindex');\n    }\n\n    $selection.attr('title', this.$element.attr('title'));\n    $selection.attr('tabindex', this._tabindex);\n    $selection.attr('aria-disabled', 'false');\n\n    this.$selection = $selection;\n\n    return $selection;\n  };\n\n  BaseSelection.prototype.bind = function (container, $container) {\n    var self = this;\n\n    var resultsId = container.id + '-results';\n\n    this.container = container;\n\n    this.$selection.on('focus', function (evt) {\n      self.trigger('focus', evt);\n    });\n\n    this.$selection.on('blur', function (evt) {\n      self._handleBlur(evt);\n    });\n\n    this.$selection.on('keydown', function (evt) {\n      self.trigger('keypress', evt);\n\n      if (evt.which === KEYS.SPACE) {\n        evt.preventDefault();\n      }\n    });\n\n    container.on('results:focus', function (params) {\n      self.$selection.attr('aria-activedescendant', params.data._resultId);\n    });\n\n    container.on('selection:update', function (params) {\n      self.update(params.data);\n    });\n\n    container.on('open', function () {\n      // When the dropdown is open, aria-expanded=\"true\"\n      self.$selection.attr('aria-expanded', 'true');\n      self.$selection.attr('aria-owns', resultsId);\n\n      self._attachCloseHandler(container);\n    });\n\n    container.on('close', function () {\n      // When the dropdown is closed, aria-expanded=\"false\"\n      self.$selection.attr('aria-expanded', 'false');\n      self.$selection.removeAttr('aria-activedescendant');\n      self.$selection.removeAttr('aria-owns');\n\n      self.$selection.trigger('focus');\n\n      self._detachCloseHandler(container);\n    });\n\n    container.on('enable', function () {\n      self.$selection.attr('tabindex', self._tabindex);\n      self.$selection.attr('aria-disabled', 'false');\n    });\n\n    container.on('disable', function () {\n      self.$selection.attr('tabindex', '-1');\n      self.$selection.attr('aria-disabled', 'true');\n    });\n  };\n\n  BaseSelection.prototype._handleBlur = function (evt) {\n    var self = this;\n\n    // This needs to be delayed as the active element is the body when the tab\n    // key is pressed, possibly along with others.\n    window.setTimeout(function () {\n      // Don't trigger `blur` if the focus is still in the selection\n      if (\n        (document.activeElement == self.$selection[0]) ||\n        ($.contains(self.$selection[0], document.activeElement))\n      ) {\n        return;\n      }\n\n      self.trigger('blur', evt);\n    }, 1);\n  };\n\n  BaseSelection.prototype._attachCloseHandler = function (container) {\n\n    $(document.body).on('mousedown.select2.' + container.id, function (e) {\n      var $target = $(e.target);\n\n      var $select = $target.closest('.select2');\n\n      var $all = $('.select2.select2-container--open');\n\n      $all.each(function () {\n        if (this == $select[0]) {\n          return;\n        }\n\n        var $element = Utils.GetData(this, 'element');\n\n        $element.select2('close');\n      });\n    });\n  };\n\n  BaseSelection.prototype._detachCloseHandler = function (container) {\n    $(document.body).off('mousedown.select2.' + container.id);\n  };\n\n  BaseSelection.prototype.position = function ($selection, $container) {\n    var $selectionContainer = $container.find('.selection');\n    $selectionContainer.append($selection);\n  };\n\n  BaseSelection.prototype.destroy = function () {\n    this._detachCloseHandler(this.container);\n  };\n\n  BaseSelection.prototype.update = function (data) {\n    throw new Error('The `update` method must be defined in child classes.');\n  };\n\n  /**\n   * Helper method to abstract the \"enabled\" (not \"disabled\") state of this\n   * object.\n   *\n   * @return {true} if the instance is not disabled.\n   * @return {false} if the instance is disabled.\n   */\n  BaseSelection.prototype.isEnabled = function () {\n    return !this.isDisabled();\n  };\n\n  /**\n   * Helper method to abstract the \"disabled\" state of this object.\n   *\n   * @return {true} if the disabled option is true.\n   * @return {false} if the disabled option is false.\n   */\n  BaseSelection.prototype.isDisabled = function () {\n    return this.options.get('disabled');\n  };\n\n  return BaseSelection;\n});\n\nS2.define('select2/selection/single',[\n  'jquery',\n  './base',\n  '../utils',\n  '../keys'\n], function ($, BaseSelection, Utils, KEYS) {\n  function SingleSelection () {\n    SingleSelection.__super__.constructor.apply(this, arguments);\n  }\n\n  Utils.Extend(SingleSelection, BaseSelection);\n\n  SingleSelection.prototype.render = function () {\n    var $selection = SingleSelection.__super__.render.call(this);\n\n    $selection.addClass('select2-selection--single');\n\n    $selection.html(\n      '<span class=\"select2-selection__rendered\"></span>' +\n      '<span class=\"select2-selection__arrow\" role=\"presentation\">' +\n        '<b role=\"presentation\"></b>' +\n      '</span>'\n    );\n\n    return $selection;\n  };\n\n  SingleSelection.prototype.bind = function (container, $container) {\n    var self = this;\n\n    SingleSelection.__super__.bind.apply(this, arguments);\n\n    var id = container.id + '-container';\n\n    this.$selection.find('.select2-selection__rendered')\n      .attr('id', id)\n      .attr('role', 'textbox')\n      .attr('aria-readonly', 'true');\n    this.$selection.attr('aria-labelledby', id);\n\n    this.$selection.on('mousedown', function (evt) {\n      // Only respond to left clicks\n      if (evt.which !== 1) {\n        return;\n      }\n\n      self.trigger('toggle', {\n        originalEvent: evt\n      });\n    });\n\n    this.$selection.on('focus', function (evt) {\n      // User focuses on the container\n    });\n\n    this.$selection.on('blur', function (evt) {\n      // User exits the container\n    });\n\n    container.on('focus', function (evt) {\n      if (!container.isOpen()) {\n        self.$selection.trigger('focus');\n      }\n    });\n  };\n\n  SingleSelection.prototype.clear = function () {\n    var $rendered = this.$selection.find('.select2-selection__rendered');\n    $rendered.empty();\n    $rendered.removeAttr('title'); // clear tooltip on empty\n  };\n\n  SingleSelection.prototype.display = function (data, container) {\n    var template = this.options.get('templateSelection');\n    var escapeMarkup = this.options.get('escapeMarkup');\n\n    return escapeMarkup(template(data, container));\n  };\n\n  SingleSelection.prototype.selectionContainer = function () {\n    return $('<span></span>');\n  };\n\n  SingleSelection.prototype.update = function (data) {\n    if (data.length === 0) {\n      this.clear();\n      return;\n    }\n\n    var selection = data[0];\n\n    var $rendered = this.$selection.find('.select2-selection__rendered');\n    var formatted = this.display(selection, $rendered);\n\n    $rendered.empty().append(formatted);\n\n    var title = selection.title || selection.text;\n\n    if (title) {\n      $rendered.attr('title', title);\n    } else {\n      $rendered.removeAttr('title');\n    }\n  };\n\n  return SingleSelection;\n});\n\nS2.define('select2/selection/multiple',[\n  'jquery',\n  './base',\n  '../utils'\n], function ($, BaseSelection, Utils) {\n  function MultipleSelection ($element, options) {\n    MultipleSelection.__super__.constructor.apply(this, arguments);\n  }\n\n  Utils.Extend(MultipleSelection, BaseSelection);\n\n  MultipleSelection.prototype.render = function () {\n    var $selection = MultipleSelection.__super__.render.call(this);\n\n    $selection.addClass('select2-selection--multiple');\n\n    $selection.html(\n      '<ul class=\"select2-selection__rendered\"></ul>'\n    );\n\n    return $selection;\n  };\n\n  MultipleSelection.prototype.bind = function (container, $container) {\n    var self = this;\n\n    MultipleSelection.__super__.bind.apply(this, arguments);\n\n    this.$selection.on('click', function (evt) {\n      self.trigger('toggle', {\n        originalEvent: evt\n      });\n    });\n\n    this.$selection.on(\n      'click',\n      '.select2-selection__choice__remove',\n      function (evt) {\n        // Ignore the event if it is disabled\n        if (self.isDisabled()) {\n          return;\n        }\n\n        var $remove = $(this);\n        var $selection = $remove.parent();\n\n        var data = Utils.GetData($selection[0], 'data');\n\n        self.trigger('unselect', {\n          originalEvent: evt,\n          data: data\n        });\n      }\n    );\n  };\n\n  MultipleSelection.prototype.clear = function () {\n    var $rendered = this.$selection.find('.select2-selection__rendered');\n    $rendered.empty();\n    $rendered.removeAttr('title');\n  };\n\n  MultipleSelection.prototype.display = function (data, container) {\n    var template = this.options.get('templateSelection');\n    var escapeMarkup = this.options.get('escapeMarkup');\n\n    return escapeMarkup(template(data, container));\n  };\n\n  MultipleSelection.prototype.selectionContainer = function () {\n    var $container = $(\n      '<li class=\"select2-selection__choice\">' +\n        '<span class=\"select2-selection__choice__remove\" role=\"presentation\">' +\n          '&times;' +\n        '</span>' +\n      '</li>'\n    );\n\n    return $container;\n  };\n\n  MultipleSelection.prototype.update = function (data) {\n    this.clear();\n\n    if (data.length === 0) {\n      return;\n    }\n\n    var $selections = [];\n\n    for (var d = 0; d < data.length; d++) {\n      var selection = data[d];\n\n      var $selection = this.selectionContainer();\n      var formatted = this.display(selection, $selection);\n\n      $selection.append(formatted);\n\n      var title = selection.title || selection.text;\n\n      if (title) {\n        $selection.attr('title', title);\n      }\n\n      Utils.StoreData($selection[0], 'data', selection);\n\n      $selections.push($selection);\n    }\n\n    var $rendered = this.$selection.find('.select2-selection__rendered');\n\n    Utils.appendMany($rendered, $selections);\n  };\n\n  return MultipleSelection;\n});\n\nS2.define('select2/selection/placeholder',[\n  '../utils'\n], function (Utils) {\n  function Placeholder (decorated, $element, options) {\n    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));\n\n    decorated.call(this, $element, options);\n  }\n\n  Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {\n    if (typeof placeholder === 'string') {\n      placeholder = {\n        id: '',\n        text: placeholder\n      };\n    }\n\n    return placeholder;\n  };\n\n  Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {\n    var $placeholder = this.selectionContainer();\n\n    $placeholder.html(this.display(placeholder));\n    $placeholder.addClass('select2-selection__placeholder')\n                .removeClass('select2-selection__choice');\n\n    return $placeholder;\n  };\n\n  Placeholder.prototype.update = function (decorated, data) {\n    var singlePlaceholder = (\n      data.length == 1 && data[0].id != this.placeholder.id\n    );\n    var multipleSelections = data.length > 1;\n\n    if (multipleSelections || singlePlaceholder) {\n      return decorated.call(this, data);\n    }\n\n    this.clear();\n\n    var $placeholder = this.createPlaceholder(this.placeholder);\n\n    this.$selection.find('.select2-selection__rendered').append($placeholder);\n  };\n\n  return Placeholder;\n});\n\nS2.define('select2/selection/allowClear',[\n  'jquery',\n  '../keys',\n  '../utils'\n], function ($, KEYS, Utils) {\n  function AllowClear () { }\n\n  AllowClear.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    decorated.call(this, container, $container);\n\n    if (this.placeholder == null) {\n      if (this.options.get('debug') && window.console && console.error) {\n        console.error(\n          'Select2: The `allowClear` option should be used in combination ' +\n          'with the `placeholder` option.'\n        );\n      }\n    }\n\n    this.$selection.on('mousedown', '.select2-selection__clear',\n      function (evt) {\n        self._handleClear(evt);\n    });\n\n    container.on('keypress', function (evt) {\n      self._handleKeyboardClear(evt, container);\n    });\n  };\n\n  AllowClear.prototype._handleClear = function (_, evt) {\n    // Ignore the event if it is disabled\n    if (this.isDisabled()) {\n      return;\n    }\n\n    var $clear = this.$selection.find('.select2-selection__clear');\n\n    // Ignore the event if nothing has been selected\n    if ($clear.length === 0) {\n      return;\n    }\n\n    evt.stopPropagation();\n\n    var data = Utils.GetData($clear[0], 'data');\n\n    var previousVal = this.$element.val();\n    this.$element.val(this.placeholder.id);\n\n    var unselectData = {\n      data: data\n    };\n    this.trigger('clear', unselectData);\n    if (unselectData.prevented) {\n      this.$element.val(previousVal);\n      return;\n    }\n\n    for (var d = 0; d < data.length; d++) {\n      unselectData = {\n        data: data[d]\n      };\n\n      // Trigger the `unselect` event, so people can prevent it from being\n      // cleared.\n      this.trigger('unselect', unselectData);\n\n      // If the event was prevented, don't clear it out.\n      if (unselectData.prevented) {\n        this.$element.val(previousVal);\n        return;\n      }\n    }\n\n    this.$element.trigger('input').trigger('change');\n\n    this.trigger('toggle', {});\n  };\n\n  AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {\n    if (container.isOpen()) {\n      return;\n    }\n\n    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {\n      this._handleClear(evt);\n    }\n  };\n\n  AllowClear.prototype.update = function (decorated, data) {\n    decorated.call(this, data);\n\n    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||\n        data.length === 0) {\n      return;\n    }\n\n    var removeAll = this.options.get('translations').get('removeAllItems');\n\n    var $remove = $(\n      '<span class=\"select2-selection__clear\" title=\"' + removeAll() +'\">' +\n        '&times;' +\n      '</span>'\n    );\n    Utils.StoreData($remove[0], 'data', data);\n\n    this.$selection.find('.select2-selection__rendered').prepend($remove);\n  };\n\n  return AllowClear;\n});\n\nS2.define('select2/selection/search',[\n  'jquery',\n  '../utils',\n  '../keys'\n], function ($, Utils, KEYS) {\n  function Search (decorated, $element, options) {\n    decorated.call(this, $element, options);\n  }\n\n  Search.prototype.render = function (decorated) {\n    var $search = $(\n      '<li class=\"select2-search select2-search--inline\">' +\n        '<input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\"' +\n        ' autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\"' +\n        ' spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" />' +\n      '</li>'\n    );\n\n    this.$searchContainer = $search;\n    this.$search = $search.find('input');\n\n    var $rendered = decorated.call(this);\n\n    this._transferTabIndex();\n\n    return $rendered;\n  };\n\n  Search.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    var resultsId = container.id + '-results';\n\n    decorated.call(this, container, $container);\n\n    container.on('open', function () {\n      self.$search.attr('aria-controls', resultsId);\n      self.$search.trigger('focus');\n    });\n\n    container.on('close', function () {\n      self.$search.val('');\n      self.$search.removeAttr('aria-controls');\n      self.$search.removeAttr('aria-activedescendant');\n      self.$search.trigger('focus');\n    });\n\n    container.on('enable', function () {\n      self.$search.prop('disabled', false);\n\n      self._transferTabIndex();\n    });\n\n    container.on('disable', function () {\n      self.$search.prop('disabled', true);\n    });\n\n    container.on('focus', function (evt) {\n      self.$search.trigger('focus');\n    });\n\n    container.on('results:focus', function (params) {\n      if (params.data._resultId) {\n        self.$search.attr('aria-activedescendant', params.data._resultId);\n      } else {\n        self.$search.removeAttr('aria-activedescendant');\n      }\n    });\n\n    this.$selection.on('focusin', '.select2-search--inline', function (evt) {\n      self.trigger('focus', evt);\n    });\n\n    this.$selection.on('focusout', '.select2-search--inline', function (evt) {\n      self._handleBlur(evt);\n    });\n\n    this.$selection.on('keydown', '.select2-search--inline', function (evt) {\n      evt.stopPropagation();\n\n      self.trigger('keypress', evt);\n\n      self._keyUpPrevented = evt.isDefaultPrevented();\n\n      var key = evt.which;\n\n      if (key === KEYS.BACKSPACE && self.$search.val() === '') {\n        var $previousChoice = self.$searchContainer\n          .prev('.select2-selection__choice');\n\n        if ($previousChoice.length > 0) {\n          var item = Utils.GetData($previousChoice[0], 'data');\n\n          self.searchRemoveChoice(item);\n\n          evt.preventDefault();\n        }\n      }\n    });\n\n    this.$selection.on('click', '.select2-search--inline', function (evt) {\n      if (self.$search.val()) {\n        evt.stopPropagation();\n      }\n    });\n\n    // Try to detect the IE version should the `documentMode` property that\n    // is stored on the document. This is only implemented in IE and is\n    // slightly cleaner than doing a user agent check.\n    // This property is not available in Edge, but Edge also doesn't have\n    // this bug.\n    var msie = document.documentMode;\n    var disableInputEvents = msie && msie <= 11;\n\n    // Workaround for browsers which do not support the `input` event\n    // This will prevent double-triggering of events for browsers which support\n    // both the `keyup` and `input` events.\n    this.$selection.on(\n      'input.searchcheck',\n      '.select2-search--inline',\n      function (evt) {\n        // IE will trigger the `input` event when a placeholder is used on a\n        // search box. To get around this issue, we are forced to ignore all\n        // `input` events in IE and keep using `keyup`.\n        if (disableInputEvents) {\n          self.$selection.off('input.search input.searchcheck');\n          return;\n        }\n\n        // Unbind the duplicated `keyup` event\n        self.$selection.off('keyup.search');\n      }\n    );\n\n    this.$selection.on(\n      'keyup.search input.search',\n      '.select2-search--inline',\n      function (evt) {\n        // IE will trigger the `input` event when a placeholder is used on a\n        // search box. To get around this issue, we are forced to ignore all\n        // `input` events in IE and keep using `keyup`.\n        if (disableInputEvents && evt.type === 'input') {\n          self.$selection.off('input.search input.searchcheck');\n          return;\n        }\n\n        var key = evt.which;\n\n        // We can freely ignore events from modifier keys\n        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {\n          return;\n        }\n\n        // Tabbing will be handled during the `keydown` phase\n        if (key == KEYS.TAB) {\n          return;\n        }\n\n        self.handleSearch(evt);\n      }\n    );\n  };\n\n  /**\n   * This method will transfer the tabindex attribute from the rendered\n   * selection to the search box. This allows for the search box to be used as\n   * the primary focus instead of the selection container.\n   *\n   * @private\n   */\n  Search.prototype._transferTabIndex = function (decorated) {\n    this.$search.attr('tabindex', this.$selection.attr('tabindex'));\n    this.$selection.attr('tabindex', '-1');\n  };\n\n  Search.prototype.createPlaceholder = function (decorated, placeholder) {\n    this.$search.attr('placeholder', placeholder.text);\n  };\n\n  Search.prototype.update = function (decorated, data) {\n    var searchHadFocus = this.$search[0] == document.activeElement;\n\n    this.$search.attr('placeholder', '');\n\n    decorated.call(this, data);\n\n    this.$selection.find('.select2-selection__rendered')\n                   .append(this.$searchContainer);\n\n    this.resizeSearch();\n    if (searchHadFocus) {\n      this.$search.trigger('focus');\n    }\n  };\n\n  Search.prototype.handleSearch = function () {\n    this.resizeSearch();\n\n    if (!this._keyUpPrevented) {\n      var input = this.$search.val();\n\n      this.trigger('query', {\n        term: input\n      });\n    }\n\n    this._keyUpPrevented = false;\n  };\n\n  Search.prototype.searchRemoveChoice = function (decorated, item) {\n    this.trigger('unselect', {\n      data: item\n    });\n\n    this.$search.val(item.text);\n    this.handleSearch();\n  };\n\n  Search.prototype.resizeSearch = function () {\n    this.$search.css('width', '25px');\n\n    var width = '';\n\n    if (this.$search.attr('placeholder') !== '') {\n      width = this.$selection.find('.select2-selection__rendered').width();\n    } else {\n      var minimumWidth = this.$search.val().length + 1;\n\n      width = (minimumWidth * 0.75) + 'em';\n    }\n\n    this.$search.css('width', width);\n  };\n\n  return Search;\n});\n\nS2.define('select2/selection/eventRelay',[\n  'jquery'\n], function ($) {\n  function EventRelay () { }\n\n  EventRelay.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n    var relayEvents = [\n      'open', 'opening',\n      'close', 'closing',\n      'select', 'selecting',\n      'unselect', 'unselecting',\n      'clear', 'clearing'\n    ];\n\n    var preventableEvents = [\n      'opening', 'closing', 'selecting', 'unselecting', 'clearing'\n    ];\n\n    decorated.call(this, container, $container);\n\n    container.on('*', function (name, params) {\n      // Ignore events that should not be relayed\n      if ($.inArray(name, relayEvents) === -1) {\n        return;\n      }\n\n      // The parameters should always be an object\n      params = params || {};\n\n      // Generate the jQuery event for the Select2 event\n      var evt = $.Event('select2:' + name, {\n        params: params\n      });\n\n      self.$element.trigger(evt);\n\n      // Only handle preventable events if it was one\n      if ($.inArray(name, preventableEvents) === -1) {\n        return;\n      }\n\n      params.prevented = evt.isDefaultPrevented();\n    });\n  };\n\n  return EventRelay;\n});\n\nS2.define('select2/translation',[\n  'jquery',\n  'require'\n], function ($, require) {\n  function Translation (dict) {\n    this.dict = dict || {};\n  }\n\n  Translation.prototype.all = function () {\n    return this.dict;\n  };\n\n  Translation.prototype.get = function (key) {\n    return this.dict[key];\n  };\n\n  Translation.prototype.extend = function (translation) {\n    this.dict = $.extend({}, translation.all(), this.dict);\n  };\n\n  // Static functions\n\n  Translation._cache = {};\n\n  Translation.loadPath = function (path) {\n    if (!(path in Translation._cache)) {\n      var translations = require(path);\n\n      Translation._cache[path] = translations;\n    }\n\n    return new Translation(Translation._cache[path]);\n  };\n\n  return Translation;\n});\n\nS2.define('select2/diacritics',[\n\n], function () {\n  var diacritics = {\n    '\\u24B6': 'A',\n    '\\uFF21': 'A',\n    '\\u00C0': 'A',\n    '\\u00C1': 'A',\n    '\\u00C2': 'A',\n    '\\u1EA6': 'A',\n    '\\u1EA4': 'A',\n    '\\u1EAA': 'A',\n    '\\u1EA8': 'A',\n    '\\u00C3': 'A',\n    '\\u0100': 'A',\n    '\\u0102': 'A',\n    '\\u1EB0': 'A',\n    '\\u1EAE': 'A',\n    '\\u1EB4': 'A',\n    '\\u1EB2': 'A',\n    '\\u0226': 'A',\n    '\\u01E0': 'A',\n    '\\u00C4': 'A',\n    '\\u01DE': 'A',\n    '\\u1EA2': 'A',\n    '\\u00C5': 'A',\n    '\\u01FA': 'A',\n    '\\u01CD': 'A',\n    '\\u0200': 'A',\n    '\\u0202': 'A',\n    '\\u1EA0': 'A',\n    '\\u1EAC': 'A',\n    '\\u1EB6': 'A',\n    '\\u1E00': 'A',\n    '\\u0104': 'A',\n    '\\u023A': 'A',\n    '\\u2C6F': 'A',\n    '\\uA732': 'AA',\n    '\\u00C6': 'AE',\n    '\\u01FC': 'AE',\n    '\\u01E2': 'AE',\n    '\\uA734': 'AO',\n    '\\uA736': 'AU',\n    '\\uA738': 'AV',\n    '\\uA73A': 'AV',\n    '\\uA73C': 'AY',\n    '\\u24B7': 'B',\n    '\\uFF22': 'B',\n    '\\u1E02': 'B',\n    '\\u1E04': 'B',\n    '\\u1E06': 'B',\n    '\\u0243': 'B',\n    '\\u0182': 'B',\n    '\\u0181': 'B',\n    '\\u24B8': 'C',\n    '\\uFF23': 'C',\n    '\\u0106': 'C',\n    '\\u0108': 'C',\n    '\\u010A': 'C',\n    '\\u010C': 'C',\n    '\\u00C7': 'C',\n    '\\u1E08': 'C',\n    '\\u0187': 'C',\n    '\\u023B': 'C',\n    '\\uA73E': 'C',\n    '\\u24B9': 'D',\n    '\\uFF24': 'D',\n    '\\u1E0A': 'D',\n    '\\u010E': 'D',\n    '\\u1E0C': 'D',\n    '\\u1E10': 'D',\n    '\\u1E12': 'D',\n    '\\u1E0E': 'D',\n    '\\u0110': 'D',\n    '\\u018B': 'D',\n    '\\u018A': 'D',\n    '\\u0189': 'D',\n    '\\uA779': 'D',\n    '\\u01F1': 'DZ',\n    '\\u01C4': 'DZ',\n    '\\u01F2': 'Dz',\n    '\\u01C5': 'Dz',\n    '\\u24BA': 'E',\n    '\\uFF25': 'E',\n    '\\u00C8': 'E',\n    '\\u00C9': 'E',\n    '\\u00CA': 'E',\n    '\\u1EC0': 'E',\n    '\\u1EBE': 'E',\n    '\\u1EC4': 'E',\n    '\\u1EC2': 'E',\n    '\\u1EBC': 'E',\n    '\\u0112': 'E',\n    '\\u1E14': 'E',\n    '\\u1E16': 'E',\n    '\\u0114': 'E',\n    '\\u0116': 'E',\n    '\\u00CB': 'E',\n    '\\u1EBA': 'E',\n    '\\u011A': 'E',\n    '\\u0204': 'E',\n    '\\u0206': 'E',\n    '\\u1EB8': 'E',\n    '\\u1EC6': 'E',\n    '\\u0228': 'E',\n    '\\u1E1C': 'E',\n    '\\u0118': 'E',\n    '\\u1E18': 'E',\n    '\\u1E1A': 'E',\n    '\\u0190': 'E',\n    '\\u018E': 'E',\n    '\\u24BB': 'F',\n    '\\uFF26': 'F',\n    '\\u1E1E': 'F',\n    '\\u0191': 'F',\n    '\\uA77B': 'F',\n    '\\u24BC': 'G',\n    '\\uFF27': 'G',\n    '\\u01F4': 'G',\n    '\\u011C': 'G',\n    '\\u1E20': 'G',\n    '\\u011E': 'G',\n    '\\u0120': 'G',\n    '\\u01E6': 'G',\n    '\\u0122': 'G',\n    '\\u01E4': 'G',\n    '\\u0193': 'G',\n    '\\uA7A0': 'G',\n    '\\uA77D': 'G',\n    '\\uA77E': 'G',\n    '\\u24BD': 'H',\n    '\\uFF28': 'H',\n    '\\u0124': 'H',\n    '\\u1E22': 'H',\n    '\\u1E26': 'H',\n    '\\u021E': 'H',\n    '\\u1E24': 'H',\n    '\\u1E28': 'H',\n    '\\u1E2A': 'H',\n    '\\u0126': 'H',\n    '\\u2C67': 'H',\n    '\\u2C75': 'H',\n    '\\uA78D': 'H',\n    '\\u24BE': 'I',\n    '\\uFF29': 'I',\n    '\\u00CC': 'I',\n    '\\u00CD': 'I',\n    '\\u00CE': 'I',\n    '\\u0128': 'I',\n    '\\u012A': 'I',\n    '\\u012C': 'I',\n    '\\u0130': 'I',\n    '\\u00CF': 'I',\n    '\\u1E2E': 'I',\n    '\\u1EC8': 'I',\n    '\\u01CF': 'I',\n    '\\u0208': 'I',\n    '\\u020A': 'I',\n    '\\u1ECA': 'I',\n    '\\u012E': 'I',\n    '\\u1E2C': 'I',\n    '\\u0197': 'I',\n    '\\u24BF': 'J',\n    '\\uFF2A': 'J',\n    '\\u0134': 'J',\n    '\\u0248': 'J',\n    '\\u24C0': 'K',\n    '\\uFF2B': 'K',\n    '\\u1E30': 'K',\n    '\\u01E8': 'K',\n    '\\u1E32': 'K',\n    '\\u0136': 'K',\n    '\\u1E34': 'K',\n    '\\u0198': 'K',\n    '\\u2C69': 'K',\n    '\\uA740': 'K',\n    '\\uA742': 'K',\n    '\\uA744': 'K',\n    '\\uA7A2': 'K',\n    '\\u24C1': 'L',\n    '\\uFF2C': 'L',\n    '\\u013F': 'L',\n    '\\u0139': 'L',\n    '\\u013D': 'L',\n    '\\u1E36': 'L',\n    '\\u1E38': 'L',\n    '\\u013B': 'L',\n    '\\u1E3C': 'L',\n    '\\u1E3A': 'L',\n    '\\u0141': 'L',\n    '\\u023D': 'L',\n    '\\u2C62': 'L',\n    '\\u2C60': 'L',\n    '\\uA748': 'L',\n    '\\uA746': 'L',\n    '\\uA780': 'L',\n    '\\u01C7': 'LJ',\n    '\\u01C8': 'Lj',\n    '\\u24C2': 'M',\n    '\\uFF2D': 'M',\n    '\\u1E3E': 'M',\n    '\\u1E40': 'M',\n    '\\u1E42': 'M',\n    '\\u2C6E': 'M',\n    '\\u019C': 'M',\n    '\\u24C3': 'N',\n    '\\uFF2E': 'N',\n    '\\u01F8': 'N',\n    '\\u0143': 'N',\n    '\\u00D1': 'N',\n    '\\u1E44': 'N',\n    '\\u0147': 'N',\n    '\\u1E46': 'N',\n    '\\u0145': 'N',\n    '\\u1E4A': 'N',\n    '\\u1E48': 'N',\n    '\\u0220': 'N',\n    '\\u019D': 'N',\n    '\\uA790': 'N',\n    '\\uA7A4': 'N',\n    '\\u01CA': 'NJ',\n    '\\u01CB': 'Nj',\n    '\\u24C4': 'O',\n    '\\uFF2F': 'O',\n    '\\u00D2': 'O',\n    '\\u00D3': 'O',\n    '\\u00D4': 'O',\n    '\\u1ED2': 'O',\n    '\\u1ED0': 'O',\n    '\\u1ED6': 'O',\n    '\\u1ED4': 'O',\n    '\\u00D5': 'O',\n    '\\u1E4C': 'O',\n    '\\u022C': 'O',\n    '\\u1E4E': 'O',\n    '\\u014C': 'O',\n    '\\u1E50': 'O',\n    '\\u1E52': 'O',\n    '\\u014E': 'O',\n    '\\u022E': 'O',\n    '\\u0230': 'O',\n    '\\u00D6': 'O',\n    '\\u022A': 'O',\n    '\\u1ECE': 'O',\n    '\\u0150': 'O',\n    '\\u01D1': 'O',\n    '\\u020C': 'O',\n    '\\u020E': 'O',\n    '\\u01A0': 'O',\n    '\\u1EDC': 'O',\n    '\\u1EDA': 'O',\n    '\\u1EE0': 'O',\n    '\\u1EDE': 'O',\n    '\\u1EE2': 'O',\n    '\\u1ECC': 'O',\n    '\\u1ED8': 'O',\n    '\\u01EA': 'O',\n    '\\u01EC': 'O',\n    '\\u00D8': 'O',\n    '\\u01FE': 'O',\n    '\\u0186': 'O',\n    '\\u019F': 'O',\n    '\\uA74A': 'O',\n    '\\uA74C': 'O',\n    '\\u0152': 'OE',\n    '\\u01A2': 'OI',\n    '\\uA74E': 'OO',\n    '\\u0222': 'OU',\n    '\\u24C5': 'P',\n    '\\uFF30': 'P',\n    '\\u1E54': 'P',\n    '\\u1E56': 'P',\n    '\\u01A4': 'P',\n    '\\u2C63': 'P',\n    '\\uA750': 'P',\n    '\\uA752': 'P',\n    '\\uA754': 'P',\n    '\\u24C6': 'Q',\n    '\\uFF31': 'Q',\n    '\\uA756': 'Q',\n    '\\uA758': 'Q',\n    '\\u024A': 'Q',\n    '\\u24C7': 'R',\n    '\\uFF32': 'R',\n    '\\u0154': 'R',\n    '\\u1E58': 'R',\n    '\\u0158': 'R',\n    '\\u0210': 'R',\n    '\\u0212': 'R',\n    '\\u1E5A': 'R',\n    '\\u1E5C': 'R',\n    '\\u0156': 'R',\n    '\\u1E5E': 'R',\n    '\\u024C': 'R',\n    '\\u2C64': 'R',\n    '\\uA75A': 'R',\n    '\\uA7A6': 'R',\n    '\\uA782': 'R',\n    '\\u24C8': 'S',\n    '\\uFF33': 'S',\n    '\\u1E9E': 'S',\n    '\\u015A': 'S',\n    '\\u1E64': 'S',\n    '\\u015C': 'S',\n    '\\u1E60': 'S',\n    '\\u0160': 'S',\n    '\\u1E66': 'S',\n    '\\u1E62': 'S',\n    '\\u1E68': 'S',\n    '\\u0218': 'S',\n    '\\u015E': 'S',\n    '\\u2C7E': 'S',\n    '\\uA7A8': 'S',\n    '\\uA784': 'S',\n    '\\u24C9': 'T',\n    '\\uFF34': 'T',\n    '\\u1E6A': 'T',\n    '\\u0164': 'T',\n    '\\u1E6C': 'T',\n    '\\u021A': 'T',\n    '\\u0162': 'T',\n    '\\u1E70': 'T',\n    '\\u1E6E': 'T',\n    '\\u0166': 'T',\n    '\\u01AC': 'T',\n    '\\u01AE': 'T',\n    '\\u023E': 'T',\n    '\\uA786': 'T',\n    '\\uA728': 'TZ',\n    '\\u24CA': 'U',\n    '\\uFF35': 'U',\n    '\\u00D9': 'U',\n    '\\u00DA': 'U',\n    '\\u00DB': 'U',\n    '\\u0168': 'U',\n    '\\u1E78': 'U',\n    '\\u016A': 'U',\n    '\\u1E7A': 'U',\n    '\\u016C': 'U',\n    '\\u00DC': 'U',\n    '\\u01DB': 'U',\n    '\\u01D7': 'U',\n    '\\u01D5': 'U',\n    '\\u01D9': 'U',\n    '\\u1EE6': 'U',\n    '\\u016E': 'U',\n    '\\u0170': 'U',\n    '\\u01D3': 'U',\n    '\\u0214': 'U',\n    '\\u0216': 'U',\n    '\\u01AF': 'U',\n    '\\u1EEA': 'U',\n    '\\u1EE8': 'U',\n    '\\u1EEE': 'U',\n    '\\u1EEC': 'U',\n    '\\u1EF0': 'U',\n    '\\u1EE4': 'U',\n    '\\u1E72': 'U',\n    '\\u0172': 'U',\n    '\\u1E76': 'U',\n    '\\u1E74': 'U',\n    '\\u0244': 'U',\n    '\\u24CB': 'V',\n    '\\uFF36': 'V',\n    '\\u1E7C': 'V',\n    '\\u1E7E': 'V',\n    '\\u01B2': 'V',\n    '\\uA75E': 'V',\n    '\\u0245': 'V',\n    '\\uA760': 'VY',\n    '\\u24CC': 'W',\n    '\\uFF37': 'W',\n    '\\u1E80': 'W',\n    '\\u1E82': 'W',\n    '\\u0174': 'W',\n    '\\u1E86': 'W',\n    '\\u1E84': 'W',\n    '\\u1E88': 'W',\n    '\\u2C72': 'W',\n    '\\u24CD': 'X',\n    '\\uFF38': 'X',\n    '\\u1E8A': 'X',\n    '\\u1E8C': 'X',\n    '\\u24CE': 'Y',\n    '\\uFF39': 'Y',\n    '\\u1EF2': 'Y',\n    '\\u00DD': 'Y',\n    '\\u0176': 'Y',\n    '\\u1EF8': 'Y',\n    '\\u0232': 'Y',\n    '\\u1E8E': 'Y',\n    '\\u0178': 'Y',\n    '\\u1EF6': 'Y',\n    '\\u1EF4': 'Y',\n    '\\u01B3': 'Y',\n    '\\u024E': 'Y',\n    '\\u1EFE': 'Y',\n    '\\u24CF': 'Z',\n    '\\uFF3A': 'Z',\n    '\\u0179': 'Z',\n    '\\u1E90': 'Z',\n    '\\u017B': 'Z',\n    '\\u017D': 'Z',\n    '\\u1E92': 'Z',\n    '\\u1E94': 'Z',\n    '\\u01B5': 'Z',\n    '\\u0224': 'Z',\n    '\\u2C7F': 'Z',\n    '\\u2C6B': 'Z',\n    '\\uA762': 'Z',\n    '\\u24D0': 'a',\n    '\\uFF41': 'a',\n    '\\u1E9A': 'a',\n    '\\u00E0': 'a',\n    '\\u00E1': 'a',\n    '\\u00E2': 'a',\n    '\\u1EA7': 'a',\n    '\\u1EA5': 'a',\n    '\\u1EAB': 'a',\n    '\\u1EA9': 'a',\n    '\\u00E3': 'a',\n    '\\u0101': 'a',\n    '\\u0103': 'a',\n    '\\u1EB1': 'a',\n    '\\u1EAF': 'a',\n    '\\u1EB5': 'a',\n    '\\u1EB3': 'a',\n    '\\u0227': 'a',\n    '\\u01E1': 'a',\n    '\\u00E4': 'a',\n    '\\u01DF': 'a',\n    '\\u1EA3': 'a',\n    '\\u00E5': 'a',\n    '\\u01FB': 'a',\n    '\\u01CE': 'a',\n    '\\u0201': 'a',\n    '\\u0203': 'a',\n    '\\u1EA1': 'a',\n    '\\u1EAD': 'a',\n    '\\u1EB7': 'a',\n    '\\u1E01': 'a',\n    '\\u0105': 'a',\n    '\\u2C65': 'a',\n    '\\u0250': 'a',\n    '\\uA733': 'aa',\n    '\\u00E6': 'ae',\n    '\\u01FD': 'ae',\n    '\\u01E3': 'ae',\n    '\\uA735': 'ao',\n    '\\uA737': 'au',\n    '\\uA739': 'av',\n    '\\uA73B': 'av',\n    '\\uA73D': 'ay',\n    '\\u24D1': 'b',\n    '\\uFF42': 'b',\n    '\\u1E03': 'b',\n    '\\u1E05': 'b',\n    '\\u1E07': 'b',\n    '\\u0180': 'b',\n    '\\u0183': 'b',\n    '\\u0253': 'b',\n    '\\u24D2': 'c',\n    '\\uFF43': 'c',\n    '\\u0107': 'c',\n    '\\u0109': 'c',\n    '\\u010B': 'c',\n    '\\u010D': 'c',\n    '\\u00E7': 'c',\n    '\\u1E09': 'c',\n    '\\u0188': 'c',\n    '\\u023C': 'c',\n    '\\uA73F': 'c',\n    '\\u2184': 'c',\n    '\\u24D3': 'd',\n    '\\uFF44': 'd',\n    '\\u1E0B': 'd',\n    '\\u010F': 'd',\n    '\\u1E0D': 'd',\n    '\\u1E11': 'd',\n    '\\u1E13': 'd',\n    '\\u1E0F': 'd',\n    '\\u0111': 'd',\n    '\\u018C': 'd',\n    '\\u0256': 'd',\n    '\\u0257': 'd',\n    '\\uA77A': 'd',\n    '\\u01F3': 'dz',\n    '\\u01C6': 'dz',\n    '\\u24D4': 'e',\n    '\\uFF45': 'e',\n    '\\u00E8': 'e',\n    '\\u00E9': 'e',\n    '\\u00EA': 'e',\n    '\\u1EC1': 'e',\n    '\\u1EBF': 'e',\n    '\\u1EC5': 'e',\n    '\\u1EC3': 'e',\n    '\\u1EBD': 'e',\n    '\\u0113': 'e',\n    '\\u1E15': 'e',\n    '\\u1E17': 'e',\n    '\\u0115': 'e',\n    '\\u0117': 'e',\n    '\\u00EB': 'e',\n    '\\u1EBB': 'e',\n    '\\u011B': 'e',\n    '\\u0205': 'e',\n    '\\u0207': 'e',\n    '\\u1EB9': 'e',\n    '\\u1EC7': 'e',\n    '\\u0229': 'e',\n    '\\u1E1D': 'e',\n    '\\u0119': 'e',\n    '\\u1E19': 'e',\n    '\\u1E1B': 'e',\n    '\\u0247': 'e',\n    '\\u025B': 'e',\n    '\\u01DD': 'e',\n    '\\u24D5': 'f',\n    '\\uFF46': 'f',\n    '\\u1E1F': 'f',\n    '\\u0192': 'f',\n    '\\uA77C': 'f',\n    '\\u24D6': 'g',\n    '\\uFF47': 'g',\n    '\\u01F5': 'g',\n    '\\u011D': 'g',\n    '\\u1E21': 'g',\n    '\\u011F': 'g',\n    '\\u0121': 'g',\n    '\\u01E7': 'g',\n    '\\u0123': 'g',\n    '\\u01E5': 'g',\n    '\\u0260': 'g',\n    '\\uA7A1': 'g',\n    '\\u1D79': 'g',\n    '\\uA77F': 'g',\n    '\\u24D7': 'h',\n    '\\uFF48': 'h',\n    '\\u0125': 'h',\n    '\\u1E23': 'h',\n    '\\u1E27': 'h',\n    '\\u021F': 'h',\n    '\\u1E25': 'h',\n    '\\u1E29': 'h',\n    '\\u1E2B': 'h',\n    '\\u1E96': 'h',\n    '\\u0127': 'h',\n    '\\u2C68': 'h',\n    '\\u2C76': 'h',\n    '\\u0265': 'h',\n    '\\u0195': 'hv',\n    '\\u24D8': 'i',\n    '\\uFF49': 'i',\n    '\\u00EC': 'i',\n    '\\u00ED': 'i',\n    '\\u00EE': 'i',\n    '\\u0129': 'i',\n    '\\u012B': 'i',\n    '\\u012D': 'i',\n    '\\u00EF': 'i',\n    '\\u1E2F': 'i',\n    '\\u1EC9': 'i',\n    '\\u01D0': 'i',\n    '\\u0209': 'i',\n    '\\u020B': 'i',\n    '\\u1ECB': 'i',\n    '\\u012F': 'i',\n    '\\u1E2D': 'i',\n    '\\u0268': 'i',\n    '\\u0131': 'i',\n    '\\u24D9': 'j',\n    '\\uFF4A': 'j',\n    '\\u0135': 'j',\n    '\\u01F0': 'j',\n    '\\u0249': 'j',\n    '\\u24DA': 'k',\n    '\\uFF4B': 'k',\n    '\\u1E31': 'k',\n    '\\u01E9': 'k',\n    '\\u1E33': 'k',\n    '\\u0137': 'k',\n    '\\u1E35': 'k',\n    '\\u0199': 'k',\n    '\\u2C6A': 'k',\n    '\\uA741': 'k',\n    '\\uA743': 'k',\n    '\\uA745': 'k',\n    '\\uA7A3': 'k',\n    '\\u24DB': 'l',\n    '\\uFF4C': 'l',\n    '\\u0140': 'l',\n    '\\u013A': 'l',\n    '\\u013E': 'l',\n    '\\u1E37': 'l',\n    '\\u1E39': 'l',\n    '\\u013C': 'l',\n    '\\u1E3D': 'l',\n    '\\u1E3B': 'l',\n    '\\u017F': 'l',\n    '\\u0142': 'l',\n    '\\u019A': 'l',\n    '\\u026B': 'l',\n    '\\u2C61': 'l',\n    '\\uA749': 'l',\n    '\\uA781': 'l',\n    '\\uA747': 'l',\n    '\\u01C9': 'lj',\n    '\\u24DC': 'm',\n    '\\uFF4D': 'm',\n    '\\u1E3F': 'm',\n    '\\u1E41': 'm',\n    '\\u1E43': 'm',\n    '\\u0271': 'm',\n    '\\u026F': 'm',\n    '\\u24DD': 'n',\n    '\\uFF4E': 'n',\n    '\\u01F9': 'n',\n    '\\u0144': 'n',\n    '\\u00F1': 'n',\n    '\\u1E45': 'n',\n    '\\u0148': 'n',\n    '\\u1E47': 'n',\n    '\\u0146': 'n',\n    '\\u1E4B': 'n',\n    '\\u1E49': 'n',\n    '\\u019E': 'n',\n    '\\u0272': 'n',\n    '\\u0149': 'n',\n    '\\uA791': 'n',\n    '\\uA7A5': 'n',\n    '\\u01CC': 'nj',\n    '\\u24DE': 'o',\n    '\\uFF4F': 'o',\n    '\\u00F2': 'o',\n    '\\u00F3': 'o',\n    '\\u00F4': 'o',\n    '\\u1ED3': 'o',\n    '\\u1ED1': 'o',\n    '\\u1ED7': 'o',\n    '\\u1ED5': 'o',\n    '\\u00F5': 'o',\n    '\\u1E4D': 'o',\n    '\\u022D': 'o',\n    '\\u1E4F': 'o',\n    '\\u014D': 'o',\n    '\\u1E51': 'o',\n    '\\u1E53': 'o',\n    '\\u014F': 'o',\n    '\\u022F': 'o',\n    '\\u0231': 'o',\n    '\\u00F6': 'o',\n    '\\u022B': 'o',\n    '\\u1ECF': 'o',\n    '\\u0151': 'o',\n    '\\u01D2': 'o',\n    '\\u020D': 'o',\n    '\\u020F': 'o',\n    '\\u01A1': 'o',\n    '\\u1EDD': 'o',\n    '\\u1EDB': 'o',\n    '\\u1EE1': 'o',\n    '\\u1EDF': 'o',\n    '\\u1EE3': 'o',\n    '\\u1ECD': 'o',\n    '\\u1ED9': 'o',\n    '\\u01EB': 'o',\n    '\\u01ED': 'o',\n    '\\u00F8': 'o',\n    '\\u01FF': 'o',\n    '\\u0254': 'o',\n    '\\uA74B': 'o',\n    '\\uA74D': 'o',\n    '\\u0275': 'o',\n    '\\u0153': 'oe',\n    '\\u01A3': 'oi',\n    '\\u0223': 'ou',\n    '\\uA74F': 'oo',\n    '\\u24DF': 'p',\n    '\\uFF50': 'p',\n    '\\u1E55': 'p',\n    '\\u1E57': 'p',\n    '\\u01A5': 'p',\n    '\\u1D7D': 'p',\n    '\\uA751': 'p',\n    '\\uA753': 'p',\n    '\\uA755': 'p',\n    '\\u24E0': 'q',\n    '\\uFF51': 'q',\n    '\\u024B': 'q',\n    '\\uA757': 'q',\n    '\\uA759': 'q',\n    '\\u24E1': 'r',\n    '\\uFF52': 'r',\n    '\\u0155': 'r',\n    '\\u1E59': 'r',\n    '\\u0159': 'r',\n    '\\u0211': 'r',\n    '\\u0213': 'r',\n    '\\u1E5B': 'r',\n    '\\u1E5D': 'r',\n    '\\u0157': 'r',\n    '\\u1E5F': 'r',\n    '\\u024D': 'r',\n    '\\u027D': 'r',\n    '\\uA75B': 'r',\n    '\\uA7A7': 'r',\n    '\\uA783': 'r',\n    '\\u24E2': 's',\n    '\\uFF53': 's',\n    '\\u00DF': 's',\n    '\\u015B': 's',\n    '\\u1E65': 's',\n    '\\u015D': 's',\n    '\\u1E61': 's',\n    '\\u0161': 's',\n    '\\u1E67': 's',\n    '\\u1E63': 's',\n    '\\u1E69': 's',\n    '\\u0219': 's',\n    '\\u015F': 's',\n    '\\u023F': 's',\n    '\\uA7A9': 's',\n    '\\uA785': 's',\n    '\\u1E9B': 's',\n    '\\u24E3': 't',\n    '\\uFF54': 't',\n    '\\u1E6B': 't',\n    '\\u1E97': 't',\n    '\\u0165': 't',\n    '\\u1E6D': 't',\n    '\\u021B': 't',\n    '\\u0163': 't',\n    '\\u1E71': 't',\n    '\\u1E6F': 't',\n    '\\u0167': 't',\n    '\\u01AD': 't',\n    '\\u0288': 't',\n    '\\u2C66': 't',\n    '\\uA787': 't',\n    '\\uA729': 'tz',\n    '\\u24E4': 'u',\n    '\\uFF55': 'u',\n    '\\u00F9': 'u',\n    '\\u00FA': 'u',\n    '\\u00FB': 'u',\n    '\\u0169': 'u',\n    '\\u1E79': 'u',\n    '\\u016B': 'u',\n    '\\u1E7B': 'u',\n    '\\u016D': 'u',\n    '\\u00FC': 'u',\n    '\\u01DC': 'u',\n    '\\u01D8': 'u',\n    '\\u01D6': 'u',\n    '\\u01DA': 'u',\n    '\\u1EE7': 'u',\n    '\\u016F': 'u',\n    '\\u0171': 'u',\n    '\\u01D4': 'u',\n    '\\u0215': 'u',\n    '\\u0217': 'u',\n    '\\u01B0': 'u',\n    '\\u1EEB': 'u',\n    '\\u1EE9': 'u',\n    '\\u1EEF': 'u',\n    '\\u1EED': 'u',\n    '\\u1EF1': 'u',\n    '\\u1EE5': 'u',\n    '\\u1E73': 'u',\n    '\\u0173': 'u',\n    '\\u1E77': 'u',\n    '\\u1E75': 'u',\n    '\\u0289': 'u',\n    '\\u24E5': 'v',\n    '\\uFF56': 'v',\n    '\\u1E7D': 'v',\n    '\\u1E7F': 'v',\n    '\\u028B': 'v',\n    '\\uA75F': 'v',\n    '\\u028C': 'v',\n    '\\uA761': 'vy',\n    '\\u24E6': 'w',\n    '\\uFF57': 'w',\n    '\\u1E81': 'w',\n    '\\u1E83': 'w',\n    '\\u0175': 'w',\n    '\\u1E87': 'w',\n    '\\u1E85': 'w',\n    '\\u1E98': 'w',\n    '\\u1E89': 'w',\n    '\\u2C73': 'w',\n    '\\u24E7': 'x',\n    '\\uFF58': 'x',\n    '\\u1E8B': 'x',\n    '\\u1E8D': 'x',\n    '\\u24E8': 'y',\n    '\\uFF59': 'y',\n    '\\u1EF3': 'y',\n    '\\u00FD': 'y',\n    '\\u0177': 'y',\n    '\\u1EF9': 'y',\n    '\\u0233': 'y',\n    '\\u1E8F': 'y',\n    '\\u00FF': 'y',\n    '\\u1EF7': 'y',\n    '\\u1E99': 'y',\n    '\\u1EF5': 'y',\n    '\\u01B4': 'y',\n    '\\u024F': 'y',\n    '\\u1EFF': 'y',\n    '\\u24E9': 'z',\n    '\\uFF5A': 'z',\n    '\\u017A': 'z',\n    '\\u1E91': 'z',\n    '\\u017C': 'z',\n    '\\u017E': 'z',\n    '\\u1E93': 'z',\n    '\\u1E95': 'z',\n    '\\u01B6': 'z',\n    '\\u0225': 'z',\n    '\\u0240': 'z',\n    '\\u2C6C': 'z',\n    '\\uA763': 'z',\n    '\\u0386': '\\u0391',\n    '\\u0388': '\\u0395',\n    '\\u0389': '\\u0397',\n    '\\u038A': '\\u0399',\n    '\\u03AA': '\\u0399',\n    '\\u038C': '\\u039F',\n    '\\u038E': '\\u03A5',\n    '\\u03AB': '\\u03A5',\n    '\\u038F': '\\u03A9',\n    '\\u03AC': '\\u03B1',\n    '\\u03AD': '\\u03B5',\n    '\\u03AE': '\\u03B7',\n    '\\u03AF': '\\u03B9',\n    '\\u03CA': '\\u03B9',\n    '\\u0390': '\\u03B9',\n    '\\u03CC': '\\u03BF',\n    '\\u03CD': '\\u03C5',\n    '\\u03CB': '\\u03C5',\n    '\\u03B0': '\\u03C5',\n    '\\u03CE': '\\u03C9',\n    '\\u03C2': '\\u03C3',\n    '\\u2019': '\\''\n  };\n\n  return diacritics;\n});\n\nS2.define('select2/data/base',[\n  '../utils'\n], function (Utils) {\n  function BaseAdapter ($element, options) {\n    BaseAdapter.__super__.constructor.call(this);\n  }\n\n  Utils.Extend(BaseAdapter, Utils.Observable);\n\n  BaseAdapter.prototype.current = function (callback) {\n    throw new Error('The `current` method must be defined in child classes.');\n  };\n\n  BaseAdapter.prototype.query = function (params, callback) {\n    throw new Error('The `query` method must be defined in child classes.');\n  };\n\n  BaseAdapter.prototype.bind = function (container, $container) {\n    // Can be implemented in subclasses\n  };\n\n  BaseAdapter.prototype.destroy = function () {\n    // Can be implemented in subclasses\n  };\n\n  BaseAdapter.prototype.generateResultId = function (container, data) {\n    var id = container.id + '-result-';\n\n    id += Utils.generateChars(4);\n\n    if (data.id != null) {\n      id += '-' + data.id.toString();\n    } else {\n      id += '-' + Utils.generateChars(4);\n    }\n    return id;\n  };\n\n  return BaseAdapter;\n});\n\nS2.define('select2/data/select',[\n  './base',\n  '../utils',\n  'jquery'\n], function (BaseAdapter, Utils, $) {\n  function SelectAdapter ($element, options) {\n    this.$element = $element;\n    this.options = options;\n\n    SelectAdapter.__super__.constructor.call(this);\n  }\n\n  Utils.Extend(SelectAdapter, BaseAdapter);\n\n  SelectAdapter.prototype.current = function (callback) {\n    var data = [];\n    var self = this;\n\n    this.$element.find(':selected').each(function () {\n      var $option = $(this);\n\n      var option = self.item($option);\n\n      data.push(option);\n    });\n\n    callback(data);\n  };\n\n  SelectAdapter.prototype.select = function (data) {\n    var self = this;\n\n    data.selected = true;\n\n    // If data.element is a DOM node, use it instead\n    if ($(data.element).is('option')) {\n      data.element.selected = true;\n\n      this.$element.trigger('input').trigger('change');\n\n      return;\n    }\n\n    if (this.$element.prop('multiple')) {\n      this.current(function (currentData) {\n        var val = [];\n\n        data = [data];\n        data.push.apply(data, currentData);\n\n        for (var d = 0; d < data.length; d++) {\n          var id = data[d].id;\n\n          if ($.inArray(id, val) === -1) {\n            val.push(id);\n          }\n        }\n\n        self.$element.val(val);\n        self.$element.trigger('input').trigger('change');\n      });\n    } else {\n      var val = data.id;\n\n      this.$element.val(val);\n      this.$element.trigger('input').trigger('change');\n    }\n  };\n\n  SelectAdapter.prototype.unselect = function (data) {\n    var self = this;\n\n    if (!this.$element.prop('multiple')) {\n      return;\n    }\n\n    data.selected = false;\n\n    if ($(data.element).is('option')) {\n      data.element.selected = false;\n\n      this.$element.trigger('input').trigger('change');\n\n      return;\n    }\n\n    this.current(function (currentData) {\n      var val = [];\n\n      for (var d = 0; d < currentData.length; d++) {\n        var id = currentData[d].id;\n\n        if (id !== data.id && $.inArray(id, val) === -1) {\n          val.push(id);\n        }\n      }\n\n      self.$element.val(val);\n\n      self.$element.trigger('input').trigger('change');\n    });\n  };\n\n  SelectAdapter.prototype.bind = function (container, $container) {\n    var self = this;\n\n    this.container = container;\n\n    container.on('select', function (params) {\n      self.select(params.data);\n    });\n\n    container.on('unselect', function (params) {\n      self.unselect(params.data);\n    });\n  };\n\n  SelectAdapter.prototype.destroy = function () {\n    // Remove anything added to child elements\n    this.$element.find('*').each(function () {\n      // Remove any custom data set by Select2\n      Utils.RemoveData(this);\n    });\n  };\n\n  SelectAdapter.prototype.query = function (params, callback) {\n    var data = [];\n    var self = this;\n\n    var $options = this.$element.children();\n\n    $options.each(function () {\n      var $option = $(this);\n\n      if (!$option.is('option') && !$option.is('optgroup')) {\n        return;\n      }\n\n      var option = self.item($option);\n\n      var matches = self.matches(params, option);\n\n      if (matches !== null) {\n        data.push(matches);\n      }\n    });\n\n    callback({\n      results: data\n    });\n  };\n\n  SelectAdapter.prototype.addOptions = function ($options) {\n    Utils.appendMany(this.$element, $options);\n  };\n\n  SelectAdapter.prototype.option = function (data) {\n    var option;\n\n    if (data.children) {\n      option = document.createElement('optgroup');\n      option.label = data.text;\n    } else {\n      option = document.createElement('option');\n\n      if (option.textContent !== undefined) {\n        option.textContent = data.text;\n      } else {\n        option.innerText = data.text;\n      }\n    }\n\n    if (data.id !== undefined) {\n      option.value = data.id;\n    }\n\n    if (data.disabled) {\n      option.disabled = true;\n    }\n\n    if (data.selected) {\n      option.selected = true;\n    }\n\n    if (data.title) {\n      option.title = data.title;\n    }\n\n    var $option = $(option);\n\n    var normalizedData = this._normalizeItem(data);\n    normalizedData.element = option;\n\n    // Override the option's data with the combined data\n    Utils.StoreData(option, 'data', normalizedData);\n\n    return $option;\n  };\n\n  SelectAdapter.prototype.item = function ($option) {\n    var data = {};\n\n    data = Utils.GetData($option[0], 'data');\n\n    if (data != null) {\n      return data;\n    }\n\n    if ($option.is('option')) {\n      data = {\n        id: $option.val(),\n        text: $option.text(),\n        disabled: $option.prop('disabled'),\n        selected: $option.prop('selected'),\n        title: $option.prop('title')\n      };\n    } else if ($option.is('optgroup')) {\n      data = {\n        text: $option.prop('label'),\n        children: [],\n        title: $option.prop('title')\n      };\n\n      var $children = $option.children('option');\n      var children = [];\n\n      for (var c = 0; c < $children.length; c++) {\n        var $child = $($children[c]);\n\n        var child = this.item($child);\n\n        children.push(child);\n      }\n\n      data.children = children;\n    }\n\n    data = this._normalizeItem(data);\n    data.element = $option[0];\n\n    Utils.StoreData($option[0], 'data', data);\n\n    return data;\n  };\n\n  SelectAdapter.prototype._normalizeItem = function (item) {\n    if (item !== Object(item)) {\n      item = {\n        id: item,\n        text: item\n      };\n    }\n\n    item = $.extend({}, {\n      text: ''\n    }, item);\n\n    var defaults = {\n      selected: false,\n      disabled: false\n    };\n\n    if (item.id != null) {\n      item.id = item.id.toString();\n    }\n\n    if (item.text != null) {\n      item.text = item.text.toString();\n    }\n\n    if (item._resultId == null && item.id && this.container != null) {\n      item._resultId = this.generateResultId(this.container, item);\n    }\n\n    return $.extend({}, defaults, item);\n  };\n\n  SelectAdapter.prototype.matches = function (params, data) {\n    var matcher = this.options.get('matcher');\n\n    return matcher(params, data);\n  };\n\n  return SelectAdapter;\n});\n\nS2.define('select2/data/array',[\n  './select',\n  '../utils',\n  'jquery'\n], function (SelectAdapter, Utils, $) {\n  function ArrayAdapter ($element, options) {\n    this._dataToConvert = options.get('data') || [];\n\n    ArrayAdapter.__super__.constructor.call(this, $element, options);\n  }\n\n  Utils.Extend(ArrayAdapter, SelectAdapter);\n\n  ArrayAdapter.prototype.bind = function (container, $container) {\n    ArrayAdapter.__super__.bind.call(this, container, $container);\n\n    this.addOptions(this.convertToOptions(this._dataToConvert));\n  };\n\n  ArrayAdapter.prototype.select = function (data) {\n    var $option = this.$element.find('option').filter(function (i, elm) {\n      return elm.value == data.id.toString();\n    });\n\n    if ($option.length === 0) {\n      $option = this.option(data);\n\n      this.addOptions($option);\n    }\n\n    ArrayAdapter.__super__.select.call(this, data);\n  };\n\n  ArrayAdapter.prototype.convertToOptions = function (data) {\n    var self = this;\n\n    var $existing = this.$element.find('option');\n    var existingIds = $existing.map(function () {\n      return self.item($(this)).id;\n    }).get();\n\n    var $options = [];\n\n    // Filter out all items except for the one passed in the argument\n    function onlyItem (item) {\n      return function () {\n        return $(this).val() == item.id;\n      };\n    }\n\n    for (var d = 0; d < data.length; d++) {\n      var item = this._normalizeItem(data[d]);\n\n      // Skip items which were pre-loaded, only merge the data\n      if ($.inArray(item.id, existingIds) >= 0) {\n        var $existingOption = $existing.filter(onlyItem(item));\n\n        var existingData = this.item($existingOption);\n        var newData = $.extend(true, {}, item, existingData);\n\n        var $newOption = this.option(newData);\n\n        $existingOption.replaceWith($newOption);\n\n        continue;\n      }\n\n      var $option = this.option(item);\n\n      if (item.children) {\n        var $children = this.convertToOptions(item.children);\n\n        Utils.appendMany($option, $children);\n      }\n\n      $options.push($option);\n    }\n\n    return $options;\n  };\n\n  return ArrayAdapter;\n});\n\nS2.define('select2/data/ajax',[\n  './array',\n  '../utils',\n  'jquery'\n], function (ArrayAdapter, Utils, $) {\n  function AjaxAdapter ($element, options) {\n    this.ajaxOptions = this._applyDefaults(options.get('ajax'));\n\n    if (this.ajaxOptions.processResults != null) {\n      this.processResults = this.ajaxOptions.processResults;\n    }\n\n    AjaxAdapter.__super__.constructor.call(this, $element, options);\n  }\n\n  Utils.Extend(AjaxAdapter, ArrayAdapter);\n\n  AjaxAdapter.prototype._applyDefaults = function (options) {\n    var defaults = {\n      data: function (params) {\n        return $.extend({}, params, {\n          q: params.term\n        });\n      },\n      transport: function (params, success, failure) {\n        var $request = $.ajax(params);\n\n        $request.then(success);\n        $request.fail(failure);\n\n        return $request;\n      }\n    };\n\n    return $.extend({}, defaults, options, true);\n  };\n\n  AjaxAdapter.prototype.processResults = function (results) {\n    return results;\n  };\n\n  AjaxAdapter.prototype.query = function (params, callback) {\n    var matches = [];\n    var self = this;\n\n    if (this._request != null) {\n      // JSONP requests cannot always be aborted\n      if ($.isFunction(this._request.abort)) {\n        this._request.abort();\n      }\n\n      this._request = null;\n    }\n\n    var options = $.extend({\n      type: 'GET'\n    }, this.ajaxOptions);\n\n    if (typeof options.url === 'function') {\n      options.url = options.url.call(this.$element, params);\n    }\n\n    if (typeof options.data === 'function') {\n      options.data = options.data.call(this.$element, params);\n    }\n\n    function request () {\n      var $request = options.transport(options, function (data) {\n        var results = self.processResults(data, params);\n\n        if (self.options.get('debug') && window.console && console.error) {\n          // Check to make sure that the response included a `results` key.\n          if (!results || !results.results || !$.isArray(results.results)) {\n            console.error(\n              'Select2: The AJAX results did not return an array in the ' +\n              '`results` key of the response.'\n            );\n          }\n        }\n\n        callback(results);\n      }, function () {\n        // Attempt to detect if a request was aborted\n        // Only works if the transport exposes a status property\n        if ('status' in $request &&\n            ($request.status === 0 || $request.status === '0')) {\n          return;\n        }\n\n        self.trigger('results:message', {\n          message: 'errorLoading'\n        });\n      });\n\n      self._request = $request;\n    }\n\n    if (this.ajaxOptions.delay && params.term != null) {\n      if (this._queryTimeout) {\n        window.clearTimeout(this._queryTimeout);\n      }\n\n      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);\n    } else {\n      request();\n    }\n  };\n\n  return AjaxAdapter;\n});\n\nS2.define('select2/data/tags',[\n  'jquery'\n], function ($) {\n  function Tags (decorated, $element, options) {\n    var tags = options.get('tags');\n\n    var createTag = options.get('createTag');\n\n    if (createTag !== undefined) {\n      this.createTag = createTag;\n    }\n\n    var insertTag = options.get('insertTag');\n\n    if (insertTag !== undefined) {\n        this.insertTag = insertTag;\n    }\n\n    decorated.call(this, $element, options);\n\n    if ($.isArray(tags)) {\n      for (var t = 0; t < tags.length; t++) {\n        var tag = tags[t];\n        var item = this._normalizeItem(tag);\n\n        var $option = this.option(item);\n\n        this.$element.append($option);\n      }\n    }\n  }\n\n  Tags.prototype.query = function (decorated, params, callback) {\n    var self = this;\n\n    this._removeOldTags();\n\n    if (params.term == null || params.page != null) {\n      decorated.call(this, params, callback);\n      return;\n    }\n\n    function wrapper (obj, child) {\n      var data = obj.results;\n\n      for (var i = 0; i < data.length; i++) {\n        var option = data[i];\n\n        var checkChildren = (\n          option.children != null &&\n          !wrapper({\n            results: option.children\n          }, true)\n        );\n\n        var optionText = (option.text || '').toUpperCase();\n        var paramsTerm = (params.term || '').toUpperCase();\n\n        var checkText = optionText === paramsTerm;\n\n        if (checkText || checkChildren) {\n          if (child) {\n            return false;\n          }\n\n          obj.data = data;\n          callback(obj);\n\n          return;\n        }\n      }\n\n      if (child) {\n        return true;\n      }\n\n      var tag = self.createTag(params);\n\n      if (tag != null) {\n        var $option = self.option(tag);\n        $option.attr('data-select2-tag', true);\n\n        self.addOptions([$option]);\n\n        self.insertTag(data, tag);\n      }\n\n      obj.results = data;\n\n      callback(obj);\n    }\n\n    decorated.call(this, params, wrapper);\n  };\n\n  Tags.prototype.createTag = function (decorated, params) {\n    var term = $.trim(params.term);\n\n    if (term === '') {\n      return null;\n    }\n\n    return {\n      id: term,\n      text: term\n    };\n  };\n\n  Tags.prototype.insertTag = function (_, data, tag) {\n    data.unshift(tag);\n  };\n\n  Tags.prototype._removeOldTags = function (_) {\n    var $options = this.$element.find('option[data-select2-tag]');\n\n    $options.each(function () {\n      if (this.selected) {\n        return;\n      }\n\n      $(this).remove();\n    });\n  };\n\n  return Tags;\n});\n\nS2.define('select2/data/tokenizer',[\n  'jquery'\n], function ($) {\n  function Tokenizer (decorated, $element, options) {\n    var tokenizer = options.get('tokenizer');\n\n    if (tokenizer !== undefined) {\n      this.tokenizer = tokenizer;\n    }\n\n    decorated.call(this, $element, options);\n  }\n\n  Tokenizer.prototype.bind = function (decorated, container, $container) {\n    decorated.call(this, container, $container);\n\n    this.$search =  container.dropdown.$search || container.selection.$search ||\n      $container.find('.select2-search__field');\n  };\n\n  Tokenizer.prototype.query = function (decorated, params, callback) {\n    var self = this;\n\n    function createAndSelect (data) {\n      // Normalize the data object so we can use it for checks\n      var item = self._normalizeItem(data);\n\n      // Check if the data object already exists as a tag\n      // Select it if it doesn't\n      var $existingOptions = self.$element.find('option').filter(function () {\n        return $(this).val() === item.id;\n      });\n\n      // If an existing option wasn't found for it, create the option\n      if (!$existingOptions.length) {\n        var $option = self.option(item);\n        $option.attr('data-select2-tag', true);\n\n        self._removeOldTags();\n        self.addOptions([$option]);\n      }\n\n      // Select the item, now that we know there is an option for it\n      select(item);\n    }\n\n    function select (data) {\n      self.trigger('select', {\n        data: data\n      });\n    }\n\n    params.term = params.term || '';\n\n    var tokenData = this.tokenizer(params, this.options, createAndSelect);\n\n    if (tokenData.term !== params.term) {\n      // Replace the search term if we have the search box\n      if (this.$search.length) {\n        this.$search.val(tokenData.term);\n        this.$search.trigger('focus');\n      }\n\n      params.term = tokenData.term;\n    }\n\n    decorated.call(this, params, callback);\n  };\n\n  Tokenizer.prototype.tokenizer = function (_, params, options, callback) {\n    var separators = options.get('tokenSeparators') || [];\n    var term = params.term;\n    var i = 0;\n\n    var createTag = this.createTag || function (params) {\n      return {\n        id: params.term,\n        text: params.term\n      };\n    };\n\n    while (i < term.length) {\n      var termChar = term[i];\n\n      if ($.inArray(termChar, separators) === -1) {\n        i++;\n\n        continue;\n      }\n\n      var part = term.substr(0, i);\n      var partParams = $.extend({}, params, {\n        term: part\n      });\n\n      var data = createTag(partParams);\n\n      if (data == null) {\n        i++;\n        continue;\n      }\n\n      callback(data);\n\n      // Reset the term to not include the tokenized portion\n      term = term.substr(i + 1) || '';\n      i = 0;\n    }\n\n    return {\n      term: term\n    };\n  };\n\n  return Tokenizer;\n});\n\nS2.define('select2/data/minimumInputLength',[\n\n], function () {\n  function MinimumInputLength (decorated, $e, options) {\n    this.minimumInputLength = options.get('minimumInputLength');\n\n    decorated.call(this, $e, options);\n  }\n\n  MinimumInputLength.prototype.query = function (decorated, params, callback) {\n    params.term = params.term || '';\n\n    if (params.term.length < this.minimumInputLength) {\n      this.trigger('results:message', {\n        message: 'inputTooShort',\n        args: {\n          minimum: this.minimumInputLength,\n          input: params.term,\n          params: params\n        }\n      });\n\n      return;\n    }\n\n    decorated.call(this, params, callback);\n  };\n\n  return MinimumInputLength;\n});\n\nS2.define('select2/data/maximumInputLength',[\n\n], function () {\n  function MaximumInputLength (decorated, $e, options) {\n    this.maximumInputLength = options.get('maximumInputLength');\n\n    decorated.call(this, $e, options);\n  }\n\n  MaximumInputLength.prototype.query = function (decorated, params, callback) {\n    params.term = params.term || '';\n\n    if (this.maximumInputLength > 0 &&\n        params.term.length > this.maximumInputLength) {\n      this.trigger('results:message', {\n        message: 'inputTooLong',\n        args: {\n          maximum: this.maximumInputLength,\n          input: params.term,\n          params: params\n        }\n      });\n\n      return;\n    }\n\n    decorated.call(this, params, callback);\n  };\n\n  return MaximumInputLength;\n});\n\nS2.define('select2/data/maximumSelectionLength',[\n\n], function (){\n  function MaximumSelectionLength (decorated, $e, options) {\n    this.maximumSelectionLength = options.get('maximumSelectionLength');\n\n    decorated.call(this, $e, options);\n  }\n\n  MaximumSelectionLength.prototype.bind =\n    function (decorated, container, $container) {\n      var self = this;\n\n      decorated.call(this, container, $container);\n\n      container.on('select', function () {\n        self._checkIfMaximumSelected();\n      });\n  };\n\n  MaximumSelectionLength.prototype.query =\n    function (decorated, params, callback) {\n      var self = this;\n\n      this._checkIfMaximumSelected(function () {\n        decorated.call(self, params, callback);\n      });\n  };\n\n  MaximumSelectionLength.prototype._checkIfMaximumSelected =\n    function (_, successCallback) {\n      var self = this;\n\n      this.current(function (currentData) {\n        var count = currentData != null ? currentData.length : 0;\n        if (self.maximumSelectionLength > 0 &&\n          count >= self.maximumSelectionLength) {\n          self.trigger('results:message', {\n            message: 'maximumSelected',\n            args: {\n              maximum: self.maximumSelectionLength\n            }\n          });\n          return;\n        }\n\n        if (successCallback) {\n          successCallback();\n        }\n      });\n  };\n\n  return MaximumSelectionLength;\n});\n\nS2.define('select2/dropdown',[\n  'jquery',\n  './utils'\n], function ($, Utils) {\n  function Dropdown ($element, options) {\n    this.$element = $element;\n    this.options = options;\n\n    Dropdown.__super__.constructor.call(this);\n  }\n\n  Utils.Extend(Dropdown, Utils.Observable);\n\n  Dropdown.prototype.render = function () {\n    var $dropdown = $(\n      '<span class=\"select2-dropdown\">' +\n        '<span class=\"select2-results\"></span>' +\n      '</span>'\n    );\n\n    $dropdown.attr('dir', this.options.get('dir'));\n\n    this.$dropdown = $dropdown;\n\n    return $dropdown;\n  };\n\n  Dropdown.prototype.bind = function () {\n    // Should be implemented in subclasses\n  };\n\n  Dropdown.prototype.position = function ($dropdown, $container) {\n    // Should be implemented in subclasses\n  };\n\n  Dropdown.prototype.destroy = function () {\n    // Remove the dropdown from the DOM\n    this.$dropdown.remove();\n  };\n\n  return Dropdown;\n});\n\nS2.define('select2/dropdown/search',[\n  'jquery',\n  '../utils'\n], function ($, Utils) {\n  function Search () { }\n\n  Search.prototype.render = function (decorated) {\n    var $rendered = decorated.call(this);\n\n    var $search = $(\n      '<span class=\"select2-search select2-search--dropdown\">' +\n        '<input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\"' +\n        ' autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\"' +\n        ' spellcheck=\"false\" role=\"searchbox\" aria-autocomplete=\"list\" />' +\n      '</span>'\n    );\n\n    this.$searchContainer = $search;\n    this.$search = $search.find('input');\n\n    $rendered.prepend($search);\n\n    return $rendered;\n  };\n\n  Search.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    var resultsId = container.id + '-results';\n\n    decorated.call(this, container, $container);\n\n    this.$search.on('keydown', function (evt) {\n      self.trigger('keypress', evt);\n\n      self._keyUpPrevented = evt.isDefaultPrevented();\n    });\n\n    // Workaround for browsers which do not support the `input` event\n    // This will prevent double-triggering of events for browsers which support\n    // both the `keyup` and `input` events.\n    this.$search.on('input', function (evt) {\n      // Unbind the duplicated `keyup` event\n      $(this).off('keyup');\n    });\n\n    this.$search.on('keyup input', function (evt) {\n      self.handleSearch(evt);\n    });\n\n    container.on('open', function () {\n      self.$search.attr('tabindex', 0);\n      self.$search.attr('aria-controls', resultsId);\n\n      self.$search.trigger('focus');\n\n      window.setTimeout(function () {\n        self.$search.trigger('focus');\n      }, 0);\n    });\n\n    container.on('close', function () {\n      self.$search.attr('tabindex', -1);\n      self.$search.removeAttr('aria-controls');\n      self.$search.removeAttr('aria-activedescendant');\n\n      self.$search.val('');\n      self.$search.trigger('blur');\n    });\n\n    container.on('focus', function () {\n      if (!container.isOpen()) {\n        self.$search.trigger('focus');\n      }\n    });\n\n    container.on('results:all', function (params) {\n      if (params.query.term == null || params.query.term === '') {\n        var showSearch = self.showSearch(params);\n\n        if (showSearch) {\n          self.$searchContainer.removeClass('select2-search--hide');\n        } else {\n          self.$searchContainer.addClass('select2-search--hide');\n        }\n      }\n    });\n\n    container.on('results:focus', function (params) {\n      if (params.data._resultId) {\n        self.$search.attr('aria-activedescendant', params.data._resultId);\n      } else {\n        self.$search.removeAttr('aria-activedescendant');\n      }\n    });\n  };\n\n  Search.prototype.handleSearch = function (evt) {\n    if (!this._keyUpPrevented) {\n      var input = this.$search.val();\n\n      this.trigger('query', {\n        term: input\n      });\n    }\n\n    this._keyUpPrevented = false;\n  };\n\n  Search.prototype.showSearch = function (_, params) {\n    return true;\n  };\n\n  return Search;\n});\n\nS2.define('select2/dropdown/hidePlaceholder',[\n\n], function () {\n  function HidePlaceholder (decorated, $element, options, dataAdapter) {\n    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));\n\n    decorated.call(this, $element, options, dataAdapter);\n  }\n\n  HidePlaceholder.prototype.append = function (decorated, data) {\n    data.results = this.removePlaceholder(data.results);\n\n    decorated.call(this, data);\n  };\n\n  HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {\n    if (typeof placeholder === 'string') {\n      placeholder = {\n        id: '',\n        text: placeholder\n      };\n    }\n\n    return placeholder;\n  };\n\n  HidePlaceholder.prototype.removePlaceholder = function (_, data) {\n    var modifiedData = data.slice(0);\n\n    for (var d = data.length - 1; d >= 0; d--) {\n      var item = data[d];\n\n      if (this.placeholder.id === item.id) {\n        modifiedData.splice(d, 1);\n      }\n    }\n\n    return modifiedData;\n  };\n\n  return HidePlaceholder;\n});\n\nS2.define('select2/dropdown/infiniteScroll',[\n  'jquery'\n], function ($) {\n  function InfiniteScroll (decorated, $element, options, dataAdapter) {\n    this.lastParams = {};\n\n    decorated.call(this, $element, options, dataAdapter);\n\n    this.$loadingMore = this.createLoadingMore();\n    this.loading = false;\n  }\n\n  InfiniteScroll.prototype.append = function (decorated, data) {\n    this.$loadingMore.remove();\n    this.loading = false;\n\n    decorated.call(this, data);\n\n    if (this.showLoadingMore(data)) {\n      this.$results.append(this.$loadingMore);\n      this.loadMoreIfNeeded();\n    }\n  };\n\n  InfiniteScroll.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    decorated.call(this, container, $container);\n\n    container.on('query', function (params) {\n      self.lastParams = params;\n      self.loading = true;\n    });\n\n    container.on('query:append', function (params) {\n      self.lastParams = params;\n      self.loading = true;\n    });\n\n    this.$results.on('scroll', this.loadMoreIfNeeded.bind(this));\n  };\n\n  InfiniteScroll.prototype.loadMoreIfNeeded = function () {\n    var isLoadMoreVisible = $.contains(\n      document.documentElement,\n      this.$loadingMore[0]\n    );\n\n    if (this.loading || !isLoadMoreVisible) {\n      return;\n    }\n\n    var currentOffset = this.$results.offset().top +\n      this.$results.outerHeight(false);\n    var loadingMoreOffset = this.$loadingMore.offset().top +\n      this.$loadingMore.outerHeight(false);\n\n    if (currentOffset + 50 >= loadingMoreOffset) {\n      this.loadMore();\n    }\n  };\n\n  InfiniteScroll.prototype.loadMore = function () {\n    this.loading = true;\n\n    var params = $.extend({}, {page: 1}, this.lastParams);\n\n    params.page++;\n\n    this.trigger('query:append', params);\n  };\n\n  InfiniteScroll.prototype.showLoadingMore = function (_, data) {\n    return data.pagination && data.pagination.more;\n  };\n\n  InfiniteScroll.prototype.createLoadingMore = function () {\n    var $option = $(\n      '<li ' +\n      'class=\"select2-results__option select2-results__option--load-more\"' +\n      'role=\"option\" aria-disabled=\"true\"></li>'\n    );\n\n    var message = this.options.get('translations').get('loadingMore');\n\n    $option.html(message(this.lastParams));\n\n    return $option;\n  };\n\n  return InfiniteScroll;\n});\n\nS2.define('select2/dropdown/attachBody',[\n  'jquery',\n  '../utils'\n], function ($, Utils) {\n  function AttachBody (decorated, $element, options) {\n    this.$dropdownParent = $(options.get('dropdownParent') || document.body);\n\n    decorated.call(this, $element, options);\n  }\n\n  AttachBody.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    decorated.call(this, container, $container);\n\n    container.on('open', function () {\n      self._showDropdown();\n      self._attachPositioningHandler(container);\n\n      // Must bind after the results handlers to ensure correct sizing\n      self._bindContainerResultHandlers(container);\n    });\n\n    container.on('close', function () {\n      self._hideDropdown();\n      self._detachPositioningHandler(container);\n    });\n\n    this.$dropdownContainer.on('mousedown', function (evt) {\n      evt.stopPropagation();\n    });\n  };\n\n  AttachBody.prototype.destroy = function (decorated) {\n    decorated.call(this);\n\n    this.$dropdownContainer.remove();\n  };\n\n  AttachBody.prototype.position = function (decorated, $dropdown, $container) {\n    // Clone all of the container classes\n    $dropdown.attr('class', $container.attr('class'));\n\n    $dropdown.removeClass('select2');\n    $dropdown.addClass('select2-container--open');\n\n    $dropdown.css({\n      position: 'absolute',\n      top: -999999\n    });\n\n    this.$container = $container;\n  };\n\n  AttachBody.prototype.render = function (decorated) {\n    var $container = $('<span></span>');\n\n    var $dropdown = decorated.call(this);\n    $container.append($dropdown);\n\n    this.$dropdownContainer = $container;\n\n    return $container;\n  };\n\n  AttachBody.prototype._hideDropdown = function (decorated) {\n    this.$dropdownContainer.detach();\n  };\n\n  AttachBody.prototype._bindContainerResultHandlers =\n      function (decorated, container) {\n\n    // These should only be bound once\n    if (this._containerResultsHandlersBound) {\n      return;\n    }\n\n    var self = this;\n\n    container.on('results:all', function () {\n      self._positionDropdown();\n      self._resizeDropdown();\n    });\n\n    container.on('results:append', function () {\n      self._positionDropdown();\n      self._resizeDropdown();\n    });\n\n    container.on('results:message', function () {\n      self._positionDropdown();\n      self._resizeDropdown();\n    });\n\n    container.on('select', function () {\n      self._positionDropdown();\n      self._resizeDropdown();\n    });\n\n    container.on('unselect', function () {\n      self._positionDropdown();\n      self._resizeDropdown();\n    });\n\n    this._containerResultsHandlersBound = true;\n  };\n\n  AttachBody.prototype._attachPositioningHandler =\n      function (decorated, container) {\n    var self = this;\n\n    var scrollEvent = 'scroll.select2.' + container.id;\n    var resizeEvent = 'resize.select2.' + container.id;\n    var orientationEvent = 'orientationchange.select2.' + container.id;\n\n    var $watchers = this.$container.parents().filter(Utils.hasScroll);\n    $watchers.each(function () {\n      Utils.StoreData(this, 'select2-scroll-position', {\n        x: $(this).scrollLeft(),\n        y: $(this).scrollTop()\n      });\n    });\n\n    $watchers.on(scrollEvent, function (ev) {\n      var position = Utils.GetData(this, 'select2-scroll-position');\n      $(this).scrollTop(position.y);\n    });\n\n    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,\n      function (e) {\n      self._positionDropdown();\n      self._resizeDropdown();\n    });\n  };\n\n  AttachBody.prototype._detachPositioningHandler =\n      function (decorated, container) {\n    var scrollEvent = 'scroll.select2.' + container.id;\n    var resizeEvent = 'resize.select2.' + container.id;\n    var orientationEvent = 'orientationchange.select2.' + container.id;\n\n    var $watchers = this.$container.parents().filter(Utils.hasScroll);\n    $watchers.off(scrollEvent);\n\n    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);\n  };\n\n  AttachBody.prototype._positionDropdown = function () {\n    var $window = $(window);\n\n    var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');\n    var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');\n\n    var newDirection = null;\n\n    var offset = this.$container.offset();\n\n    offset.bottom = offset.top + this.$container.outerHeight(false);\n\n    var container = {\n      height: this.$container.outerHeight(false)\n    };\n\n    container.top = offset.top;\n    container.bottom = offset.top + container.height;\n\n    var dropdown = {\n      height: this.$dropdown.outerHeight(false)\n    };\n\n    var viewport = {\n      top: $window.scrollTop(),\n      bottom: $window.scrollTop() + $window.height()\n    };\n\n    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);\n    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);\n\n    var css = {\n      left: offset.left,\n      top: container.bottom\n    };\n\n    // Determine what the parent element is to use for calculating the offset\n    var $offsetParent = this.$dropdownParent;\n\n    // For statically positioned elements, we need to get the element\n    // that is determining the offset\n    if ($offsetParent.css('position') === 'static') {\n      $offsetParent = $offsetParent.offsetParent();\n    }\n\n    var parentOffset = {\n      top: 0,\n      left: 0\n    };\n\n    if (\n      $.contains(document.body, $offsetParent[0]) ||\n      $offsetParent[0].isConnected\n      ) {\n      parentOffset = $offsetParent.offset();\n    }\n\n    css.top -= parentOffset.top;\n    css.left -= parentOffset.left;\n\n    if (!isCurrentlyAbove && !isCurrentlyBelow) {\n      newDirection = 'below';\n    }\n\n    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {\n      newDirection = 'above';\n    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {\n      newDirection = 'below';\n    }\n\n    if (newDirection == 'above' ||\n      (isCurrentlyAbove && newDirection !== 'below')) {\n      css.top = container.top - parentOffset.top - dropdown.height;\n    }\n\n    if (newDirection != null) {\n      this.$dropdown\n        .removeClass('select2-dropdown--below select2-dropdown--above')\n        .addClass('select2-dropdown--' + newDirection);\n      this.$container\n        .removeClass('select2-container--below select2-container--above')\n        .addClass('select2-container--' + newDirection);\n    }\n\n    this.$dropdownContainer.css(css);\n  };\n\n  AttachBody.prototype._resizeDropdown = function () {\n    var css = {\n      width: this.$container.outerWidth(false) + 'px'\n    };\n\n    if (this.options.get('dropdownAutoWidth')) {\n      css.minWidth = css.width;\n      css.position = 'relative';\n      css.width = 'auto';\n    }\n\n    this.$dropdown.css(css);\n  };\n\n  AttachBody.prototype._showDropdown = function (decorated) {\n    this.$dropdownContainer.appendTo(this.$dropdownParent);\n\n    this._positionDropdown();\n    this._resizeDropdown();\n  };\n\n  return AttachBody;\n});\n\nS2.define('select2/dropdown/minimumResultsForSearch',[\n\n], function () {\n  function countResults (data) {\n    var count = 0;\n\n    for (var d = 0; d < data.length; d++) {\n      var item = data[d];\n\n      if (item.children) {\n        count += countResults(item.children);\n      } else {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {\n    this.minimumResultsForSearch = options.get('minimumResultsForSearch');\n\n    if (this.minimumResultsForSearch < 0) {\n      this.minimumResultsForSearch = Infinity;\n    }\n\n    decorated.call(this, $element, options, dataAdapter);\n  }\n\n  MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {\n    if (countResults(params.data.results) < this.minimumResultsForSearch) {\n      return false;\n    }\n\n    return decorated.call(this, params);\n  };\n\n  return MinimumResultsForSearch;\n});\n\nS2.define('select2/dropdown/selectOnClose',[\n  '../utils'\n], function (Utils) {\n  function SelectOnClose () { }\n\n  SelectOnClose.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    decorated.call(this, container, $container);\n\n    container.on('close', function (params) {\n      self._handleSelectOnClose(params);\n    });\n  };\n\n  SelectOnClose.prototype._handleSelectOnClose = function (_, params) {\n    if (params && params.originalSelect2Event != null) {\n      var event = params.originalSelect2Event;\n\n      // Don't select an item if the close event was triggered from a select or\n      // unselect event\n      if (event._type === 'select' || event._type === 'unselect') {\n        return;\n      }\n    }\n\n    var $highlightedResults = this.getHighlightedResults();\n\n    // Only select highlighted results\n    if ($highlightedResults.length < 1) {\n      return;\n    }\n\n    var data = Utils.GetData($highlightedResults[0], 'data');\n\n    // Don't re-select already selected resulte\n    if (\n      (data.element != null && data.element.selected) ||\n      (data.element == null && data.selected)\n    ) {\n      return;\n    }\n\n    this.trigger('select', {\n        data: data\n    });\n  };\n\n  return SelectOnClose;\n});\n\nS2.define('select2/dropdown/closeOnSelect',[\n\n], function () {\n  function CloseOnSelect () { }\n\n  CloseOnSelect.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    decorated.call(this, container, $container);\n\n    container.on('select', function (evt) {\n      self._selectTriggered(evt);\n    });\n\n    container.on('unselect', function (evt) {\n      self._selectTriggered(evt);\n    });\n  };\n\n  CloseOnSelect.prototype._selectTriggered = function (_, evt) {\n    var originalEvent = evt.originalEvent;\n\n    // Don't close if the control key is being held\n    if (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey)) {\n      return;\n    }\n\n    this.trigger('close', {\n      originalEvent: originalEvent,\n      originalSelect2Event: evt\n    });\n  };\n\n  return CloseOnSelect;\n});\n\nS2.define('select2/i18n/en',[],function () {\n  // English\n  return {\n    errorLoading: function () {\n      return 'The results could not be loaded.';\n    },\n    inputTooLong: function (args) {\n      var overChars = args.input.length - args.maximum;\n\n      var message = 'Please delete ' + overChars + ' character';\n\n      if (overChars != 1) {\n        message += 's';\n      }\n\n      return message;\n    },\n    inputTooShort: function (args) {\n      var remainingChars = args.minimum - args.input.length;\n\n      var message = 'Please enter ' + remainingChars + ' or more characters';\n\n      return message;\n    },\n    loadingMore: function () {\n      return 'Loading more results…';\n    },\n    maximumSelected: function (args) {\n      var message = 'You can only select ' + args.maximum + ' item';\n\n      if (args.maximum != 1) {\n        message += 's';\n      }\n\n      return message;\n    },\n    noResults: function () {\n      return 'No results found';\n    },\n    searching: function () {\n      return 'Searching…';\n    },\n    removeAllItems: function () {\n      return 'Remove all items';\n    }\n  };\n});\n\nS2.define('select2/defaults',[\n  'jquery',\n  'require',\n\n  './results',\n\n  './selection/single',\n  './selection/multiple',\n  './selection/placeholder',\n  './selection/allowClear',\n  './selection/search',\n  './selection/eventRelay',\n\n  './utils',\n  './translation',\n  './diacritics',\n\n  './data/select',\n  './data/array',\n  './data/ajax',\n  './data/tags',\n  './data/tokenizer',\n  './data/minimumInputLength',\n  './data/maximumInputLength',\n  './data/maximumSelectionLength',\n\n  './dropdown',\n  './dropdown/search',\n  './dropdown/hidePlaceholder',\n  './dropdown/infiniteScroll',\n  './dropdown/attachBody',\n  './dropdown/minimumResultsForSearch',\n  './dropdown/selectOnClose',\n  './dropdown/closeOnSelect',\n\n  './i18n/en'\n], function ($, require,\n\n             ResultsList,\n\n             SingleSelection, MultipleSelection, Placeholder, AllowClear,\n             SelectionSearch, EventRelay,\n\n             Utils, Translation, DIACRITICS,\n\n             SelectData, ArrayData, AjaxData, Tags, Tokenizer,\n             MinimumInputLength, MaximumInputLength, MaximumSelectionLength,\n\n             Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,\n             AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,\n\n             EnglishTranslation) {\n  function Defaults () {\n    this.reset();\n  }\n\n  Defaults.prototype.apply = function (options) {\n    options = $.extend(true, {}, this.defaults, options);\n\n    if (options.dataAdapter == null) {\n      if (options.ajax != null) {\n        options.dataAdapter = AjaxData;\n      } else if (options.data != null) {\n        options.dataAdapter = ArrayData;\n      } else {\n        options.dataAdapter = SelectData;\n      }\n\n      if (options.minimumInputLength > 0) {\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          MinimumInputLength\n        );\n      }\n\n      if (options.maximumInputLength > 0) {\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          MaximumInputLength\n        );\n      }\n\n      if (options.maximumSelectionLength > 0) {\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          MaximumSelectionLength\n        );\n      }\n\n      if (options.tags) {\n        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);\n      }\n\n      if (options.tokenSeparators != null || options.tokenizer != null) {\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          Tokenizer\n        );\n      }\n\n      if (options.query != null) {\n        var Query = require(options.amdBase + 'compat/query');\n\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          Query\n        );\n      }\n\n      if (options.initSelection != null) {\n        var InitSelection = require(options.amdBase + 'compat/initSelection');\n\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          InitSelection\n        );\n      }\n    }\n\n    if (options.resultsAdapter == null) {\n      options.resultsAdapter = ResultsList;\n\n      if (options.ajax != null) {\n        options.resultsAdapter = Utils.Decorate(\n          options.resultsAdapter,\n          InfiniteScroll\n        );\n      }\n\n      if (options.placeholder != null) {\n        options.resultsAdapter = Utils.Decorate(\n          options.resultsAdapter,\n          HidePlaceholder\n        );\n      }\n\n      if (options.selectOnClose) {\n        options.resultsAdapter = Utils.Decorate(\n          options.resultsAdapter,\n          SelectOnClose\n        );\n      }\n    }\n\n    if (options.dropdownAdapter == null) {\n      if (options.multiple) {\n        options.dropdownAdapter = Dropdown;\n      } else {\n        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);\n\n        options.dropdownAdapter = SearchableDropdown;\n      }\n\n      if (options.minimumResultsForSearch !== 0) {\n        options.dropdownAdapter = Utils.Decorate(\n          options.dropdownAdapter,\n          MinimumResultsForSearch\n        );\n      }\n\n      if (options.closeOnSelect) {\n        options.dropdownAdapter = Utils.Decorate(\n          options.dropdownAdapter,\n          CloseOnSelect\n        );\n      }\n\n      if (\n        options.dropdownCssClass != null ||\n        options.dropdownCss != null ||\n        options.adaptDropdownCssClass != null\n      ) {\n        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');\n\n        options.dropdownAdapter = Utils.Decorate(\n          options.dropdownAdapter,\n          DropdownCSS\n        );\n      }\n\n      options.dropdownAdapter = Utils.Decorate(\n        options.dropdownAdapter,\n        AttachBody\n      );\n    }\n\n    if (options.selectionAdapter == null) {\n      if (options.multiple) {\n        options.selectionAdapter = MultipleSelection;\n      } else {\n        options.selectionAdapter = SingleSelection;\n      }\n\n      // Add the placeholder mixin if a placeholder was specified\n      if (options.placeholder != null) {\n        options.selectionAdapter = Utils.Decorate(\n          options.selectionAdapter,\n          Placeholder\n        );\n      }\n\n      if (options.allowClear) {\n        options.selectionAdapter = Utils.Decorate(\n          options.selectionAdapter,\n          AllowClear\n        );\n      }\n\n      if (options.multiple) {\n        options.selectionAdapter = Utils.Decorate(\n          options.selectionAdapter,\n          SelectionSearch\n        );\n      }\n\n      if (\n        options.containerCssClass != null ||\n        options.containerCss != null ||\n        options.adaptContainerCssClass != null\n      ) {\n        var ContainerCSS = require(options.amdBase + 'compat/containerCss');\n\n        options.selectionAdapter = Utils.Decorate(\n          options.selectionAdapter,\n          ContainerCSS\n        );\n      }\n\n      options.selectionAdapter = Utils.Decorate(\n        options.selectionAdapter,\n        EventRelay\n      );\n    }\n\n    // If the defaults were not previously applied from an element, it is\n    // possible for the language option to have not been resolved\n    options.language = this._resolveLanguage(options.language);\n\n    // Always fall back to English since it will always be complete\n    options.language.push('en');\n\n    var uniqueLanguages = [];\n\n    for (var l = 0; l < options.language.length; l++) {\n      var language = options.language[l];\n\n      if (uniqueLanguages.indexOf(language) === -1) {\n        uniqueLanguages.push(language);\n      }\n    }\n\n    options.language = uniqueLanguages;\n\n    options.translations = this._processTranslations(\n      options.language,\n      options.debug\n    );\n\n    return options;\n  };\n\n  Defaults.prototype.reset = function () {\n    function stripDiacritics (text) {\n      // Used 'uni range + named function' from http://jsperf.com/diacritics/18\n      function match(a) {\n        return DIACRITICS[a] || a;\n      }\n\n      return text.replace(/[^\\u0000-\\u007E]/g, match);\n    }\n\n    function matcher (params, data) {\n      // Always return the object if there is nothing to compare\n      if ($.trim(params.term) === '') {\n        return data;\n      }\n\n      // Do a recursive check for options with children\n      if (data.children && data.children.length > 0) {\n        // Clone the data object if there are children\n        // This is required as we modify the object to remove any non-matches\n        var match = $.extend(true, {}, data);\n\n        // Check each child of the option\n        for (var c = data.children.length - 1; c >= 0; c--) {\n          var child = data.children[c];\n\n          var matches = matcher(params, child);\n\n          // If there wasn't a match, remove the object in the array\n          if (matches == null) {\n            match.children.splice(c, 1);\n          }\n        }\n\n        // If any children matched, return the new object\n        if (match.children.length > 0) {\n          return match;\n        }\n\n        // If there were no matching children, check just the plain object\n        return matcher(params, match);\n      }\n\n      var original = stripDiacritics(data.text).toUpperCase();\n      var term = stripDiacritics(params.term).toUpperCase();\n\n      // Check if the text contains the term\n      if (original.indexOf(term) > -1) {\n        return data;\n      }\n\n      // If it doesn't contain the term, don't return anything\n      return null;\n    }\n\n    this.defaults = {\n      amdBase: './',\n      amdLanguageBase: './i18n/',\n      closeOnSelect: true,\n      debug: false,\n      dropdownAutoWidth: false,\n      escapeMarkup: Utils.escapeMarkup,\n      language: {},\n      matcher: matcher,\n      minimumInputLength: 0,\n      maximumInputLength: 0,\n      maximumSelectionLength: 0,\n      minimumResultsForSearch: 0,\n      selectOnClose: false,\n      scrollAfterSelect: false,\n      sorter: function (data) {\n        return data;\n      },\n      templateResult: function (result) {\n        return result.text;\n      },\n      templateSelection: function (selection) {\n        return selection.text;\n      },\n      theme: 'default',\n      width: 'resolve'\n    };\n  };\n\n  Defaults.prototype.applyFromElement = function (options, $element) {\n    var optionLanguage = options.language;\n    var defaultLanguage = this.defaults.language;\n    var elementLanguage = $element.prop('lang');\n    var parentLanguage = $element.closest('[lang]').prop('lang');\n\n    var languages = Array.prototype.concat.call(\n      this._resolveLanguage(elementLanguage),\n      this._resolveLanguage(optionLanguage),\n      this._resolveLanguage(defaultLanguage),\n      this._resolveLanguage(parentLanguage)\n    );\n\n    options.language = languages;\n\n    return options;\n  };\n\n  Defaults.prototype._resolveLanguage = function (language) {\n    if (!language) {\n      return [];\n    }\n\n    if ($.isEmptyObject(language)) {\n      return [];\n    }\n\n    if ($.isPlainObject(language)) {\n      return [language];\n    }\n\n    var languages;\n\n    if (!$.isArray(language)) {\n      languages = [language];\n    } else {\n      languages = language;\n    }\n\n    var resolvedLanguages = [];\n\n    for (var l = 0; l < languages.length; l++) {\n      resolvedLanguages.push(languages[l]);\n\n      if (typeof languages[l] === 'string' && languages[l].indexOf('-') > 0) {\n        // Extract the region information if it is included\n        var languageParts = languages[l].split('-');\n        var baseLanguage = languageParts[0];\n\n        resolvedLanguages.push(baseLanguage);\n      }\n    }\n\n    return resolvedLanguages;\n  };\n\n  Defaults.prototype._processTranslations = function (languages, debug) {\n    var translations = new Translation();\n\n    for (var l = 0; l < languages.length; l++) {\n      var languageData = new Translation();\n\n      var language = languages[l];\n\n      if (typeof language === 'string') {\n        try {\n          // Try to load it with the original name\n          languageData = Translation.loadPath(language);\n        } catch (e) {\n          try {\n            // If we couldn't load it, check if it wasn't the full path\n            language = this.defaults.amdLanguageBase + language;\n            languageData = Translation.loadPath(language);\n          } catch (ex) {\n            // The translation could not be loaded at all. Sometimes this is\n            // because of a configuration problem, other times this can be\n            // because of how Select2 helps load all possible translation files\n            if (debug && window.console && console.warn) {\n              console.warn(\n                'Select2: The language file for \"' + language + '\" could ' +\n                'not be automatically loaded. A fallback will be used instead.'\n              );\n            }\n          }\n        }\n      } else if ($.isPlainObject(language)) {\n        languageData = new Translation(language);\n      } else {\n        languageData = language;\n      }\n\n      translations.extend(languageData);\n    }\n\n    return translations;\n  };\n\n  Defaults.prototype.set = function (key, value) {\n    var camelKey = $.camelCase(key);\n\n    var data = {};\n    data[camelKey] = value;\n\n    var convertedData = Utils._convertData(data);\n\n    $.extend(true, this.defaults, convertedData);\n  };\n\n  var defaults = new Defaults();\n\n  return defaults;\n});\n\nS2.define('select2/options',[\n  'require',\n  'jquery',\n  './defaults',\n  './utils'\n], function (require, $, Defaults, Utils) {\n  function Options (options, $element) {\n    this.options = options;\n\n    if ($element != null) {\n      this.fromElement($element);\n    }\n\n    if ($element != null) {\n      this.options = Defaults.applyFromElement(this.options, $element);\n    }\n\n    this.options = Defaults.apply(this.options);\n\n    if ($element && $element.is('input')) {\n      var InputCompat = require(this.get('amdBase') + 'compat/inputData');\n\n      this.options.dataAdapter = Utils.Decorate(\n        this.options.dataAdapter,\n        InputCompat\n      );\n    }\n  }\n\n  Options.prototype.fromElement = function ($e) {\n    var excludedData = ['select2'];\n\n    if (this.options.multiple == null) {\n      this.options.multiple = $e.prop('multiple');\n    }\n\n    if (this.options.disabled == null) {\n      this.options.disabled = $e.prop('disabled');\n    }\n\n    if (this.options.dir == null) {\n      if ($e.prop('dir')) {\n        this.options.dir = $e.prop('dir');\n      } else if ($e.closest('[dir]').prop('dir')) {\n        this.options.dir = $e.closest('[dir]').prop('dir');\n      } else {\n        this.options.dir = 'ltr';\n      }\n    }\n\n    $e.prop('disabled', this.options.disabled);\n    $e.prop('multiple', this.options.multiple);\n\n    if (Utils.GetData($e[0], 'select2Tags')) {\n      if (this.options.debug && window.console && console.warn) {\n        console.warn(\n          'Select2: The `data-select2-tags` attribute has been changed to ' +\n          'use the `data-data` and `data-tags=\"true\"` attributes and will be ' +\n          'removed in future versions of Select2.'\n        );\n      }\n\n      Utils.StoreData($e[0], 'data', Utils.GetData($e[0], 'select2Tags'));\n      Utils.StoreData($e[0], 'tags', true);\n    }\n\n    if (Utils.GetData($e[0], 'ajaxUrl')) {\n      if (this.options.debug && window.console && console.warn) {\n        console.warn(\n          'Select2: The `data-ajax-url` attribute has been changed to ' +\n          '`data-ajax--url` and support for the old attribute will be removed' +\n          ' in future versions of Select2.'\n        );\n      }\n\n      $e.attr('ajax--url', Utils.GetData($e[0], 'ajaxUrl'));\n      Utils.StoreData($e[0], 'ajax-Url', Utils.GetData($e[0], 'ajaxUrl'));\n    }\n\n    var dataset = {};\n\n    function upperCaseLetter(_, letter) {\n      return letter.toUpperCase();\n    }\n\n    // Pre-load all of the attributes which are prefixed with `data-`\n    for (var attr = 0; attr < $e[0].attributes.length; attr++) {\n      var attributeName = $e[0].attributes[attr].name;\n      var prefix = 'data-';\n\n      if (attributeName.substr(0, prefix.length) == prefix) {\n        // Get the contents of the attribute after `data-`\n        var dataName = attributeName.substring(prefix.length);\n\n        // Get the data contents from the consistent source\n        // This is more than likely the jQuery data helper\n        var dataValue = Utils.GetData($e[0], dataName);\n\n        // camelCase the attribute name to match the spec\n        var camelDataName = dataName.replace(/-([a-z])/g, upperCaseLetter);\n\n        // Store the data attribute contents into the dataset since\n        dataset[camelDataName] = dataValue;\n      }\n    }\n\n    // Prefer the element's `dataset` attribute if it exists\n    // jQuery 1.x does not correctly handle data attributes with multiple dashes\n    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {\n      dataset = $.extend(true, {}, $e[0].dataset, dataset);\n    }\n\n    // Prefer our internal data cache if it exists\n    var data = $.extend(true, {}, Utils.GetData($e[0]), dataset);\n\n    data = Utils._convertData(data);\n\n    for (var key in data) {\n      if ($.inArray(key, excludedData) > -1) {\n        continue;\n      }\n\n      if ($.isPlainObject(this.options[key])) {\n        $.extend(this.options[key], data[key]);\n      } else {\n        this.options[key] = data[key];\n      }\n    }\n\n    return this;\n  };\n\n  Options.prototype.get = function (key) {\n    return this.options[key];\n  };\n\n  Options.prototype.set = function (key, val) {\n    this.options[key] = val;\n  };\n\n  return Options;\n});\n\nS2.define('select2/core',[\n  'jquery',\n  './options',\n  './utils',\n  './keys'\n], function ($, Options, Utils, KEYS) {\n  var Select2 = function ($element, options) {\n    if (Utils.GetData($element[0], 'select2') != null) {\n      Utils.GetData($element[0], 'select2').destroy();\n    }\n\n    this.$element = $element;\n\n    this.id = this._generateId($element);\n\n    options = options || {};\n\n    this.options = new Options(options, $element);\n\n    Select2.__super__.constructor.call(this);\n\n    // Set up the tabindex\n\n    var tabindex = $element.attr('tabindex') || 0;\n    Utils.StoreData($element[0], 'old-tabindex', tabindex);\n    $element.attr('tabindex', '-1');\n\n    // Set up containers and adapters\n\n    var DataAdapter = this.options.get('dataAdapter');\n    this.dataAdapter = new DataAdapter($element, this.options);\n\n    var $container = this.render();\n\n    this._placeContainer($container);\n\n    var SelectionAdapter = this.options.get('selectionAdapter');\n    this.selection = new SelectionAdapter($element, this.options);\n    this.$selection = this.selection.render();\n\n    this.selection.position(this.$selection, $container);\n\n    var DropdownAdapter = this.options.get('dropdownAdapter');\n    this.dropdown = new DropdownAdapter($element, this.options);\n    this.$dropdown = this.dropdown.render();\n\n    this.dropdown.position(this.$dropdown, $container);\n\n    var ResultsAdapter = this.options.get('resultsAdapter');\n    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);\n    this.$results = this.results.render();\n\n    this.results.position(this.$results, this.$dropdown);\n\n    // Bind events\n\n    var self = this;\n\n    // Bind the container to all of the adapters\n    this._bindAdapters();\n\n    // Register any DOM event handlers\n    this._registerDomEvents();\n\n    // Register any internal event handlers\n    this._registerDataEvents();\n    this._registerSelectionEvents();\n    this._registerDropdownEvents();\n    this._registerResultsEvents();\n    this._registerEvents();\n\n    // Set the initial state\n    this.dataAdapter.current(function (initialData) {\n      self.trigger('selection:update', {\n        data: initialData\n      });\n    });\n\n    // Hide the original select\n    $element.addClass('select2-hidden-accessible');\n    $element.attr('aria-hidden', 'true');\n\n    // Synchronize any monitored attributes\n    this._syncAttributes();\n\n    Utils.StoreData($element[0], 'select2', this);\n\n    // Ensure backwards compatibility with $element.data('select2').\n    $element.data('select2', this);\n  };\n\n  Utils.Extend(Select2, Utils.Observable);\n\n  Select2.prototype._generateId = function ($element) {\n    var id = '';\n\n    if ($element.attr('id') != null) {\n      id = $element.attr('id');\n    } else if ($element.attr('name') != null) {\n      id = $element.attr('name') + '-' + Utils.generateChars(2);\n    } else {\n      id = Utils.generateChars(4);\n    }\n\n    id = id.replace(/(:|\\.|\\[|\\]|,)/g, '');\n    id = 'select2-' + id;\n\n    return id;\n  };\n\n  Select2.prototype._placeContainer = function ($container) {\n    $container.insertAfter(this.$element);\n\n    var width = this._resolveWidth(this.$element, this.options.get('width'));\n\n    if (width != null) {\n      $container.css('width', width);\n    }\n  };\n\n  Select2.prototype._resolveWidth = function ($element, method) {\n    var WIDTH = /^width:(([-+]?([0-9]*\\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;\n\n    if (method == 'resolve') {\n      var styleWidth = this._resolveWidth($element, 'style');\n\n      if (styleWidth != null) {\n        return styleWidth;\n      }\n\n      return this._resolveWidth($element, 'element');\n    }\n\n    if (method == 'element') {\n      var elementWidth = $element.outerWidth(false);\n\n      if (elementWidth <= 0) {\n        return 'auto';\n      }\n\n      return elementWidth + 'px';\n    }\n\n    if (method == 'style') {\n      var style = $element.attr('style');\n\n      if (typeof(style) !== 'string') {\n        return null;\n      }\n\n      var attrs = style.split(';');\n\n      for (var i = 0, l = attrs.length; i < l; i = i + 1) {\n        var attr = attrs[i].replace(/\\s/g, '');\n        var matches = attr.match(WIDTH);\n\n        if (matches !== null && matches.length >= 1) {\n          return matches[1];\n        }\n      }\n\n      return null;\n    }\n\n    if (method == 'computedstyle') {\n      var computedStyle = window.getComputedStyle($element[0]);\n\n      return computedStyle.width;\n    }\n\n    return method;\n  };\n\n  Select2.prototype._bindAdapters = function () {\n    this.dataAdapter.bind(this, this.$container);\n    this.selection.bind(this, this.$container);\n\n    this.dropdown.bind(this, this.$container);\n    this.results.bind(this, this.$container);\n  };\n\n  Select2.prototype._registerDomEvents = function () {\n    var self = this;\n\n    this.$element.on('change.select2', function () {\n      self.dataAdapter.current(function (data) {\n        self.trigger('selection:update', {\n          data: data\n        });\n      });\n    });\n\n    this.$element.on('focus.select2', function (evt) {\n      self.trigger('focus', evt);\n    });\n\n    this._syncA = Utils.bind(this._syncAttributes, this);\n    this._syncS = Utils.bind(this._syncSubtree, this);\n\n    if (this.$element[0].attachEvent) {\n      this.$element[0].attachEvent('onpropertychange', this._syncA);\n    }\n\n    var observer = window.MutationObserver ||\n      window.WebKitMutationObserver ||\n      window.MozMutationObserver\n    ;\n\n    if (observer != null) {\n      this._observer = new observer(function (mutations) {\n        self._syncA();\n        self._syncS(null, mutations);\n      });\n      this._observer.observe(this.$element[0], {\n        attributes: true,\n        childList: true,\n        subtree: false\n      });\n    } else if (this.$element[0].addEventListener) {\n      this.$element[0].addEventListener(\n        'DOMAttrModified',\n        self._syncA,\n        false\n      );\n      this.$element[0].addEventListener(\n        'DOMNodeInserted',\n        self._syncS,\n        false\n      );\n      this.$element[0].addEventListener(\n        'DOMNodeRemoved',\n        self._syncS,\n        false\n      );\n    }\n  };\n\n  Select2.prototype._registerDataEvents = function () {\n    var self = this;\n\n    this.dataAdapter.on('*', function (name, params) {\n      self.trigger(name, params);\n    });\n  };\n\n  Select2.prototype._registerSelectionEvents = function () {\n    var self = this;\n    var nonRelayEvents = ['toggle', 'focus'];\n\n    this.selection.on('toggle', function () {\n      self.toggleDropdown();\n    });\n\n    this.selection.on('focus', function (params) {\n      self.focus(params);\n    });\n\n    this.selection.on('*', function (name, params) {\n      if ($.inArray(name, nonRelayEvents) !== -1) {\n        return;\n      }\n\n      self.trigger(name, params);\n    });\n  };\n\n  Select2.prototype._registerDropdownEvents = function () {\n    var self = this;\n\n    this.dropdown.on('*', function (name, params) {\n      self.trigger(name, params);\n    });\n  };\n\n  Select2.prototype._registerResultsEvents = function () {\n    var self = this;\n\n    this.results.on('*', function (name, params) {\n      self.trigger(name, params);\n    });\n  };\n\n  Select2.prototype._registerEvents = function () {\n    var self = this;\n\n    this.on('open', function () {\n      self.$container.addClass('select2-container--open');\n    });\n\n    this.on('close', function () {\n      self.$container.removeClass('select2-container--open');\n    });\n\n    this.on('enable', function () {\n      self.$container.removeClass('select2-container--disabled');\n    });\n\n    this.on('disable', function () {\n      self.$container.addClass('select2-container--disabled');\n    });\n\n    this.on('blur', function () {\n      self.$container.removeClass('select2-container--focus');\n    });\n\n    this.on('query', function (params) {\n      if (!self.isOpen()) {\n        self.trigger('open', {});\n      }\n\n      this.dataAdapter.query(params, function (data) {\n        self.trigger('results:all', {\n          data: data,\n          query: params\n        });\n      });\n    });\n\n    this.on('query:append', function (params) {\n      this.dataAdapter.query(params, function (data) {\n        self.trigger('results:append', {\n          data: data,\n          query: params\n        });\n      });\n    });\n\n    this.on('keypress', function (evt) {\n      var key = evt.which;\n\n      if (self.isOpen()) {\n        if (key === KEYS.ESC || key === KEYS.TAB ||\n            (key === KEYS.UP && evt.altKey)) {\n          self.close(evt);\n\n          evt.preventDefault();\n        } else if (key === KEYS.ENTER) {\n          self.trigger('results:select', {});\n\n          evt.preventDefault();\n        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {\n          self.trigger('results:toggle', {});\n\n          evt.preventDefault();\n        } else if (key === KEYS.UP) {\n          self.trigger('results:previous', {});\n\n          evt.preventDefault();\n        } else if (key === KEYS.DOWN) {\n          self.trigger('results:next', {});\n\n          evt.preventDefault();\n        }\n      } else {\n        if (key === KEYS.ENTER || key === KEYS.SPACE ||\n            (key === KEYS.DOWN && evt.altKey)) {\n          self.open();\n\n          evt.preventDefault();\n        }\n      }\n    });\n  };\n\n  Select2.prototype._syncAttributes = function () {\n    this.options.set('disabled', this.$element.prop('disabled'));\n\n    if (this.isDisabled()) {\n      if (this.isOpen()) {\n        this.close();\n      }\n\n      this.trigger('disable', {});\n    } else {\n      this.trigger('enable', {});\n    }\n  };\n\n  Select2.prototype._isChangeMutation = function (evt, mutations) {\n    var changed = false;\n    var self = this;\n\n    // Ignore any mutation events raised for elements that aren't options or\n    // optgroups. This handles the case when the select element is destroyed\n    if (\n      evt && evt.target && (\n        evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'\n      )\n    ) {\n      return;\n    }\n\n    if (!mutations) {\n      // If mutation events aren't supported, then we can only assume that the\n      // change affected the selections\n      changed = true;\n    } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {\n      for (var n = 0; n < mutations.addedNodes.length; n++) {\n        var node = mutations.addedNodes[n];\n\n        if (node.selected) {\n          changed = true;\n        }\n      }\n    } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {\n      changed = true;\n    } else if ($.isArray(mutations)) {\n      $.each(mutations, function(evt, mutation) {\n        if (self._isChangeMutation(evt, mutation)) {\n          // We've found a change mutation.\n          // Let's escape from the loop and continue\n          changed = true;\n          return false;\n        }\n      });\n    }\n    return changed;\n  };\n\n  Select2.prototype._syncSubtree = function (evt, mutations) {\n    var changed = this._isChangeMutation(evt, mutations);\n    var self = this;\n\n    // Only re-pull the data if we think there is a change\n    if (changed) {\n      this.dataAdapter.current(function (currentData) {\n        self.trigger('selection:update', {\n          data: currentData\n        });\n      });\n    }\n  };\n\n  /**\n   * Override the trigger method to automatically trigger pre-events when\n   * there are events that can be prevented.\n   */\n  Select2.prototype.trigger = function (name, args) {\n    var actualTrigger = Select2.__super__.trigger;\n    var preTriggerMap = {\n      'open': 'opening',\n      'close': 'closing',\n      'select': 'selecting',\n      'unselect': 'unselecting',\n      'clear': 'clearing'\n    };\n\n    if (args === undefined) {\n      args = {};\n    }\n\n    if (name in preTriggerMap) {\n      var preTriggerName = preTriggerMap[name];\n      var preTriggerArgs = {\n        prevented: false,\n        name: name,\n        args: args\n      };\n\n      actualTrigger.call(this, preTriggerName, preTriggerArgs);\n\n      if (preTriggerArgs.prevented) {\n        args.prevented = true;\n\n        return;\n      }\n    }\n\n    actualTrigger.call(this, name, args);\n  };\n\n  Select2.prototype.toggleDropdown = function () {\n    if (this.isDisabled()) {\n      return;\n    }\n\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  };\n\n  Select2.prototype.open = function () {\n    if (this.isOpen()) {\n      return;\n    }\n\n    if (this.isDisabled()) {\n      return;\n    }\n\n    this.trigger('query', {});\n  };\n\n  Select2.prototype.close = function (evt) {\n    if (!this.isOpen()) {\n      return;\n    }\n\n    this.trigger('close', { originalEvent : evt });\n  };\n\n  /**\n   * Helper method to abstract the \"enabled\" (not \"disabled\") state of this\n   * object.\n   *\n   * @return {true} if the instance is not disabled.\n   * @return {false} if the instance is disabled.\n   */\n  Select2.prototype.isEnabled = function () {\n    return !this.isDisabled();\n  };\n\n  /**\n   * Helper method to abstract the \"disabled\" state of this object.\n   *\n   * @return {true} if the disabled option is true.\n   * @return {false} if the disabled option is false.\n   */\n  Select2.prototype.isDisabled = function () {\n    return this.options.get('disabled');\n  };\n\n  Select2.prototype.isOpen = function () {\n    return this.$container.hasClass('select2-container--open');\n  };\n\n  Select2.prototype.hasFocus = function () {\n    return this.$container.hasClass('select2-container--focus');\n  };\n\n  Select2.prototype.focus = function (data) {\n    // No need to re-trigger focus events if we are already focused\n    if (this.hasFocus()) {\n      return;\n    }\n\n    this.$container.addClass('select2-container--focus');\n    this.trigger('focus', {});\n  };\n\n  Select2.prototype.enable = function (args) {\n    if (this.options.get('debug') && window.console && console.warn) {\n      console.warn(\n        'Select2: The `select2(\"enable\")` method has been deprecated and will' +\n        ' be removed in later Select2 versions. Use $element.prop(\"disabled\")' +\n        ' instead.'\n      );\n    }\n\n    if (args == null || args.length === 0) {\n      args = [true];\n    }\n\n    var disabled = !args[0];\n\n    this.$element.prop('disabled', disabled);\n  };\n\n  Select2.prototype.data = function () {\n    if (this.options.get('debug') &&\n        arguments.length > 0 && window.console && console.warn) {\n      console.warn(\n        'Select2: Data can no longer be set using `select2(\"data\")`. You ' +\n        'should consider setting the value instead using `$element.val()`.'\n      );\n    }\n\n    var data = [];\n\n    this.dataAdapter.current(function (currentData) {\n      data = currentData;\n    });\n\n    return data;\n  };\n\n  Select2.prototype.val = function (args) {\n    if (this.options.get('debug') && window.console && console.warn) {\n      console.warn(\n        'Select2: The `select2(\"val\")` method has been deprecated and will be' +\n        ' removed in later Select2 versions. Use $element.val() instead.'\n      );\n    }\n\n    if (args == null || args.length === 0) {\n      return this.$element.val();\n    }\n\n    var newVal = args[0];\n\n    if ($.isArray(newVal)) {\n      newVal = $.map(newVal, function (obj) {\n        return obj.toString();\n      });\n    }\n\n    this.$element.val(newVal).trigger('input').trigger('change');\n  };\n\n  Select2.prototype.destroy = function () {\n    this.$container.remove();\n\n    if (this.$element[0].detachEvent) {\n      this.$element[0].detachEvent('onpropertychange', this._syncA);\n    }\n\n    if (this._observer != null) {\n      this._observer.disconnect();\n      this._observer = null;\n    } else if (this.$element[0].removeEventListener) {\n      this.$element[0]\n        .removeEventListener('DOMAttrModified', this._syncA, false);\n      this.$element[0]\n        .removeEventListener('DOMNodeInserted', this._syncS, false);\n      this.$element[0]\n        .removeEventListener('DOMNodeRemoved', this._syncS, false);\n    }\n\n    this._syncA = null;\n    this._syncS = null;\n\n    this.$element.off('.select2');\n    this.$element.attr('tabindex',\n    Utils.GetData(this.$element[0], 'old-tabindex'));\n\n    this.$element.removeClass('select2-hidden-accessible');\n    this.$element.attr('aria-hidden', 'false');\n    Utils.RemoveData(this.$element[0]);\n    this.$element.removeData('select2');\n\n    this.dataAdapter.destroy();\n    this.selection.destroy();\n    this.dropdown.destroy();\n    this.results.destroy();\n\n    this.dataAdapter = null;\n    this.selection = null;\n    this.dropdown = null;\n    this.results = null;\n  };\n\n  Select2.prototype.render = function () {\n    var $container = $(\n      '<span class=\"select2 select2-container\">' +\n        '<span class=\"selection\"></span>' +\n        '<span class=\"dropdown-wrapper\" aria-hidden=\"true\"></span>' +\n      '</span>'\n    );\n\n    $container.attr('dir', this.options.get('dir'));\n\n    this.$container = $container;\n\n    this.$container.addClass('select2-container--' + this.options.get('theme'));\n\n    Utils.StoreData($container[0], 'element', this.$element);\n\n    return $container;\n  };\n\n  return Select2;\n});\n\nS2.define('select2/compat/utils',[\n  'jquery'\n], function ($) {\n  function syncCssClasses ($dest, $src, adapter) {\n    var classes, replacements = [], adapted;\n\n    classes = $.trim($dest.attr('class'));\n\n    if (classes) {\n      classes = '' + classes; // for IE which returns object\n\n      $(classes.split(/\\s+/)).each(function () {\n        // Save all Select2 classes\n        if (this.indexOf('select2-') === 0) {\n          replacements.push(this);\n        }\n      });\n    }\n\n    classes = $.trim($src.attr('class'));\n\n    if (classes) {\n      classes = '' + classes; // for IE which returns object\n\n      $(classes.split(/\\s+/)).each(function () {\n        // Only adapt non-Select2 classes\n        if (this.indexOf('select2-') !== 0) {\n          adapted = adapter(this);\n\n          if (adapted != null) {\n            replacements.push(adapted);\n          }\n        }\n      });\n    }\n\n    $dest.attr('class', replacements.join(' '));\n  }\n\n  return {\n    syncCssClasses: syncCssClasses\n  };\n});\n\nS2.define('select2/compat/containerCss',[\n  'jquery',\n  './utils'\n], function ($, CompatUtils) {\n  // No-op CSS adapter that discards all classes by default\n  function _containerAdapter (clazz) {\n    return null;\n  }\n\n  function ContainerCSS () { }\n\n  ContainerCSS.prototype.render = function (decorated) {\n    var $container = decorated.call(this);\n\n    var containerCssClass = this.options.get('containerCssClass') || '';\n\n    if ($.isFunction(containerCssClass)) {\n      containerCssClass = containerCssClass(this.$element);\n    }\n\n    var containerCssAdapter = this.options.get('adaptContainerCssClass');\n    containerCssAdapter = containerCssAdapter || _containerAdapter;\n\n    if (containerCssClass.indexOf(':all:') !== -1) {\n      containerCssClass = containerCssClass.replace(':all:', '');\n\n      var _cssAdapter = containerCssAdapter;\n\n      containerCssAdapter = function (clazz) {\n        var adapted = _cssAdapter(clazz);\n\n        if (adapted != null) {\n          // Append the old one along with the adapted one\n          return adapted + ' ' + clazz;\n        }\n\n        return clazz;\n      };\n    }\n\n    var containerCss = this.options.get('containerCss') || {};\n\n    if ($.isFunction(containerCss)) {\n      containerCss = containerCss(this.$element);\n    }\n\n    CompatUtils.syncCssClasses($container, this.$element, containerCssAdapter);\n\n    $container.css(containerCss);\n    $container.addClass(containerCssClass);\n\n    return $container;\n  };\n\n  return ContainerCSS;\n});\n\nS2.define('select2/compat/dropdownCss',[\n  'jquery',\n  './utils'\n], function ($, CompatUtils) {\n  // No-op CSS adapter that discards all classes by default\n  function _dropdownAdapter (clazz) {\n    return null;\n  }\n\n  function DropdownCSS () { }\n\n  DropdownCSS.prototype.render = function (decorated) {\n    var $dropdown = decorated.call(this);\n\n    var dropdownCssClass = this.options.get('dropdownCssClass') || '';\n\n    if ($.isFunction(dropdownCssClass)) {\n      dropdownCssClass = dropdownCssClass(this.$element);\n    }\n\n    var dropdownCssAdapter = this.options.get('adaptDropdownCssClass');\n    dropdownCssAdapter = dropdownCssAdapter || _dropdownAdapter;\n\n    if (dropdownCssClass.indexOf(':all:') !== -1) {\n      dropdownCssClass = dropdownCssClass.replace(':all:', '');\n\n      var _cssAdapter = dropdownCssAdapter;\n\n      dropdownCssAdapter = function (clazz) {\n        var adapted = _cssAdapter(clazz);\n\n        if (adapted != null) {\n          // Append the old one along with the adapted one\n          return adapted + ' ' + clazz;\n        }\n\n        return clazz;\n      };\n    }\n\n    var dropdownCss = this.options.get('dropdownCss') || {};\n\n    if ($.isFunction(dropdownCss)) {\n      dropdownCss = dropdownCss(this.$element);\n    }\n\n    CompatUtils.syncCssClasses($dropdown, this.$element, dropdownCssAdapter);\n\n    $dropdown.css(dropdownCss);\n    $dropdown.addClass(dropdownCssClass);\n\n    return $dropdown;\n  };\n\n  return DropdownCSS;\n});\n\nS2.define('select2/compat/initSelection',[\n  'jquery'\n], function ($) {\n  function InitSelection (decorated, $element, options) {\n    if (options.get('debug') && window.console && console.warn) {\n      console.warn(\n        'Select2: The `initSelection` option has been deprecated in favor' +\n        ' of a custom data adapter that overrides the `current` method. ' +\n        'This method is now called multiple times instead of a single ' +\n        'time when the instance is initialized. Support will be removed ' +\n        'for the `initSelection` option in future versions of Select2'\n      );\n    }\n\n    this.initSelection = options.get('initSelection');\n    this._isInitialized = false;\n\n    decorated.call(this, $element, options);\n  }\n\n  InitSelection.prototype.current = function (decorated, callback) {\n    var self = this;\n\n    if (this._isInitialized) {\n      decorated.call(this, callback);\n\n      return;\n    }\n\n    this.initSelection.call(null, this.$element, function (data) {\n      self._isInitialized = true;\n\n      if (!$.isArray(data)) {\n        data = [data];\n      }\n\n      callback(data);\n    });\n  };\n\n  return InitSelection;\n});\n\nS2.define('select2/compat/inputData',[\n  'jquery',\n  '../utils'\n], function ($, Utils) {\n  function InputData (decorated, $element, options) {\n    this._currentData = [];\n    this._valueSeparator = options.get('valueSeparator') || ',';\n\n    if ($element.prop('type') === 'hidden') {\n      if (options.get('debug') && console && console.warn) {\n        console.warn(\n          'Select2: Using a hidden input with Select2 is no longer ' +\n          'supported and may stop working in the future. It is recommended ' +\n          'to use a `<select>` element instead.'\n        );\n      }\n    }\n\n    decorated.call(this, $element, options);\n  }\n\n  InputData.prototype.current = function (_, callback) {\n    function getSelected (data, selectedIds) {\n      var selected = [];\n\n      if (data.selected || $.inArray(data.id, selectedIds) !== -1) {\n        data.selected = true;\n        selected.push(data);\n      } else {\n        data.selected = false;\n      }\n\n      if (data.children) {\n        selected.push.apply(selected, getSelected(data.children, selectedIds));\n      }\n\n      return selected;\n    }\n\n    var selected = [];\n\n    for (var d = 0; d < this._currentData.length; d++) {\n      var data = this._currentData[d];\n\n      selected.push.apply(\n        selected,\n        getSelected(\n          data,\n          this.$element.val().split(\n            this._valueSeparator\n          )\n        )\n      );\n    }\n\n    callback(selected);\n  };\n\n  InputData.prototype.select = function (_, data) {\n    if (!this.options.get('multiple')) {\n      this.current(function (allData) {\n        $.map(allData, function (data) {\n          data.selected = false;\n        });\n      });\n\n      this.$element.val(data.id);\n      this.$element.trigger('input').trigger('change');\n    } else {\n      var value = this.$element.val();\n      value += this._valueSeparator + data.id;\n\n      this.$element.val(value);\n      this.$element.trigger('input').trigger('change');\n    }\n  };\n\n  InputData.prototype.unselect = function (_, data) {\n    var self = this;\n\n    data.selected = false;\n\n    this.current(function (allData) {\n      var values = [];\n\n      for (var d = 0; d < allData.length; d++) {\n        var item = allData[d];\n\n        if (data.id == item.id) {\n          continue;\n        }\n\n        values.push(item.id);\n      }\n\n      self.$element.val(values.join(self._valueSeparator));\n      self.$element.trigger('input').trigger('change');\n    });\n  };\n\n  InputData.prototype.query = function (_, params, callback) {\n    var results = [];\n\n    for (var d = 0; d < this._currentData.length; d++) {\n      var data = this._currentData[d];\n\n      var matches = this.matches(params, data);\n\n      if (matches !== null) {\n        results.push(matches);\n      }\n    }\n\n    callback({\n      results: results\n    });\n  };\n\n  InputData.prototype.addOptions = function (_, $options) {\n    var options = $.map($options, function ($option) {\n      return Utils.GetData($option[0], 'data');\n    });\n\n    this._currentData.push.apply(this._currentData, options);\n  };\n\n  return InputData;\n});\n\nS2.define('select2/compat/matcher',[\n  'jquery'\n], function ($) {\n  function oldMatcher (matcher) {\n    function wrappedMatcher (params, data) {\n      var match = $.extend(true, {}, data);\n\n      if (params.term == null || $.trim(params.term) === '') {\n        return match;\n      }\n\n      if (data.children) {\n        for (var c = data.children.length - 1; c >= 0; c--) {\n          var child = data.children[c];\n\n          // Check if the child object matches\n          // The old matcher returned a boolean true or false\n          var doesMatch = matcher(params.term, child.text, child);\n\n          // If the child didn't match, pop it off\n          if (!doesMatch) {\n            match.children.splice(c, 1);\n          }\n        }\n\n        if (match.children.length > 0) {\n          return match;\n        }\n      }\n\n      if (matcher(params.term, data.text, data)) {\n        return match;\n      }\n\n      return null;\n    }\n\n    return wrappedMatcher;\n  }\n\n  return oldMatcher;\n});\n\nS2.define('select2/compat/query',[\n\n], function () {\n  function Query (decorated, $element, options) {\n    if (options.get('debug') && window.console && console.warn) {\n      console.warn(\n        'Select2: The `query` option has been deprecated in favor of a ' +\n        'custom data adapter that overrides the `query` method. Support ' +\n        'will be removed for the `query` option in future versions of ' +\n        'Select2.'\n      );\n    }\n\n    decorated.call(this, $element, options);\n  }\n\n  Query.prototype.query = function (_, params, callback) {\n    params.callback = callback;\n\n    var query = this.options.get('query');\n\n    query.call(null, params);\n  };\n\n  return Query;\n});\n\nS2.define('select2/dropdown/attachContainer',[\n\n], function () {\n  function AttachContainer (decorated, $element, options) {\n    decorated.call(this, $element, options);\n  }\n\n  AttachContainer.prototype.position =\n    function (decorated, $dropdown, $container) {\n    var $dropdownContainer = $container.find('.dropdown-wrapper');\n    $dropdownContainer.append($dropdown);\n\n    $dropdown.addClass('select2-dropdown--below');\n    $container.addClass('select2-container--below');\n  };\n\n  return AttachContainer;\n});\n\nS2.define('select2/dropdown/stopPropagation',[\n\n], function () {\n  function StopPropagation () { }\n\n  StopPropagation.prototype.bind = function (decorated, container, $container) {\n    decorated.call(this, container, $container);\n\n    var stoppedEvents = [\n    'blur',\n    'change',\n    'click',\n    'dblclick',\n    'focus',\n    'focusin',\n    'focusout',\n    'input',\n    'keydown',\n    'keyup',\n    'keypress',\n    'mousedown',\n    'mouseenter',\n    'mouseleave',\n    'mousemove',\n    'mouseover',\n    'mouseup',\n    'search',\n    'touchend',\n    'touchstart'\n    ];\n\n    this.$dropdown.on(stoppedEvents.join(' '), function (evt) {\n      evt.stopPropagation();\n    });\n  };\n\n  return StopPropagation;\n});\n\nS2.define('select2/selection/stopPropagation',[\n\n], function () {\n  function StopPropagation () { }\n\n  StopPropagation.prototype.bind = function (decorated, container, $container) {\n    decorated.call(this, container, $container);\n\n    var stoppedEvents = [\n      'blur',\n      'change',\n      'click',\n      'dblclick',\n      'focus',\n      'focusin',\n      'focusout',\n      'input',\n      'keydown',\n      'keyup',\n      'keypress',\n      'mousedown',\n      'mouseenter',\n      'mouseleave',\n      'mousemove',\n      'mouseover',\n      'mouseup',\n      'search',\n      'touchend',\n      'touchstart'\n    ];\n\n    this.$selection.on(stoppedEvents.join(' '), function (evt) {\n      evt.stopPropagation();\n    });\n  };\n\n  return StopPropagation;\n});\n\n/*!\n * jQuery Mousewheel 3.1.13\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n */\n\n(function (factory) {\n    if ( typeof S2.define === 'function' && S2.define.amd ) {\n        // AMD. Register as an anonymous module.\n        S2.define('jquery-mousewheel',['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS style for Browserify\n        module.exports = factory;\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n\n    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],\n        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?\n                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],\n        slice  = Array.prototype.slice,\n        nullLowestDeltaTimeout, lowestDelta;\n\n    if ( $.event.fixHooks ) {\n        for ( var i = toFix.length; i; ) {\n            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;\n        }\n    }\n\n    var special = $.event.special.mousewheel = {\n        version: '3.1.12',\n\n        setup: function() {\n            if ( this.addEventListener ) {\n                for ( var i = toBind.length; i; ) {\n                    this.addEventListener( toBind[--i], handler, false );\n                }\n            } else {\n                this.onmousewheel = handler;\n            }\n            // Store the line height and page height for this particular element\n            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));\n            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));\n        },\n\n        teardown: function() {\n            if ( this.removeEventListener ) {\n                for ( var i = toBind.length; i; ) {\n                    this.removeEventListener( toBind[--i], handler, false );\n                }\n            } else {\n                this.onmousewheel = null;\n            }\n            // Clean up the data we added to the element\n            $.removeData(this, 'mousewheel-line-height');\n            $.removeData(this, 'mousewheel-page-height');\n        },\n\n        getLineHeight: function(elem) {\n            var $elem = $(elem),\n                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();\n            if (!$parent.length) {\n                $parent = $('body');\n            }\n            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;\n        },\n\n        getPageHeight: function(elem) {\n            return $(elem).height();\n        },\n\n        settings: {\n            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below\n            normalizeOffset: true  // calls getBoundingClientRect for each event\n        }\n    };\n\n    $.fn.extend({\n        mousewheel: function(fn) {\n            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');\n        },\n\n        unmousewheel: function(fn) {\n            return this.unbind('mousewheel', fn);\n        }\n    });\n\n\n    function handler(event) {\n        var orgEvent   = event || window.event,\n            args       = slice.call(arguments, 1),\n            delta      = 0,\n            deltaX     = 0,\n            deltaY     = 0,\n            absDelta   = 0,\n            offsetX    = 0,\n            offsetY    = 0;\n        event = $.event.fix(orgEvent);\n        event.type = 'mousewheel';\n\n        // Old school scrollwheel delta\n        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }\n        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }\n        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }\n        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }\n\n        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event\n        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {\n            deltaX = deltaY * -1;\n            deltaY = 0;\n        }\n\n        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy\n        delta = deltaY === 0 ? deltaX : deltaY;\n\n        // New school wheel delta (wheel event)\n        if ( 'deltaY' in orgEvent ) {\n            deltaY = orgEvent.deltaY * -1;\n            delta  = deltaY;\n        }\n        if ( 'deltaX' in orgEvent ) {\n            deltaX = orgEvent.deltaX;\n            if ( deltaY === 0 ) { delta  = deltaX * -1; }\n        }\n\n        // No change actually happened, no reason to go any further\n        if ( deltaY === 0 && deltaX === 0 ) { return; }\n\n        // Need to convert lines and pages to pixels if we aren't already in pixels\n        // There are three delta modes:\n        //   * deltaMode 0 is by pixels, nothing to do\n        //   * deltaMode 1 is by lines\n        //   * deltaMode 2 is by pages\n        if ( orgEvent.deltaMode === 1 ) {\n            var lineHeight = $.data(this, 'mousewheel-line-height');\n            delta  *= lineHeight;\n            deltaY *= lineHeight;\n            deltaX *= lineHeight;\n        } else if ( orgEvent.deltaMode === 2 ) {\n            var pageHeight = $.data(this, 'mousewheel-page-height');\n            delta  *= pageHeight;\n            deltaY *= pageHeight;\n            deltaX *= pageHeight;\n        }\n\n        // Store lowest absolute delta to normalize the delta values\n        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );\n\n        if ( !lowestDelta || absDelta < lowestDelta ) {\n            lowestDelta = absDelta;\n\n            // Adjust older deltas if necessary\n            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {\n                lowestDelta /= 40;\n            }\n        }\n\n        // Adjust older deltas if necessary\n        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {\n            // Divide all the things by 40!\n            delta  /= 40;\n            deltaX /= 40;\n            deltaY /= 40;\n        }\n\n        // Get a whole, normalized value for the deltas\n        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);\n        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);\n        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);\n\n        // Normalise offsetX and offsetY properties\n        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {\n            var boundingRect = this.getBoundingClientRect();\n            offsetX = event.clientX - boundingRect.left;\n            offsetY = event.clientY - boundingRect.top;\n        }\n\n        // Add information to the event object\n        event.deltaX = deltaX;\n        event.deltaY = deltaY;\n        event.deltaFactor = lowestDelta;\n        event.offsetX = offsetX;\n        event.offsetY = offsetY;\n        // Go ahead and set deltaMode to 0 since we converted to pixels\n        // Although this is a little odd since we overwrite the deltaX/Y\n        // properties with normalized deltas.\n        event.deltaMode = 0;\n\n        // Add event and delta to the front of the arguments\n        args.unshift(event, delta, deltaX, deltaY);\n\n        // Clearout lowestDelta after sometime to better\n        // handle multiple device types that give different\n        // a different lowestDelta\n        // Ex: trackpad = 3 and mouse wheel = 120\n        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }\n        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);\n\n        return ($.event.dispatch || $.event.handle).apply(this, args);\n    }\n\n    function nullLowestDelta() {\n        lowestDelta = null;\n    }\n\n    function shouldAdjustOldDeltas(orgEvent, absDelta) {\n        // If this is an older event and the delta is divisable by 120,\n        // then we are assuming that the browser is treating this as an\n        // older mouse wheel event and that we should divide the deltas\n        // by 40 to try and get a more usable deltaFactor.\n        // Side note, this actually impacts the reported scroll distance\n        // in older browsers and can cause scrolling to be slower than native.\n        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.\n        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;\n    }\n\n}));\n\nS2.define('jquery.select2',[\n  'jquery',\n  'jquery-mousewheel',\n\n  './select2/core',\n  './select2/defaults',\n  './select2/utils'\n], function ($, _, Select2, Defaults, Utils) {\n  if ($.fn.select2 == null) {\n    // All methods that should return the element\n    var thisMethods = ['open', 'close', 'destroy'];\n\n    $.fn.select2 = function (options) {\n      options = options || {};\n\n      if (typeof options === 'object') {\n        this.each(function () {\n          var instanceOptions = $.extend(true, {}, options);\n\n          var instance = new Select2($(this), instanceOptions);\n        });\n\n        return this;\n      } else if (typeof options === 'string') {\n        var ret;\n        var args = Array.prototype.slice.call(arguments, 1);\n\n        this.each(function () {\n          var instance = Utils.GetData(this, 'select2');\n\n          if (instance == null && window.console && console.error) {\n            console.error(\n              'The select2(\\'' + options + '\\') method was called on an ' +\n              'element that is not using Select2.'\n            );\n          }\n\n          ret = instance[options].apply(instance, args);\n        });\n\n        // Check if we should be returning `this`\n        if ($.inArray(options, thisMethods) > -1) {\n          return this;\n        }\n\n        return ret;\n      } else {\n        throw new Error('Invalid arguments for Select2: ' + options);\n      }\n    };\n  }\n\n  if ($.fn.select2.defaults == null) {\n    $.fn.select2.defaults = Defaults;\n  }\n\n  return Select2;\n});\n\n  // Return the AMD loader configuration so it can be used outside of this file\n  return {\n    define: S2.define,\n    require: S2.require\n  };\n}());\n\n  // Autoload the jQuery bindings\n  // We know that all of the modules exist above this, so we're safe\n  var select2 = S2.require('jquery.select2');\n\n  // Hold the AMD module references on the jQuery function that was just loaded\n  // This allows Select2 to use the internal loader outside of this file, such\n  // as in the language files.\n  jQuery.fn.select2.amd = S2;\n\n  // Return the Select2 instance for anyone who is importing it.\n  return select2;\n}));\n"

/***/ }),

/***/ "./node_modules/script-loader/addScript.js":
/*!*************************************************!*\
  !*** ./node_modules/script-loader/addScript.js ***!
  \*************************************************/
/***/ (function(module) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(src) {
	function log(error) {
		(typeof console !== "undefined")
		&& (console.error || console.log)("[Script Loader]", error);
	}

	// Check for IE =< 8
	function isIE() {
		return typeof attachEvent !== "undefined" && typeof addEventListener === "undefined";
	}

	try {
		if (typeof execScript !== "undefined" && isIE()) {
			execScript(src);
		} else if (typeof eval !== "undefined") {
			eval.call(null, src);
		} else {
			log("EvalError: No eval function available");
		}
	} catch (error) {
		log(error);
	}
}


/***/ }),

/***/ "./node_modules/select2/dist/js/select2.full.js":
/*!******************************************************!*\
  !*** ./node_modules/select2/dist/js/select2.full.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

__webpack_require__(/*! !!./node_modules/script-loader/addScript.js */ "./node_modules/script-loader/addScript.js")(__webpack_require__(/*! !!./node_modules/raw-loader/index.js!./node_modules/select2/dist/js/select2.full.js */ "./node_modules/raw-loader/index.js!./node_modules/select2/dist/js/select2.full.js"))

/***/ }),

/***/ "./src/js/_components/_select2.js":
/*!****************************************!*\
  !*** ./src/js/_components/_select2.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var nodeModules_select2_dist_js_select2_full_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nodeModules/select2/dist/js/select2.full.js */ "./node_modules/select2/dist/js/select2.full.js");
/* harmony import */ var nodeModules_select2_dist_js_select2_full_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nodeModules_select2_dist_js_select2_full_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/*!**************************************!*\
  !*** ./src/entries/entry-select2.js ***!
  \**************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _scss_components_select2_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/_components/_select2.scss */ "./src/scss/_components/_select2.scss");
/* harmony import */ var _js_components_select2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../js/_components/_select2.js */ "./src/js/_components/_select2.js");
// Styles


// Scripts

}();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXhRO1VBQ0E7O1VBRUE7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7Ozs7O1dDdEJBO1dBQ0E7V0FDQTtXQUNBLGVBQWUsNEJBQTRCO1dBQzNDLGVBQWU7V0FDZixpQ0FBaUMsV0FBVztXQUM1QztXQUNBOzs7OztXQ1BBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EseUNBQXlDLHdDQUF3QztXQUNqRjtXQUNBO1dBQ0E7Ozs7O1dDUEEsOENBQThDOzs7OztXQ0E5QztXQUNBO1dBQ0E7V0FDQSx1REFBdUQsaUJBQWlCO1dBQ3hFO1dBQ0EsZ0RBQWdELGFBQWE7V0FDN0Q7Ozs7Ozs7Ozs7Ozs7O0FDTkE7QUFDMkM7O0FBRTNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVzc2lhLy4vc3JjL3Njc3MvX2NvbXBvbmVudHMvX3NlbGVjdDIuc2Nzcz80ZDJhIiwid2VicGFjazovL21lc3NpYS8uL25vZGVfbW9kdWxlcy9zZWxlY3QyL2Rpc3QvanMvc2VsZWN0Mi5mdWxsLmpzIiwid2VicGFjazovL21lc3NpYS8uL25vZGVfbW9kdWxlcy9zY3JpcHQtbG9hZGVyL2FkZFNjcmlwdC5qcyIsIndlYnBhY2s6Ly9tZXNzaWEvLi9ub2RlX21vZHVsZXMvc2VsZWN0Mi9kaXN0L2pzL3NlbGVjdDIuZnVsbC5qcz82NGVjIiwid2VicGFjazovL21lc3NpYS8uL3NyYy9qcy9fY29tcG9uZW50cy9fc2VsZWN0Mi5qcyIsIndlYnBhY2s6Ly9tZXNzaWEvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbWVzc2lhL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL21lc3NpYS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbWVzc2lhL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbWVzc2lhL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbWVzc2lhLy4vc3JjL2VudHJpZXMvZW50cnktc2VsZWN0Mi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiLyohXFxuICogU2VsZWN0MiA0LjAuMTNcXG4gKiBodHRwczovL3NlbGVjdDIuZ2l0aHViLmlvXFxuICpcXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcXG4gKiBodHRwczovL2dpdGh1Yi5jb20vc2VsZWN0Mi9zZWxlY3QyL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcXG4gKi9cXG47KGZ1bmN0aW9uIChmYWN0b3J5KSB7XFxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XFxuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cXG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xcbiAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xcbiAgICAvLyBOb2RlL0NvbW1vbkpTXFxuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJvb3QsIGpRdWVyeSkge1xcbiAgICAgIGlmIChqUXVlcnkgPT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgLy8gcmVxdWlyZSgnalF1ZXJ5JykgcmV0dXJucyBhIGZhY3RvcnkgdGhhdCByZXF1aXJlcyB3aW5kb3cgdG9cXG4gICAgICAgIC8vIGJ1aWxkIGEgalF1ZXJ5IGluc3RhbmNlLCB3ZSBub3JtYWxpemUgaG93IHdlIHVzZSBtb2R1bGVzXFxuICAgICAgICAvLyB0aGF0IHJlcXVpcmUgdGhpcyBwYXR0ZXJuIGJ1dCB0aGUgd2luZG93IHByb3ZpZGVkIGlzIGEgbm9vcFxcbiAgICAgICAgLy8gaWYgaXQncyBkZWZpbmVkIChob3cganF1ZXJ5IHdvcmtzKVxcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XFxuICAgICAgICAgIGpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xcbiAgICAgICAgfVxcbiAgICAgICAgZWxzZSB7XFxuICAgICAgICAgIGpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpKHJvb3QpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgICBmYWN0b3J5KGpRdWVyeSk7XFxuICAgICAgcmV0dXJuIGpRdWVyeTtcXG4gICAgfTtcXG4gIH0gZWxzZSB7XFxuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xcbiAgICBmYWN0b3J5KGpRdWVyeSk7XFxuICB9XFxufSAoZnVuY3Rpb24gKGpRdWVyeSkge1xcbiAgLy8gVGhpcyBpcyBuZWVkZWQgc28gd2UgY2FuIGNhdGNoIHRoZSBBTUQgbG9hZGVyIGNvbmZpZ3VyYXRpb24gYW5kIHVzZSBpdFxcbiAgLy8gVGhlIGlubmVyIGZpbGUgc2hvdWxkIGJlIHdyYXBwZWQgKGJ5IGBiYW5uZXIuc3RhcnQuanNgKSBpbiBhIGZ1bmN0aW9uIHRoYXRcXG4gIC8vIHJldHVybnMgdGhlIEFNRCBsb2FkZXIgcmVmZXJlbmNlcy5cXG4gIHZhciBTMiA9KGZ1bmN0aW9uICgpIHtcXG4gIC8vIFJlc3RvcmUgdGhlIFNlbGVjdDIgQU1EIGxvYWRlciBzbyBpdCBjYW4gYmUgdXNlZFxcbiAgLy8gTmVlZGVkIG1vc3RseSBpbiB0aGUgbGFuZ3VhZ2UgZmlsZXMsIHdoZXJlIHRoZSBsb2FkZXIgaXMgbm90IGluc2VydGVkXFxuICBpZiAoalF1ZXJ5ICYmIGpRdWVyeS5mbiAmJiBqUXVlcnkuZm4uc2VsZWN0MiAmJiBqUXVlcnkuZm4uc2VsZWN0Mi5hbWQpIHtcXG4gICAgdmFyIFMyID0galF1ZXJ5LmZuLnNlbGVjdDIuYW1kO1xcbiAgfVxcbnZhciBTMjsoZnVuY3Rpb24gKCkgeyBpZiAoIVMyIHx8ICFTMi5yZXF1aXJlanMpIHtcXG5pZiAoIVMyKSB7IFMyID0ge307IH0gZWxzZSB7IHJlcXVpcmUgPSBTMjsgfVxcbi8qKlxcbiAqIEBsaWNlbnNlIGFsbW9uZCAwLjMuMyBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycy5cXG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSwgaHR0cDovL2dpdGh1Yi5jb20vcmVxdWlyZWpzL2FsbW9uZC9MSUNFTlNFXFxuICovXFxuLy9Hb2luZyBzbG9wcHkgdG8gYXZvaWQgJ3VzZSBzdHJpY3QnIHN0cmluZyBjb3N0LCBidXQgc3RyaWN0IHByYWN0aWNlcyBzaG91bGRcXG4vL2JlIGZvbGxvd2VkLlxcbi8qZ2xvYmFsIHNldFRpbWVvdXQ6IGZhbHNlICovXFxuXFxudmFyIHJlcXVpcmVqcywgcmVxdWlyZSwgZGVmaW5lO1xcbihmdW5jdGlvbiAodW5kZWYpIHtcXG4gICAgdmFyIG1haW4sIHJlcSwgbWFrZU1hcCwgaGFuZGxlcnMsXFxuICAgICAgICBkZWZpbmVkID0ge30sXFxuICAgICAgICB3YWl0aW5nID0ge30sXFxuICAgICAgICBjb25maWcgPSB7fSxcXG4gICAgICAgIGRlZmluaW5nID0ge30sXFxuICAgICAgICBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxcbiAgICAgICAgYXBzID0gW10uc2xpY2UsXFxuICAgICAgICBqc1N1ZmZpeFJlZ0V4cCA9IC9cXFxcLmpzJC87XFxuXFxuICAgIGZ1bmN0aW9uIGhhc1Byb3Aob2JqLCBwcm9wKSB7XFxuICAgICAgICByZXR1cm4gaGFzT3duLmNhbGwob2JqLCBwcm9wKTtcXG4gICAgfVxcblxcbiAgICAvKipcXG4gICAgICogR2l2ZW4gYSByZWxhdGl2ZSBtb2R1bGUgbmFtZSwgbGlrZSAuL3NvbWV0aGluZywgbm9ybWFsaXplIGl0IHRvXFxuICAgICAqIGEgcmVhbCBuYW1lIHRoYXQgY2FuIGJlIG1hcHBlZCB0byBhIHBhdGguXFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIHRoZSByZWxhdGl2ZSBuYW1lXFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlTmFtZSBhIHJlYWwgbmFtZSB0aGF0IHRoZSBuYW1lIGFyZyBpcyByZWxhdGl2ZVxcbiAgICAgKiB0by5cXG4gICAgICogQHJldHVybnMge1N0cmluZ30gbm9ybWFsaXplZCBuYW1lXFxuICAgICAqL1xcbiAgICBmdW5jdGlvbiBub3JtYWxpemUobmFtZSwgYmFzZU5hbWUpIHtcXG4gICAgICAgIHZhciBuYW1lUGFydHMsIG5hbWVTZWdtZW50LCBtYXBWYWx1ZSwgZm91bmRNYXAsIGxhc3RJbmRleCxcXG4gICAgICAgICAgICBmb3VuZEksIGZvdW5kU3Rhck1hcCwgc3RhckksIGksIGosIHBhcnQsIG5vcm1hbGl6ZWRCYXNlUGFydHMsXFxuICAgICAgICAgICAgYmFzZVBhcnRzID0gYmFzZU5hbWUgJiYgYmFzZU5hbWUuc3BsaXQoXFxcIi9cXFwiKSxcXG4gICAgICAgICAgICBtYXAgPSBjb25maWcubWFwLFxcbiAgICAgICAgICAgIHN0YXJNYXAgPSAobWFwICYmIG1hcFsnKiddKSB8fCB7fTtcXG5cXG4gICAgICAgIC8vQWRqdXN0IGFueSByZWxhdGl2ZSBwYXRocy5cXG4gICAgICAgIGlmIChuYW1lKSB7XFxuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc3BsaXQoJy8nKTtcXG4gICAgICAgICAgICBsYXN0SW5kZXggPSBuYW1lLmxlbmd0aCAtIDE7XFxuXFxuICAgICAgICAgICAgLy8gSWYgd2FudGluZyBub2RlIElEIGNvbXBhdGliaWxpdHksIHN0cmlwIC5qcyBmcm9tIGVuZFxcbiAgICAgICAgICAgIC8vIG9mIElEcy4gSGF2ZSB0byBkbyB0aGlzIGhlcmUsIGFuZCBub3QgaW4gbmFtZVRvVXJsXFxuICAgICAgICAgICAgLy8gYmVjYXVzZSBub2RlIGFsbG93cyBlaXRoZXIgLmpzIG9yIG5vbiAuanMgdG8gbWFwXFxuICAgICAgICAgICAgLy8gdG8gc2FtZSBmaWxlLlxcbiAgICAgICAgICAgIGlmIChjb25maWcubm9kZUlkQ29tcGF0ICYmIGpzU3VmZml4UmVnRXhwLnRlc3QobmFtZVtsYXN0SW5kZXhdKSkge1xcbiAgICAgICAgICAgICAgICBuYW1lW2xhc3RJbmRleF0gPSBuYW1lW2xhc3RJbmRleF0ucmVwbGFjZShqc1N1ZmZpeFJlZ0V4cCwgJycpO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAvLyBTdGFydHMgd2l0aCBhICcuJyBzbyBuZWVkIHRoZSBiYXNlTmFtZVxcbiAgICAgICAgICAgIGlmIChuYW1lWzBdLmNoYXJBdCgwKSA9PT0gJy4nICYmIGJhc2VQYXJ0cykge1xcbiAgICAgICAgICAgICAgICAvL0NvbnZlcnQgYmFzZU5hbWUgdG8gYXJyYXksIGFuZCBsb3Agb2ZmIHRoZSBsYXN0IHBhcnQsXFxuICAgICAgICAgICAgICAgIC8vc28gdGhhdCAuIG1hdGNoZXMgdGhhdCAnZGlyZWN0b3J5JyBhbmQgbm90IG5hbWUgb2YgdGhlIGJhc2VOYW1lJ3NcXG4gICAgICAgICAgICAgICAgLy9tb2R1bGUuIEZvciBpbnN0YW5jZSwgYmFzZU5hbWUgb2YgJ29uZS90d28vdGhyZWUnLCBtYXBzIHRvXFxuICAgICAgICAgICAgICAgIC8vJ29uZS90d28vdGhyZWUuanMnLCBidXQgd2Ugd2FudCB0aGUgZGlyZWN0b3J5LCAnb25lL3R3bycgZm9yXFxuICAgICAgICAgICAgICAgIC8vdGhpcyBub3JtYWxpemF0aW9uLlxcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkQmFzZVBhcnRzID0gYmFzZVBhcnRzLnNsaWNlKDAsIGJhc2VQYXJ0cy5sZW5ndGggLSAxKTtcXG4gICAgICAgICAgICAgICAgbmFtZSA9IG5vcm1hbGl6ZWRCYXNlUGFydHMuY29uY2F0KG5hbWUpO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAvL3N0YXJ0IHRyaW1Eb3RzXFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgcGFydCA9IG5hbWVbaV07XFxuICAgICAgICAgICAgICAgIGlmIChwYXJ0ID09PSAnLicpIHtcXG4gICAgICAgICAgICAgICAgICAgIG5hbWUuc3BsaWNlKGksIDEpO1xcbiAgICAgICAgICAgICAgICAgICAgaSAtPSAxO1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGF0IHRoZSBzdGFydCwgb3IgcHJldmlvdXMgdmFsdWUgaXMgc3RpbGwgLi4sXFxuICAgICAgICAgICAgICAgICAgICAvLyBrZWVwIHRoZW0gc28gdGhhdCB3aGVuIGNvbnZlcnRlZCB0byBhIHBhdGggaXQgbWF5XFxuICAgICAgICAgICAgICAgICAgICAvLyBzdGlsbCB3b3JrIHdoZW4gY29udmVydGVkIHRvIGEgcGF0aCwgZXZlbiB0aG91Z2hcXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzIGFuIElEIGl0IGlzIGxlc3MgdGhhbiBpZGVhbC4gSW4gbGFyZ2VyIHBvaW50XFxuICAgICAgICAgICAgICAgICAgICAvLyByZWxlYXNlcywgbWF5IGJlIGJldHRlciB0byBqdXN0IGtpY2sgb3V0IGFuIGVycm9yLlxcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDAgfHwgKGkgPT09IDEgJiYgbmFtZVsyXSA9PT0gJy4uJykgfHwgbmFtZVtpIC0gMV0gPT09ICcuLicpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA+IDApIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lLnNwbGljZShpIC0gMSwgMik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaSAtPSAyO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIC8vZW5kIHRyaW1Eb3RzXFxuXFxuICAgICAgICAgICAgbmFtZSA9IG5hbWUuam9pbignLycpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy9BcHBseSBtYXAgY29uZmlnIGlmIGF2YWlsYWJsZS5cXG4gICAgICAgIGlmICgoYmFzZVBhcnRzIHx8IHN0YXJNYXApICYmIG1hcCkge1xcbiAgICAgICAgICAgIG5hbWVQYXJ0cyA9IG5hbWUuc3BsaXQoJy8nKTtcXG5cXG4gICAgICAgICAgICBmb3IgKGkgPSBuYW1lUGFydHMubGVuZ3RoOyBpID4gMDsgaSAtPSAxKSB7XFxuICAgICAgICAgICAgICAgIG5hbWVTZWdtZW50ID0gbmFtZVBhcnRzLnNsaWNlKDAsIGkpLmpvaW4oXFxcIi9cXFwiKTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKGJhc2VQYXJ0cykge1xcbiAgICAgICAgICAgICAgICAgICAgLy9GaW5kIHRoZSBsb25nZXN0IGJhc2VOYW1lIHNlZ21lbnQgbWF0Y2ggaW4gdGhlIGNvbmZpZy5cXG4gICAgICAgICAgICAgICAgICAgIC8vU28sIGRvIGpvaW5zIG9uIHRoZSBiaWdnZXN0IHRvIHNtYWxsZXN0IGxlbmd0aHMgb2YgYmFzZVBhcnRzLlxcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gYmFzZVBhcnRzLmxlbmd0aDsgaiA+IDA7IGogLT0gMSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcFZhbHVlID0gbWFwW2Jhc2VQYXJ0cy5zbGljZSgwLCBqKS5qb2luKCcvJyldO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYmFzZU5hbWUgc2VnbWVudCBoYXMgIGNvbmZpZywgZmluZCBpZiBpdCBoYXMgb25lIGZvclxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcyBuYW1lLlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXBWYWx1ZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBWYWx1ZSA9IG1hcFZhbHVlW25hbWVTZWdtZW50XTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcFZhbHVlKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL01hdGNoLCB1cGRhdGUgbmFtZSB0byB0aGUgbmV3IHZhbHVlLlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRNYXAgPSBtYXBWYWx1ZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kSSA9IGk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRNYXApIHtcXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIC8vQ2hlY2sgZm9yIGEgc3RhciBtYXAgbWF0Y2gsIGJ1dCBqdXN0IGhvbGQgb24gdG8gaXQsXFxuICAgICAgICAgICAgICAgIC8vaWYgdGhlcmUgaXMgYSBzaG9ydGVyIHNlZ21lbnQgbWF0Y2ggbGF0ZXIgaW4gYSBtYXRjaGluZ1xcbiAgICAgICAgICAgICAgICAvL2NvbmZpZywgdGhlbiBmYXZvciBvdmVyIHRoaXMgc3RhciBtYXAuXFxuICAgICAgICAgICAgICAgIGlmICghZm91bmRTdGFyTWFwICYmIHN0YXJNYXAgJiYgc3Rhck1hcFtuYW1lU2VnbWVudF0pIHtcXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kU3Rhck1hcCA9IHN0YXJNYXBbbmFtZVNlZ21lbnRdO1xcbiAgICAgICAgICAgICAgICAgICAgc3RhckkgPSBpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGlmICghZm91bmRNYXAgJiYgZm91bmRTdGFyTWFwKSB7XFxuICAgICAgICAgICAgICAgIGZvdW5kTWFwID0gZm91bmRTdGFyTWFwO1xcbiAgICAgICAgICAgICAgICBmb3VuZEkgPSBzdGFySTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgaWYgKGZvdW5kTWFwKSB7XFxuICAgICAgICAgICAgICAgIG5hbWVQYXJ0cy5zcGxpY2UoMCwgZm91bmRJLCBmb3VuZE1hcCk7XFxuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lUGFydHMuam9pbignLycpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiBuYW1lO1xcbiAgICB9XFxuXFxuICAgIGZ1bmN0aW9uIG1ha2VSZXF1aXJlKHJlbE5hbWUsIGZvcmNlU3luYykge1xcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICAvL0EgdmVyc2lvbiBvZiBhIHJlcXVpcmUgZnVuY3Rpb24gdGhhdCBwYXNzZXMgYSBtb2R1bGVOYW1lXFxuICAgICAgICAgICAgLy92YWx1ZSBmb3IgaXRlbXMgdGhhdCBtYXkgbmVlZCB0b1xcbiAgICAgICAgICAgIC8vbG9vayB1cCBwYXRocyByZWxhdGl2ZSB0byB0aGUgbW9kdWxlTmFtZVxcbiAgICAgICAgICAgIHZhciBhcmdzID0gYXBzLmNhbGwoYXJndW1lbnRzLCAwKTtcXG5cXG4gICAgICAgICAgICAvL0lmIGZpcnN0IGFyZyBpcyBub3QgcmVxdWlyZSgnc3RyaW5nJyksIGFuZCB0aGVyZSBpcyBvbmx5XFxuICAgICAgICAgICAgLy9vbmUgYXJnLCBpdCBpcyB0aGUgYXJyYXkgZm9ybSB3aXRob3V0IGEgY2FsbGJhY2suIEluc2VydFxcbiAgICAgICAgICAgIC8vYSBudWxsIHNvIHRoYXQgdGhlIGZvbGxvd2luZyBjb25jYXQgaXMgY29ycmVjdC5cXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnICYmIGFyZ3MubGVuZ3RoID09PSAxKSB7XFxuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChudWxsKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIHJlcS5hcHBseSh1bmRlZiwgYXJncy5jb25jYXQoW3JlbE5hbWUsIGZvcmNlU3luY10pKTtcXG4gICAgICAgIH07XFxuICAgIH1cXG5cXG4gICAgZnVuY3Rpb24gbWFrZU5vcm1hbGl6ZShyZWxOYW1lKSB7XFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5hbWUpIHtcXG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplKG5hbWUsIHJlbE5hbWUpO1xcbiAgICAgICAgfTtcXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiBtYWtlTG9hZChkZXBOYW1lKSB7XFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XFxuICAgICAgICAgICAgZGVmaW5lZFtkZXBOYW1lXSA9IHZhbHVlO1xcbiAgICAgICAgfTtcXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiBjYWxsRGVwKG5hbWUpIHtcXG4gICAgICAgIGlmIChoYXNQcm9wKHdhaXRpbmcsIG5hbWUpKSB7XFxuICAgICAgICAgICAgdmFyIGFyZ3MgPSB3YWl0aW5nW25hbWVdO1xcbiAgICAgICAgICAgIGRlbGV0ZSB3YWl0aW5nW25hbWVdO1xcbiAgICAgICAgICAgIGRlZmluaW5nW25hbWVdID0gdHJ1ZTtcXG4gICAgICAgICAgICBtYWluLmFwcGx5KHVuZGVmLCBhcmdzKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmICghaGFzUHJvcChkZWZpbmVkLCBuYW1lKSAmJiAhaGFzUHJvcChkZWZpbmluZywgbmFtZSkpIHtcXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vICcgKyBuYW1lKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBkZWZpbmVkW25hbWVdO1xcbiAgICB9XFxuXFxuICAgIC8vVHVybnMgYSBwbHVnaW4hcmVzb3VyY2UgdG8gW3BsdWdpbiwgcmVzb3VyY2VdXFxuICAgIC8vd2l0aCB0aGUgcGx1Z2luIGJlaW5nIHVuZGVmaW5lZCBpZiB0aGUgbmFtZVxcbiAgICAvL2RpZCBub3QgaGF2ZSBhIHBsdWdpbiBwcmVmaXguXFxuICAgIGZ1bmN0aW9uIHNwbGl0UHJlZml4KG5hbWUpIHtcXG4gICAgICAgIHZhciBwcmVmaXgsXFxuICAgICAgICAgICAgaW5kZXggPSBuYW1lID8gbmFtZS5pbmRleE9mKCchJykgOiAtMTtcXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XFxuICAgICAgICAgICAgcHJlZml4ID0gbmFtZS5zdWJzdHJpbmcoMCwgaW5kZXgpO1xcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cmluZyhpbmRleCArIDEsIG5hbWUubGVuZ3RoKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBbcHJlZml4LCBuYW1lXTtcXG4gICAgfVxcblxcbiAgICAvL0NyZWF0ZXMgYSBwYXJ0cyBhcnJheSBmb3IgYSByZWxOYW1lIHdoZXJlIGZpcnN0IHBhcnQgaXMgcGx1Z2luIElELFxcbiAgICAvL3NlY29uZCBwYXJ0IGlzIHJlc291cmNlIElELiBBc3N1bWVzIHJlbE5hbWUgaGFzIGFscmVhZHkgYmVlbiBub3JtYWxpemVkLlxcbiAgICBmdW5jdGlvbiBtYWtlUmVsUGFydHMocmVsTmFtZSkge1xcbiAgICAgICAgcmV0dXJuIHJlbE5hbWUgPyBzcGxpdFByZWZpeChyZWxOYW1lKSA6IFtdO1xcbiAgICB9XFxuXFxuICAgIC8qKlxcbiAgICAgKiBNYWtlcyBhIG5hbWUgbWFwLCBub3JtYWxpemluZyB0aGUgbmFtZSwgYW5kIHVzaW5nIGEgcGx1Z2luXFxuICAgICAqIGZvciBub3JtYWxpemF0aW9uIGlmIG5lY2Vzc2FyeS4gR3JhYnMgYSByZWYgdG8gcGx1Z2luXFxuICAgICAqIHRvbywgYXMgYW4gb3B0aW1pemF0aW9uLlxcbiAgICAgKi9cXG4gICAgbWFrZU1hcCA9IGZ1bmN0aW9uIChuYW1lLCByZWxQYXJ0cykge1xcbiAgICAgICAgdmFyIHBsdWdpbixcXG4gICAgICAgICAgICBwYXJ0cyA9IHNwbGl0UHJlZml4KG5hbWUpLFxcbiAgICAgICAgICAgIHByZWZpeCA9IHBhcnRzWzBdLFxcbiAgICAgICAgICAgIHJlbFJlc291cmNlTmFtZSA9IHJlbFBhcnRzWzFdO1xcblxcbiAgICAgICAgbmFtZSA9IHBhcnRzWzFdO1xcblxcbiAgICAgICAgaWYgKHByZWZpeCkge1xcbiAgICAgICAgICAgIHByZWZpeCA9IG5vcm1hbGl6ZShwcmVmaXgsIHJlbFJlc291cmNlTmFtZSk7XFxuICAgICAgICAgICAgcGx1Z2luID0gY2FsbERlcChwcmVmaXgpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy9Ob3JtYWxpemUgYWNjb3JkaW5nXFxuICAgICAgICBpZiAocHJlZml4KSB7XFxuICAgICAgICAgICAgaWYgKHBsdWdpbiAmJiBwbHVnaW4ubm9ybWFsaXplKSB7XFxuICAgICAgICAgICAgICAgIG5hbWUgPSBwbHVnaW4ubm9ybWFsaXplKG5hbWUsIG1ha2VOb3JtYWxpemUocmVsUmVzb3VyY2VOYW1lKSk7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgbmFtZSA9IG5vcm1hbGl6ZShuYW1lLCByZWxSZXNvdXJjZU5hbWUpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgbmFtZSA9IG5vcm1hbGl6ZShuYW1lLCByZWxSZXNvdXJjZU5hbWUpO1xcbiAgICAgICAgICAgIHBhcnRzID0gc3BsaXRQcmVmaXgobmFtZSk7XFxuICAgICAgICAgICAgcHJlZml4ID0gcGFydHNbMF07XFxuICAgICAgICAgICAgbmFtZSA9IHBhcnRzWzFdO1xcbiAgICAgICAgICAgIGlmIChwcmVmaXgpIHtcXG4gICAgICAgICAgICAgICAgcGx1Z2luID0gY2FsbERlcChwcmVmaXgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC8vVXNpbmcgcmlkaWN1bG91cyBwcm9wZXJ0eSBuYW1lcyBmb3Igc3BhY2UgcmVhc29uc1xcbiAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICBmOiBwcmVmaXggPyBwcmVmaXggKyAnIScgKyBuYW1lIDogbmFtZSwgLy9mdWxsTmFtZVxcbiAgICAgICAgICAgIG46IG5hbWUsXFxuICAgICAgICAgICAgcHI6IHByZWZpeCxcXG4gICAgICAgICAgICBwOiBwbHVnaW5cXG4gICAgICAgIH07XFxuICAgIH07XFxuXFxuICAgIGZ1bmN0aW9uIG1ha2VDb25maWcobmFtZSkge1xcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgICByZXR1cm4gKGNvbmZpZyAmJiBjb25maWcuY29uZmlnICYmIGNvbmZpZy5jb25maWdbbmFtZV0pIHx8IHt9O1xcbiAgICAgICAgfTtcXG4gICAgfVxcblxcbiAgICBoYW5kbGVycyA9IHtcXG4gICAgICAgIHJlcXVpcmU6IGZ1bmN0aW9uIChuYW1lKSB7XFxuICAgICAgICAgICAgcmV0dXJuIG1ha2VSZXF1aXJlKG5hbWUpO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGV4cG9ydHM6IGZ1bmN0aW9uIChuYW1lKSB7XFxuICAgICAgICAgICAgdmFyIGUgPSBkZWZpbmVkW25hbWVdO1xcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZSAhPT0gJ3VuZGVmaW5lZCcpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIChkZWZpbmVkW25hbWVdID0ge30pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sXFxuICAgICAgICBtb2R1bGU6IGZ1bmN0aW9uIChuYW1lKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgaWQ6IG5hbWUsXFxuICAgICAgICAgICAgICAgIHVyaTogJycsXFxuICAgICAgICAgICAgICAgIGV4cG9ydHM6IGRlZmluZWRbbmFtZV0sXFxuICAgICAgICAgICAgICAgIGNvbmZpZzogbWFrZUNvbmZpZyhuYW1lKVxcbiAgICAgICAgICAgIH07XFxuICAgICAgICB9XFxuICAgIH07XFxuXFxuICAgIG1haW4gPSBmdW5jdGlvbiAobmFtZSwgZGVwcywgY2FsbGJhY2ssIHJlbE5hbWUpIHtcXG4gICAgICAgIHZhciBjanNNb2R1bGUsIGRlcE5hbWUsIHJldCwgbWFwLCBpLCByZWxQYXJ0cyxcXG4gICAgICAgICAgICBhcmdzID0gW10sXFxuICAgICAgICAgICAgY2FsbGJhY2tUeXBlID0gdHlwZW9mIGNhbGxiYWNrLFxcbiAgICAgICAgICAgIHVzaW5nRXhwb3J0cztcXG5cXG4gICAgICAgIC8vVXNlIG5hbWUgaWYgbm8gcmVsTmFtZVxcbiAgICAgICAgcmVsTmFtZSA9IHJlbE5hbWUgfHwgbmFtZTtcXG4gICAgICAgIHJlbFBhcnRzID0gbWFrZVJlbFBhcnRzKHJlbE5hbWUpO1xcblxcbiAgICAgICAgLy9DYWxsIHRoZSBjYWxsYmFjayB0byBkZWZpbmUgdGhlIG1vZHVsZSwgaWYgbmVjZXNzYXJ5LlxcbiAgICAgICAgaWYgKGNhbGxiYWNrVHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHwgY2FsbGJhY2tUeXBlID09PSAnZnVuY3Rpb24nKSB7XFxuICAgICAgICAgICAgLy9QdWxsIG91dCB0aGUgZGVmaW5lZCBkZXBlbmRlbmNpZXMgYW5kIHBhc3MgdGhlIG9yZGVyZWRcXG4gICAgICAgICAgICAvL3ZhbHVlcyB0byB0aGUgY2FsbGJhY2suXFxuICAgICAgICAgICAgLy9EZWZhdWx0IHRvIFtyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGVdIGlmIG5vIGRlcHNcXG4gICAgICAgICAgICBkZXBzID0gIWRlcHMubGVuZ3RoICYmIGNhbGxiYWNrLmxlbmd0aCA/IFsncmVxdWlyZScsICdleHBvcnRzJywgJ21vZHVsZSddIDogZGVwcztcXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkgKz0gMSkge1xcbiAgICAgICAgICAgICAgICBtYXAgPSBtYWtlTWFwKGRlcHNbaV0sIHJlbFBhcnRzKTtcXG4gICAgICAgICAgICAgICAgZGVwTmFtZSA9IG1hcC5mO1xcblxcbiAgICAgICAgICAgICAgICAvL0Zhc3QgcGF0aCBDb21tb25KUyBzdGFuZGFyZCBkZXBlbmRlbmNpZXMuXFxuICAgICAgICAgICAgICAgIGlmIChkZXBOYW1lID09PSBcXFwicmVxdWlyZVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBoYW5kbGVycy5yZXF1aXJlKG5hbWUpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRlcE5hbWUgPT09IFxcXCJleHBvcnRzXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgLy9Db21tb25KUyBtb2R1bGUgc3BlYyAxLjFcXG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSBoYW5kbGVycy5leHBvcnRzKG5hbWUpO1xcbiAgICAgICAgICAgICAgICAgICAgdXNpbmdFeHBvcnRzID0gdHJ1ZTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZXBOYW1lID09PSBcXFwibW9kdWxlXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgLy9Db21tb25KUyBtb2R1bGUgc3BlYyAxLjFcXG4gICAgICAgICAgICAgICAgICAgIGNqc01vZHVsZSA9IGFyZ3NbaV0gPSBoYW5kbGVycy5tb2R1bGUobmFtZSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzUHJvcChkZWZpbmVkLCBkZXBOYW1lKSB8fFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1Byb3Aod2FpdGluZywgZGVwTmFtZSkgfHxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNQcm9wKGRlZmluaW5nLCBkZXBOYW1lKSkge1xcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSA9IGNhbGxEZXAoZGVwTmFtZSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWFwLnApIHtcXG4gICAgICAgICAgICAgICAgICAgIG1hcC5wLmxvYWQobWFwLm4sIG1ha2VSZXF1aXJlKHJlbE5hbWUsIHRydWUpLCBtYWtlTG9hZChkZXBOYW1lKSwge30pO1xcbiAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSA9IGRlZmluZWRbZGVwTmFtZV07XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobmFtZSArICcgbWlzc2luZyAnICsgZGVwTmFtZSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgcmV0ID0gY2FsbGJhY2sgPyBjYWxsYmFjay5hcHBseShkZWZpbmVkW25hbWVdLCBhcmdzKSA6IHVuZGVmaW5lZDtcXG5cXG4gICAgICAgICAgICBpZiAobmFtZSkge1xcbiAgICAgICAgICAgICAgICAvL0lmIHNldHRpbmcgZXhwb3J0cyB2aWEgXFxcIm1vZHVsZVxcXCIgaXMgaW4gcGxheSxcXG4gICAgICAgICAgICAgICAgLy9mYXZvciB0aGF0IG92ZXIgcmV0dXJuIHZhbHVlIGFuZCBleHBvcnRzLiBBZnRlciB0aGF0LFxcbiAgICAgICAgICAgICAgICAvL2Zhdm9yIGEgbm9uLXVuZGVmaW5lZCByZXR1cm4gdmFsdWUgb3ZlciBleHBvcnRzIHVzZS5cXG4gICAgICAgICAgICAgICAgaWYgKGNqc01vZHVsZSAmJiBjanNNb2R1bGUuZXhwb3J0cyAhPT0gdW5kZWYgJiZcXG4gICAgICAgICAgICAgICAgICAgICAgICBjanNNb2R1bGUuZXhwb3J0cyAhPT0gZGVmaW5lZFtuYW1lXSkge1xcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lZFtuYW1lXSA9IGNqc01vZHVsZS5leHBvcnRzO1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJldCAhPT0gdW5kZWYgfHwgIXVzaW5nRXhwb3J0cykge1xcbiAgICAgICAgICAgICAgICAgICAgLy9Vc2UgdGhlIHJldHVybiB2YWx1ZSBmcm9tIHRoZSBmdW5jdGlvbi5cXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZWRbbmFtZV0gPSByZXQ7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGVsc2UgaWYgKG5hbWUpIHtcXG4gICAgICAgICAgICAvL01heSBqdXN0IGJlIGFuIG9iamVjdCBkZWZpbml0aW9uIGZvciB0aGUgbW9kdWxlLiBPbmx5XFxuICAgICAgICAgICAgLy93b3JyeSBhYm91dCBkZWZpbmluZyBpZiBoYXZlIGEgbW9kdWxlIG5hbWUuXFxuICAgICAgICAgICAgZGVmaW5lZFtuYW1lXSA9IGNhbGxiYWNrO1xcbiAgICAgICAgfVxcbiAgICB9O1xcblxcbiAgICByZXF1aXJlanMgPSByZXF1aXJlID0gcmVxID0gZnVuY3Rpb24gKGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lLCBmb3JjZVN5bmMsIGFsdCkge1xcbiAgICAgICAgaWYgKHR5cGVvZiBkZXBzID09PSBcXFwic3RyaW5nXFxcIikge1xcbiAgICAgICAgICAgIGlmIChoYW5kbGVyc1tkZXBzXSkge1xcbiAgICAgICAgICAgICAgICAvL2NhbGxiYWNrIGluIHRoaXMgY2FzZSBpcyByZWFsbHkgcmVsTmFtZVxcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlcnNbZGVwc10oY2FsbGJhY2spO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAvL0p1c3QgcmV0dXJuIHRoZSBtb2R1bGUgd2FudGVkLiBJbiB0aGlzIHNjZW5hcmlvLCB0aGVcXG4gICAgICAgICAgICAvL2RlcHMgYXJnIGlzIHRoZSBtb2R1bGUgbmFtZSwgYW5kIHNlY29uZCBhcmcgKGlmIHBhc3NlZClcXG4gICAgICAgICAgICAvL2lzIGp1c3QgdGhlIHJlbE5hbWUuXFxuICAgICAgICAgICAgLy9Ob3JtYWxpemUgbW9kdWxlIG5hbWUsIGlmIGl0IGNvbnRhaW5zIC4gb3IgLi5cXG4gICAgICAgICAgICByZXR1cm4gY2FsbERlcChtYWtlTWFwKGRlcHMsIG1ha2VSZWxQYXJ0cyhjYWxsYmFjaykpLmYpO1xcbiAgICAgICAgfSBlbHNlIGlmICghZGVwcy5zcGxpY2UpIHtcXG4gICAgICAgICAgICAvL2RlcHMgaXMgYSBjb25maWcgb2JqZWN0LCBub3QgYW4gYXJyYXkuXFxuICAgICAgICAgICAgY29uZmlnID0gZGVwcztcXG4gICAgICAgICAgICBpZiAoY29uZmlnLmRlcHMpIHtcXG4gICAgICAgICAgICAgICAgcmVxKGNvbmZpZy5kZXBzLCBjb25maWcuY2FsbGJhY2spO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLnNwbGljZSkge1xcbiAgICAgICAgICAgICAgICAvL2NhbGxiYWNrIGlzIGFuIGFycmF5LCB3aGljaCBtZWFucyBpdCBpcyBhIGRlcGVuZGVuY3kgbGlzdC5cXG4gICAgICAgICAgICAgICAgLy9BZGp1c3QgYXJncyBpZiB0aGVyZSBhcmUgZGVwZW5kZW5jaWVzXFxuICAgICAgICAgICAgICAgIGRlcHMgPSBjYWxsYmFjaztcXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSByZWxOYW1lO1xcbiAgICAgICAgICAgICAgICByZWxOYW1lID0gbnVsbDtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBkZXBzID0gdW5kZWY7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy9TdXBwb3J0IHJlcXVpcmUoWydhJ10pXFxuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xcblxcbiAgICAgICAgLy9JZiByZWxOYW1lIGlzIGEgZnVuY3Rpb24sIGl0IGlzIGFuIGVycmJhY2sgaGFuZGxlcixcXG4gICAgICAgIC8vc28gcmVtb3ZlIGl0LlxcbiAgICAgICAgaWYgKHR5cGVvZiByZWxOYW1lID09PSAnZnVuY3Rpb24nKSB7XFxuICAgICAgICAgICAgcmVsTmFtZSA9IGZvcmNlU3luYztcXG4gICAgICAgICAgICBmb3JjZVN5bmMgPSBhbHQ7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAvL1NpbXVsYXRlIGFzeW5jIGNhbGxiYWNrO1xcbiAgICAgICAgaWYgKGZvcmNlU3luYykge1xcbiAgICAgICAgICAgIG1haW4odW5kZWYsIGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgLy9Vc2luZyBhIG5vbi16ZXJvIHZhbHVlIGJlY2F1c2Ugb2YgY29uY2VybiBmb3Igd2hhdCBvbGQgYnJvd3NlcnNcXG4gICAgICAgICAgICAvL2RvLCBhbmQgbGF0ZXN0IGJyb3dzZXJzIFxcXCJ1cGdyYWRlXFxcIiB0byA0IGlmIGxvd2VyIHZhbHVlIGlzIHVzZWQ6XFxuICAgICAgICAgICAgLy9odHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90aW1lcnMuaHRtbCNkb20td2luZG93dGltZXJzLXNldHRpbWVvdXQ6XFxuICAgICAgICAgICAgLy9JZiB3YW50IGEgdmFsdWUgaW1tZWRpYXRlbHksIHVzZSByZXF1aXJlKCdpZCcpIGluc3RlYWQgLS0gc29tZXRoaW5nXFxuICAgICAgICAgICAgLy90aGF0IHdvcmtzIGluIGFsbW9uZCBvbiB0aGUgZ2xvYmFsIGxldmVsLCBidXQgbm90IGd1YXJhbnRlZWQgYW5kXFxuICAgICAgICAgICAgLy91bmxpa2VseSB0byB3b3JrIGluIG90aGVyIEFNRCBpbXBsZW1lbnRhdGlvbnMuXFxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgIG1haW4odW5kZWYsIGRlcHMsIGNhbGxiYWNrLCByZWxOYW1lKTtcXG4gICAgICAgICAgICB9LCA0KTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiByZXE7XFxuICAgIH07XFxuXFxuICAgIC8qKlxcbiAgICAgKiBKdXN0IGRyb3BzIHRoZSBjb25maWcgb24gdGhlIGZsb29yLCBidXQgcmV0dXJucyByZXEgaW4gY2FzZVxcbiAgICAgKiB0aGUgY29uZmlnIHJldHVybiB2YWx1ZSBpcyB1c2VkLlxcbiAgICAgKi9cXG4gICAgcmVxLmNvbmZpZyA9IGZ1bmN0aW9uIChjZmcpIHtcXG4gICAgICAgIHJldHVybiByZXEoY2ZnKTtcXG4gICAgfTtcXG5cXG4gICAgLyoqXFxuICAgICAqIEV4cG9zZSBtb2R1bGUgcmVnaXN0cnkgZm9yIGRlYnVnZ2luZyBhbmQgdG9vbGluZ1xcbiAgICAgKi9cXG4gICAgcmVxdWlyZWpzLl9kZWZpbmVkID0gZGVmaW5lZDtcXG5cXG4gICAgZGVmaW5lID0gZnVuY3Rpb24gKG5hbWUsIGRlcHMsIGNhbGxiYWNrKSB7XFxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWUgYWxtb25kIFJFQURNRTogaW5jb3JyZWN0IG1vZHVsZSBidWlsZCwgbm8gbW9kdWxlIG5hbWUnKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC8vVGhpcyBtb2R1bGUgbWF5IG5vdCBoYXZlIGRlcGVuZGVuY2llc1xcbiAgICAgICAgaWYgKCFkZXBzLnNwbGljZSkge1xcbiAgICAgICAgICAgIC8vZGVwcyBpcyBub3QgYW4gYXJyYXksIHNvIHByb2JhYmx5IG1lYW5zXFxuICAgICAgICAgICAgLy9hbiBvYmplY3QgbGl0ZXJhbCBvciBmYWN0b3J5IGZ1bmN0aW9uIGZvclxcbiAgICAgICAgICAgIC8vdGhlIHZhbHVlLiBBZGp1c3QgYXJncy5cXG4gICAgICAgICAgICBjYWxsYmFjayA9IGRlcHM7XFxuICAgICAgICAgICAgZGVwcyA9IFtdO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgaWYgKCFoYXNQcm9wKGRlZmluZWQsIG5hbWUpICYmICFoYXNQcm9wKHdhaXRpbmcsIG5hbWUpKSB7XFxuICAgICAgICAgICAgd2FpdGluZ1tuYW1lXSA9IFtuYW1lLCBkZXBzLCBjYWxsYmFja107XFxuICAgICAgICB9XFxuICAgIH07XFxuXFxuICAgIGRlZmluZS5hbWQgPSB7XFxuICAgICAgICBqUXVlcnk6IHRydWVcXG4gICAgfTtcXG59KCkpO1xcblxcblMyLnJlcXVpcmVqcyA9IHJlcXVpcmVqcztTMi5yZXF1aXJlID0gcmVxdWlyZTtTMi5kZWZpbmUgPSBkZWZpbmU7XFxufVxcbn0oKSk7XFxuUzIuZGVmaW5lKFxcXCJhbG1vbmRcXFwiLCBmdW5jdGlvbigpe30pO1xcblxcbi8qIGdsb2JhbCBqUXVlcnk6ZmFsc2UsICQ6ZmFsc2UgKi9cXG5TMi5kZWZpbmUoJ2pxdWVyeScsW10sZnVuY3Rpb24gKCkge1xcbiAgdmFyIF8kID0galF1ZXJ5IHx8ICQ7XFxuXFxuICBpZiAoXyQgPT0gbnVsbCAmJiBjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcXG4gICAgY29uc29sZS5lcnJvcihcXG4gICAgICAnU2VsZWN0MjogQW4gaW5zdGFuY2Ugb2YgalF1ZXJ5IG9yIGEgalF1ZXJ5LWNvbXBhdGlibGUgbGlicmFyeSB3YXMgbm90ICcgK1xcbiAgICAgICdmb3VuZC4gTWFrZSBzdXJlIHRoYXQgeW91IGFyZSBpbmNsdWRpbmcgalF1ZXJ5IGJlZm9yZSBTZWxlY3QyIG9uIHlvdXIgJyArXFxuICAgICAgJ3dlYiBwYWdlLidcXG4gICAgKTtcXG4gIH1cXG5cXG4gIHJldHVybiBfJDtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvdXRpbHMnLFtcXG4gICdqcXVlcnknXFxuXSwgZnVuY3Rpb24gKCQpIHtcXG4gIHZhciBVdGlscyA9IHt9O1xcblxcbiAgVXRpbHMuRXh0ZW5kID0gZnVuY3Rpb24gKENoaWxkQ2xhc3MsIFN1cGVyQ2xhc3MpIHtcXG4gICAgdmFyIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xcblxcbiAgICBmdW5jdGlvbiBCYXNlQ29uc3RydWN0b3IgKCkge1xcbiAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBDaGlsZENsYXNzO1xcbiAgICB9XFxuXFxuICAgIGZvciAodmFyIGtleSBpbiBTdXBlckNsYXNzKSB7XFxuICAgICAgaWYgKF9faGFzUHJvcC5jYWxsKFN1cGVyQ2xhc3MsIGtleSkpIHtcXG4gICAgICAgIENoaWxkQ2xhc3Nba2V5XSA9IFN1cGVyQ2xhc3Nba2V5XTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgQmFzZUNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IFN1cGVyQ2xhc3MucHJvdG90eXBlO1xcbiAgICBDaGlsZENsYXNzLnByb3RvdHlwZSA9IG5ldyBCYXNlQ29uc3RydWN0b3IoKTtcXG4gICAgQ2hpbGRDbGFzcy5fX3N1cGVyX18gPSBTdXBlckNsYXNzLnByb3RvdHlwZTtcXG5cXG4gICAgcmV0dXJuIENoaWxkQ2xhc3M7XFxuICB9O1xcblxcbiAgZnVuY3Rpb24gZ2V0TWV0aG9kcyAodGhlQ2xhc3MpIHtcXG4gICAgdmFyIHByb3RvID0gdGhlQ2xhc3MucHJvdG90eXBlO1xcblxcbiAgICB2YXIgbWV0aG9kcyA9IFtdO1xcblxcbiAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIHByb3RvKSB7XFxuICAgICAgdmFyIG0gPSBwcm90b1ttZXRob2ROYW1lXTtcXG5cXG4gICAgICBpZiAodHlwZW9mIG0gIT09ICdmdW5jdGlvbicpIHtcXG4gICAgICAgIGNvbnRpbnVlO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAobWV0aG9kTmFtZSA9PT0gJ2NvbnN0cnVjdG9yJykge1xcbiAgICAgICAgY29udGludWU7XFxuICAgICAgfVxcblxcbiAgICAgIG1ldGhvZHMucHVzaChtZXRob2ROYW1lKTtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gbWV0aG9kcztcXG4gIH1cXG5cXG4gIFV0aWxzLkRlY29yYXRlID0gZnVuY3Rpb24gKFN1cGVyQ2xhc3MsIERlY29yYXRvckNsYXNzKSB7XFxuICAgIHZhciBkZWNvcmF0ZWRNZXRob2RzID0gZ2V0TWV0aG9kcyhEZWNvcmF0b3JDbGFzcyk7XFxuICAgIHZhciBzdXBlck1ldGhvZHMgPSBnZXRNZXRob2RzKFN1cGVyQ2xhc3MpO1xcblxcbiAgICBmdW5jdGlvbiBEZWNvcmF0ZWRDbGFzcyAoKSB7XFxuICAgICAgdmFyIHVuc2hpZnQgPSBBcnJheS5wcm90b3R5cGUudW5zaGlmdDtcXG5cXG4gICAgICB2YXIgYXJnQ291bnQgPSBEZWNvcmF0b3JDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IubGVuZ3RoO1xcblxcbiAgICAgIHZhciBjYWxsZWRDb25zdHJ1Y3RvciA9IFN1cGVyQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xcblxcbiAgICAgIGlmIChhcmdDb3VudCA+IDApIHtcXG4gICAgICAgIHVuc2hpZnQuY2FsbChhcmd1bWVudHMsIFN1cGVyQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yKTtcXG5cXG4gICAgICAgIGNhbGxlZENvbnN0cnVjdG9yID0gRGVjb3JhdG9yQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xcbiAgICAgIH1cXG5cXG4gICAgICBjYWxsZWRDb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICB9XFxuXFxuICAgIERlY29yYXRvckNsYXNzLmRpc3BsYXlOYW1lID0gU3VwZXJDbGFzcy5kaXNwbGF5TmFtZTtcXG5cXG4gICAgZnVuY3Rpb24gY3RyICgpIHtcXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yID0gRGVjb3JhdGVkQ2xhc3M7XFxuICAgIH1cXG5cXG4gICAgRGVjb3JhdGVkQ2xhc3MucHJvdG90eXBlID0gbmV3IGN0cigpO1xcblxcbiAgICBmb3IgKHZhciBtID0gMDsgbSA8IHN1cGVyTWV0aG9kcy5sZW5ndGg7IG0rKykge1xcbiAgICAgIHZhciBzdXBlck1ldGhvZCA9IHN1cGVyTWV0aG9kc1ttXTtcXG5cXG4gICAgICBEZWNvcmF0ZWRDbGFzcy5wcm90b3R5cGVbc3VwZXJNZXRob2RdID1cXG4gICAgICAgIFN1cGVyQ2xhc3MucHJvdG90eXBlW3N1cGVyTWV0aG9kXTtcXG4gICAgfVxcblxcbiAgICB2YXIgY2FsbGVkTWV0aG9kID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcXG4gICAgICAvLyBTdHViIG91dCB0aGUgb3JpZ2luYWwgbWV0aG9kIGlmIGl0J3Mgbm90IGRlY29yYXRpbmcgYW4gYWN0dWFsIG1ldGhvZFxcbiAgICAgIHZhciBvcmlnaW5hbE1ldGhvZCA9IGZ1bmN0aW9uICgpIHt9O1xcblxcbiAgICAgIGlmIChtZXRob2ROYW1lIGluIERlY29yYXRlZENsYXNzLnByb3RvdHlwZSkge1xcbiAgICAgICAgb3JpZ2luYWxNZXRob2QgPSBEZWNvcmF0ZWRDbGFzcy5wcm90b3R5cGVbbWV0aG9kTmFtZV07XFxuICAgICAgfVxcblxcbiAgICAgIHZhciBkZWNvcmF0ZWRNZXRob2QgPSBEZWNvcmF0b3JDbGFzcy5wcm90b3R5cGVbbWV0aG9kTmFtZV07XFxuXFxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHZhciB1bnNoaWZ0ID0gQXJyYXkucHJvdG90eXBlLnVuc2hpZnQ7XFxuXFxuICAgICAgICB1bnNoaWZ0LmNhbGwoYXJndW1lbnRzLCBvcmlnaW5hbE1ldGhvZCk7XFxuXFxuICAgICAgICByZXR1cm4gZGVjb3JhdGVkTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgfTtcXG4gICAgfTtcXG5cXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkZWNvcmF0ZWRNZXRob2RzLmxlbmd0aDsgZCsrKSB7XFxuICAgICAgdmFyIGRlY29yYXRlZE1ldGhvZCA9IGRlY29yYXRlZE1ldGhvZHNbZF07XFxuXFxuICAgICAgRGVjb3JhdGVkQ2xhc3MucHJvdG90eXBlW2RlY29yYXRlZE1ldGhvZF0gPSBjYWxsZWRNZXRob2QoZGVjb3JhdGVkTWV0aG9kKTtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gRGVjb3JhdGVkQ2xhc3M7XFxuICB9O1xcblxcbiAgdmFyIE9ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHRoaXMubGlzdGVuZXJzID0ge307XFxuICB9O1xcblxcbiAgT2JzZXJ2YWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XFxuICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMgfHwge307XFxuXFxuICAgIGlmIChldmVudCBpbiB0aGlzLmxpc3RlbmVycykge1xcbiAgICAgIHRoaXMubGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNhbGxiYWNrKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICB0aGlzLmxpc3RlbmVyc1tldmVudF0gPSBbY2FsbGJhY2tdO1xcbiAgICB9XFxuICB9O1xcblxcbiAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChldmVudCkge1xcbiAgICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XFxuICAgIHZhciBwYXJhbXMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XFxuXFxuICAgIHRoaXMubGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMgfHwge307XFxuXFxuICAgIC8vIFBhcmFtcyBzaG91bGQgYWx3YXlzIGNvbWUgaW4gYXMgYW4gYXJyYXlcXG4gICAgaWYgKHBhcmFtcyA9PSBudWxsKSB7XFxuICAgICAgcGFyYW1zID0gW107XFxuICAgIH1cXG5cXG4gICAgLy8gSWYgdGhlcmUgYXJlIG5vIGFyZ3VtZW50cyB0byB0aGUgZXZlbnQsIHVzZSBhIHRlbXBvcmFyeSBvYmplY3RcXG4gICAgaWYgKHBhcmFtcy5sZW5ndGggPT09IDApIHtcXG4gICAgICBwYXJhbXMucHVzaCh7fSk7XFxuICAgIH1cXG5cXG4gICAgLy8gU2V0IHRoZSBgX3R5cGVgIG9mIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIGV2ZW50XFxuICAgIHBhcmFtc1swXS5fdHlwZSA9IGV2ZW50O1xcblxcbiAgICBpZiAoZXZlbnQgaW4gdGhpcy5saXN0ZW5lcnMpIHtcXG4gICAgICB0aGlzLmludm9rZSh0aGlzLmxpc3RlbmVyc1tldmVudF0sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XFxuICAgIH1cXG5cXG4gICAgaWYgKCcqJyBpbiB0aGlzLmxpc3RlbmVycykge1xcbiAgICAgIHRoaXMuaW52b2tlKHRoaXMubGlzdGVuZXJzWycqJ10sIGFyZ3VtZW50cyk7XFxuICAgIH1cXG4gIH07XFxuXFxuICBPYnNlcnZhYmxlLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbiAobGlzdGVuZXJzLCBwYXJhbXMpIHtcXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBwYXJhbXMpO1xcbiAgICB9XFxuICB9O1xcblxcbiAgVXRpbHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGU7XFxuXFxuICBVdGlscy5nZW5lcmF0ZUNoYXJzID0gZnVuY3Rpb24gKGxlbmd0aCkge1xcbiAgICB2YXIgY2hhcnMgPSAnJztcXG5cXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xcbiAgICAgIHZhciByYW5kb21DaGFyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMzYpO1xcbiAgICAgIGNoYXJzICs9IHJhbmRvbUNoYXIudG9TdHJpbmcoMzYpO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBjaGFycztcXG4gIH07XFxuXFxuICBVdGlscy5iaW5kID0gZnVuY3Rpb24gKGZ1bmMsIGNvbnRleHQpIHtcXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcXG4gICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XFxuICAgIH07XFxuICB9O1xcblxcbiAgVXRpbHMuX2NvbnZlcnREYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcXG4gICAgZm9yICh2YXIgb3JpZ2luYWxLZXkgaW4gZGF0YSkge1xcbiAgICAgIHZhciBrZXlzID0gb3JpZ2luYWxLZXkuc3BsaXQoJy0nKTtcXG5cXG4gICAgICB2YXIgZGF0YUxldmVsID0gZGF0YTtcXG5cXG4gICAgICBpZiAoa2V5cy5sZW5ndGggPT09IDEpIHtcXG4gICAgICAgIGNvbnRpbnVlO1xcbiAgICAgIH1cXG5cXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGtleXMubGVuZ3RoOyBrKyspIHtcXG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2tdO1xcblxcbiAgICAgICAgLy8gTG93ZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXJcXG4gICAgICAgIC8vIEJ5IGRlZmF1bHQsIGRhc2gtc2VwYXJhdGVkIGJlY29tZXMgY2FtZWxDYXNlXFxuICAgICAgICBrZXkgPSBrZXkuc3Vic3RyaW5nKDAsIDEpLnRvTG93ZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpO1xcblxcbiAgICAgICAgaWYgKCEoa2V5IGluIGRhdGFMZXZlbCkpIHtcXG4gICAgICAgICAgZGF0YUxldmVsW2tleV0gPSB7fTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmIChrID09IGtleXMubGVuZ3RoIC0gMSkge1xcbiAgICAgICAgICBkYXRhTGV2ZWxba2V5XSA9IGRhdGFbb3JpZ2luYWxLZXldO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgZGF0YUxldmVsID0gZGF0YUxldmVsW2tleV07XFxuICAgICAgfVxcblxcbiAgICAgIGRlbGV0ZSBkYXRhW29yaWdpbmFsS2V5XTtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gZGF0YTtcXG4gIH07XFxuXFxuICBVdGlscy5oYXNTY3JvbGwgPSBmdW5jdGlvbiAoaW5kZXgsIGVsKSB7XFxuICAgIC8vIEFkYXB0ZWQgZnJvbSB0aGUgZnVuY3Rpb24gY3JlYXRlZCBieSBAU2hhZG93U2NyaXB0ZXJcXG4gICAgLy8gYW5kIGFkYXB0ZWQgYnkgQEJpbGxCYXJyeSBvbiB0aGUgU3RhY2sgRXhjaGFuZ2UgQ29kZSBSZXZpZXcgd2Vic2l0ZS5cXG4gICAgLy8gVGhlIG9yaWdpbmFsIGNvZGUgY2FuIGJlIGZvdW5kIGF0XFxuICAgIC8vIGh0dHA6Ly9jb2RlcmV2aWV3LnN0YWNrZXhjaGFuZ2UuY29tL3EvMTMzMzhcXG4gICAgLy8gYW5kIHdhcyBkZXNpZ25lZCB0byBiZSB1c2VkIHdpdGggdGhlIFNpenpsZSBzZWxlY3RvciBlbmdpbmUuXFxuXFxuICAgIHZhciAkZWwgPSAkKGVsKTtcXG4gICAgdmFyIG92ZXJmbG93WCA9IGVsLnN0eWxlLm92ZXJmbG93WDtcXG4gICAgdmFyIG92ZXJmbG93WSA9IGVsLnN0eWxlLm92ZXJmbG93WTtcXG5cXG4gICAgLy9DaGVjayBib3RoIHggYW5kIHkgZGVjbGFyYXRpb25zXFxuICAgIGlmIChvdmVyZmxvd1ggPT09IG92ZXJmbG93WSAmJlxcbiAgICAgICAgKG92ZXJmbG93WSA9PT0gJ2hpZGRlbicgfHwgb3ZlcmZsb3dZID09PSAndmlzaWJsZScpKSB7XFxuICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9XFxuXFxuICAgIGlmIChvdmVyZmxvd1ggPT09ICdzY3JvbGwnIHx8IG92ZXJmbG93WSA9PT0gJ3Njcm9sbCcpIHtcXG4gICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gKCRlbC5pbm5lckhlaWdodCgpIDwgZWwuc2Nyb2xsSGVpZ2h0IHx8XFxuICAgICAgJGVsLmlubmVyV2lkdGgoKSA8IGVsLnNjcm9sbFdpZHRoKTtcXG4gIH07XFxuXFxuICBVdGlscy5lc2NhcGVNYXJrdXAgPSBmdW5jdGlvbiAobWFya3VwKSB7XFxuICAgIHZhciByZXBsYWNlTWFwID0ge1xcbiAgICAgICdcXFxcXFxcXCc6ICcmIzkyOycsXFxuICAgICAgJyYnOiAnJmFtcDsnLFxcbiAgICAgICc8JzogJyZsdDsnLFxcbiAgICAgICc+JzogJyZndDsnLFxcbiAgICAgICdcXFwiJzogJyZxdW90OycsXFxuICAgICAgJ1xcXFwnJzogJyYjMzk7JyxcXG4gICAgICAnLyc6ICcmIzQ3OydcXG4gICAgfTtcXG5cXG4gICAgLy8gRG8gbm90IHRyeSB0byBlc2NhcGUgdGhlIG1hcmt1cCBpZiBpdCdzIG5vdCBhIHN0cmluZ1xcbiAgICBpZiAodHlwZW9mIG1hcmt1cCAhPT0gJ3N0cmluZycpIHtcXG4gICAgICByZXR1cm4gbWFya3VwO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBTdHJpbmcobWFya3VwKS5yZXBsYWNlKC9bJjw+XFxcIidcXFxcL1xcXFxcXFxcXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcXG4gICAgICByZXR1cm4gcmVwbGFjZU1hcFttYXRjaF07XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIC8vIEFwcGVuZCBhbiBhcnJheSBvZiBqUXVlcnkgbm9kZXMgdG8gYSBnaXZlbiBlbGVtZW50LlxcbiAgVXRpbHMuYXBwZW5kTWFueSA9IGZ1bmN0aW9uICgkZWxlbWVudCwgJG5vZGVzKSB7XFxuICAgIC8vIGpRdWVyeSAxLjcueCBkb2VzIG5vdCBzdXBwb3J0ICQuZm4uYXBwZW5kKCkgd2l0aCBhbiBhcnJheVxcbiAgICAvLyBGYWxsIGJhY2sgdG8gYSBqUXVlcnkgb2JqZWN0IGNvbGxlY3Rpb24gdXNpbmcgJC5mbi5hZGQoKVxcbiAgICBpZiAoJC5mbi5qcXVlcnkuc3Vic3RyKDAsIDMpID09PSAnMS43Jykge1xcbiAgICAgIHZhciAkanFOb2RlcyA9ICQoKTtcXG5cXG4gICAgICAkLm1hcCgkbm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XFxuICAgICAgICAkanFOb2RlcyA9ICRqcU5vZGVzLmFkZChub2RlKTtcXG4gICAgICB9KTtcXG5cXG4gICAgICAkbm9kZXMgPSAkanFOb2RlcztcXG4gICAgfVxcblxcbiAgICAkZWxlbWVudC5hcHBlbmQoJG5vZGVzKTtcXG4gIH07XFxuXFxuICAvLyBDYWNoZSBvYmplY3RzIGluIFV0aWxzLl9fY2FjaGUgaW5zdGVhZCBvZiAkLmRhdGEgKHNlZSAjNDM0NilcXG4gIFV0aWxzLl9fY2FjaGUgPSB7fTtcXG5cXG4gIHZhciBpZCA9IDA7XFxuICBVdGlscy5HZXRVbmlxdWVFbGVtZW50SWQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xcbiAgICAvLyBHZXQgYSB1bmlxdWUgZWxlbWVudCBJZC4gSWYgZWxlbWVudCBoYXMgbm8gaWQsXFxuICAgIC8vIGNyZWF0ZXMgYSBuZXcgdW5pcXVlIG51bWJlciwgc3RvcmVzIGl0IGluIHRoZSBpZFxcbiAgICAvLyBhdHRyaWJ1dGUgYW5kIHJldHVybnMgdGhlIG5ldyBpZC5cXG4gICAgLy8gSWYgYW4gaWQgYWxyZWFkeSBleGlzdHMsIGl0IHNpbXBseSByZXR1cm5zIGl0LlxcblxcbiAgICB2YXIgc2VsZWN0MklkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2VsZWN0Mi1pZCcpO1xcbiAgICBpZiAoc2VsZWN0MklkID09IG51bGwpIHtcXG4gICAgICAvLyBJZiBlbGVtZW50IGhhcyBpZCwgdXNlIGl0LlxcbiAgICAgIGlmIChlbGVtZW50LmlkKSB7XFxuICAgICAgICBzZWxlY3QySWQgPSBlbGVtZW50LmlkO1xcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2VsZWN0Mi1pZCcsIHNlbGVjdDJJZCk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNlbGVjdDItaWQnLCArK2lkKTtcXG4gICAgICAgIHNlbGVjdDJJZCA9IGlkLnRvU3RyaW5nKCk7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiBzZWxlY3QySWQ7XFxuICB9O1xcblxcbiAgVXRpbHMuU3RvcmVEYXRhID0gZnVuY3Rpb24gKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XFxuICAgIC8vIFN0b3JlcyBhbiBpdGVtIGluIHRoZSBjYWNoZSBmb3IgYSBzcGVjaWZpZWQgZWxlbWVudC5cXG4gICAgLy8gbmFtZSBpcyB0aGUgY2FjaGUga2V5LlxcbiAgICB2YXIgaWQgPSBVdGlscy5HZXRVbmlxdWVFbGVtZW50SWQoZWxlbWVudCk7XFxuICAgIGlmICghVXRpbHMuX19jYWNoZVtpZF0pIHtcXG4gICAgICBVdGlscy5fX2NhY2hlW2lkXSA9IHt9O1xcbiAgICB9XFxuXFxuICAgIFV0aWxzLl9fY2FjaGVbaWRdW25hbWVdID0gdmFsdWU7XFxuICB9O1xcblxcbiAgVXRpbHMuR2V0RGF0YSA9IGZ1bmN0aW9uIChlbGVtZW50LCBuYW1lKSB7XFxuICAgIC8vIFJldHJpZXZlcyBhIHZhbHVlIGZyb20gdGhlIGNhY2hlIGJ5IGl0cyBrZXkgKG5hbWUpXFxuICAgIC8vIG5hbWUgaXMgb3B0aW9uYWwuIElmIG5vIG5hbWUgc3BlY2lmaWVkLCByZXR1cm5cXG4gICAgLy8gYWxsIGNhY2hlIGl0ZW1zIGZvciB0aGUgc3BlY2lmaWVkIGVsZW1lbnQuXFxuICAgIC8vIGFuZCBmb3IgYSBzcGVjaWZpZWQgZWxlbWVudC5cXG4gICAgdmFyIGlkID0gVXRpbHMuR2V0VW5pcXVlRWxlbWVudElkKGVsZW1lbnQpO1xcbiAgICBpZiAobmFtZSkge1xcbiAgICAgIGlmIChVdGlscy5fX2NhY2hlW2lkXSkge1xcbiAgICAgICAgaWYgKFV0aWxzLl9fY2FjaGVbaWRdW25hbWVdICE9IG51bGwpIHtcXG4gICAgICAgICAgcmV0dXJuIFV0aWxzLl9fY2FjaGVbaWRdW25hbWVdO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuICQoZWxlbWVudCkuZGF0YShuYW1lKTsgLy8gRmFsbGJhY2sgdG8gSFRNTDUgZGF0YSBhdHRyaWJzLlxcbiAgICAgIH1cXG4gICAgICByZXR1cm4gJChlbGVtZW50KS5kYXRhKG5hbWUpOyAvLyBGYWxsYmFjayB0byBIVE1MNSBkYXRhIGF0dHJpYnMuXFxuICAgIH0gZWxzZSB7XFxuICAgICAgcmV0dXJuIFV0aWxzLl9fY2FjaGVbaWRdO1xcbiAgICB9XFxuICB9O1xcblxcbiAgVXRpbHMuUmVtb3ZlRGF0YSA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XFxuICAgIC8vIFJlbW92ZXMgYWxsIGNhY2hlZCBpdGVtcyBmb3IgYSBzcGVjaWZpZWQgZWxlbWVudC5cXG4gICAgdmFyIGlkID0gVXRpbHMuR2V0VW5pcXVlRWxlbWVudElkKGVsZW1lbnQpO1xcbiAgICBpZiAoVXRpbHMuX19jYWNoZVtpZF0gIT0gbnVsbCkge1xcbiAgICAgIGRlbGV0ZSBVdGlscy5fX2NhY2hlW2lkXTtcXG4gICAgfVxcblxcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zZWxlY3QyLWlkJyk7XFxuICB9O1xcblxcbiAgcmV0dXJuIFV0aWxzO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9yZXN1bHRzJyxbXFxuICAnanF1ZXJ5JyxcXG4gICcuL3V0aWxzJ1xcbl0sIGZ1bmN0aW9uICgkLCBVdGlscykge1xcbiAgZnVuY3Rpb24gUmVzdWx0cyAoJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKSB7XFxuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcXG4gICAgdGhpcy5kYXRhID0gZGF0YUFkYXB0ZXI7XFxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XFxuXFxuICAgIFJlc3VsdHMuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XFxuICB9XFxuXFxuICBVdGlscy5FeHRlbmQoUmVzdWx0cywgVXRpbHMuT2JzZXJ2YWJsZSk7XFxuXFxuICBSZXN1bHRzLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHZhciAkcmVzdWx0cyA9ICQoXFxuICAgICAgJzx1bCBjbGFzcz1cXFwic2VsZWN0Mi1yZXN1bHRzX19vcHRpb25zXFxcIiByb2xlPVxcXCJsaXN0Ym94XFxcIj48L3VsPidcXG4gICAgKTtcXG5cXG4gICAgaWYgKHRoaXMub3B0aW9ucy5nZXQoJ211bHRpcGxlJykpIHtcXG4gICAgICAkcmVzdWx0cy5hdHRyKCdhcmlhLW11bHRpc2VsZWN0YWJsZScsICd0cnVlJyk7XFxuICAgIH1cXG5cXG4gICAgdGhpcy4kcmVzdWx0cyA9ICRyZXN1bHRzO1xcblxcbiAgICByZXR1cm4gJHJlc3VsdHM7XFxuICB9O1xcblxcbiAgUmVzdWx0cy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHRoaXMuJHJlc3VsdHMuZW1wdHkoKTtcXG4gIH07XFxuXFxuICBSZXN1bHRzLnByb3RvdHlwZS5kaXNwbGF5TWVzc2FnZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcXG4gICAgdmFyIGVzY2FwZU1hcmt1cCA9IHRoaXMub3B0aW9ucy5nZXQoJ2VzY2FwZU1hcmt1cCcpO1xcblxcbiAgICB0aGlzLmNsZWFyKCk7XFxuICAgIHRoaXMuaGlkZUxvYWRpbmcoKTtcXG5cXG4gICAgdmFyICRtZXNzYWdlID0gJChcXG4gICAgICAnPGxpIHJvbGU9XFxcImFsZXJ0XFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCInICtcXG4gICAgICAnIGNsYXNzPVxcXCJzZWxlY3QyLXJlc3VsdHNfX29wdGlvblxcXCI+PC9saT4nXFxuICAgICk7XFxuXFxuICAgIHZhciBtZXNzYWdlID0gdGhpcy5vcHRpb25zLmdldCgndHJhbnNsYXRpb25zJykuZ2V0KHBhcmFtcy5tZXNzYWdlKTtcXG5cXG4gICAgJG1lc3NhZ2UuYXBwZW5kKFxcbiAgICAgIGVzY2FwZU1hcmt1cChcXG4gICAgICAgIG1lc3NhZ2UocGFyYW1zLmFyZ3MpXFxuICAgICAgKVxcbiAgICApO1xcblxcbiAgICAkbWVzc2FnZVswXS5jbGFzc05hbWUgKz0gJyBzZWxlY3QyLXJlc3VsdHNfX21lc3NhZ2UnO1xcblxcbiAgICB0aGlzLiRyZXN1bHRzLmFwcGVuZCgkbWVzc2FnZSk7XFxuICB9O1xcblxcbiAgUmVzdWx0cy5wcm90b3R5cGUuaGlkZU1lc3NhZ2VzID0gZnVuY3Rpb24gKCkge1xcbiAgICB0aGlzLiRyZXN1bHRzLmZpbmQoJy5zZWxlY3QyLXJlc3VsdHNfX21lc3NhZ2UnKS5yZW1vdmUoKTtcXG4gIH07XFxuXFxuICBSZXN1bHRzLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xcbiAgICB0aGlzLmhpZGVMb2FkaW5nKCk7XFxuXFxuICAgIHZhciAkb3B0aW9ucyA9IFtdO1xcblxcbiAgICBpZiAoZGF0YS5yZXN1bHRzID09IG51bGwgfHwgZGF0YS5yZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xcbiAgICAgIGlmICh0aGlzLiRyZXN1bHRzLmNoaWxkcmVuKCkubGVuZ3RoID09PSAwKSB7XFxuICAgICAgICB0aGlzLnRyaWdnZXIoJ3Jlc3VsdHM6bWVzc2FnZScsIHtcXG4gICAgICAgICAgbWVzc2FnZTogJ25vUmVzdWx0cydcXG4gICAgICAgIH0pO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgZGF0YS5yZXN1bHRzID0gdGhpcy5zb3J0KGRhdGEucmVzdWx0cyk7XFxuXFxuICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGF0YS5yZXN1bHRzLmxlbmd0aDsgZCsrKSB7XFxuICAgICAgdmFyIGl0ZW0gPSBkYXRhLnJlc3VsdHNbZF07XFxuXFxuICAgICAgdmFyICRvcHRpb24gPSB0aGlzLm9wdGlvbihpdGVtKTtcXG5cXG4gICAgICAkb3B0aW9ucy5wdXNoKCRvcHRpb24pO1xcbiAgICB9XFxuXFxuICAgIHRoaXMuJHJlc3VsdHMuYXBwZW5kKCRvcHRpb25zKTtcXG4gIH07XFxuXFxuICBSZXN1bHRzLnByb3RvdHlwZS5wb3NpdGlvbiA9IGZ1bmN0aW9uICgkcmVzdWx0cywgJGRyb3Bkb3duKSB7XFxuICAgIHZhciAkcmVzdWx0c0NvbnRhaW5lciA9ICRkcm9wZG93bi5maW5kKCcuc2VsZWN0Mi1yZXN1bHRzJyk7XFxuICAgICRyZXN1bHRzQ29udGFpbmVyLmFwcGVuZCgkcmVzdWx0cyk7XFxuICB9O1xcblxcbiAgUmVzdWx0cy5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uIChkYXRhKSB7XFxuICAgIHZhciBzb3J0ZXIgPSB0aGlzLm9wdGlvbnMuZ2V0KCdzb3J0ZXInKTtcXG5cXG4gICAgcmV0dXJuIHNvcnRlcihkYXRhKTtcXG4gIH07XFxuXFxuICBSZXN1bHRzLnByb3RvdHlwZS5oaWdobGlnaHRGaXJzdEl0ZW0gPSBmdW5jdGlvbiAoKSB7XFxuICAgIHZhciAkb3B0aW9ucyA9IHRoaXMuJHJlc3VsdHNcXG4gICAgICAuZmluZCgnLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdJyk7XFxuXFxuICAgIHZhciAkc2VsZWN0ZWQgPSAkb3B0aW9ucy5maWx0ZXIoJ1thcmlhLXNlbGVjdGVkPXRydWVdJyk7XFxuXFxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBhbnkgc2VsZWN0ZWQgb3B0aW9uc1xcbiAgICBpZiAoJHNlbGVjdGVkLmxlbmd0aCA+IDApIHtcXG4gICAgICAvLyBJZiB0aGVyZSBhcmUgc2VsZWN0ZWQgb3B0aW9ucywgaGlnaGxpZ2h0IHRoZSBmaXJzdFxcbiAgICAgICRzZWxlY3RlZC5maXJzdCgpLnRyaWdnZXIoJ21vdXNlZW50ZXInKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gc2VsZWN0ZWQgb3B0aW9ucywgaGlnaGxpZ2h0IHRoZSBmaXJzdCBvcHRpb25cXG4gICAgICAvLyBpbiB0aGUgZHJvcGRvd25cXG4gICAgICAkb3B0aW9ucy5maXJzdCgpLnRyaWdnZXIoJ21vdXNlZW50ZXInKTtcXG4gICAgfVxcblxcbiAgICB0aGlzLmVuc3VyZUhpZ2hsaWdodFZpc2libGUoKTtcXG4gIH07XFxuXFxuICBSZXN1bHRzLnByb3RvdHlwZS5zZXRDbGFzc2VzID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgIHRoaXMuZGF0YS5jdXJyZW50KGZ1bmN0aW9uIChzZWxlY3RlZCkge1xcbiAgICAgIHZhciBzZWxlY3RlZElkcyA9ICQubWFwKHNlbGVjdGVkLCBmdW5jdGlvbiAocykge1xcbiAgICAgICAgcmV0dXJuIHMuaWQudG9TdHJpbmcoKTtcXG4gICAgICB9KTtcXG5cXG4gICAgICB2YXIgJG9wdGlvbnMgPSBzZWxmLiRyZXN1bHRzXFxuICAgICAgICAuZmluZCgnLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdJyk7XFxuXFxuICAgICAgJG9wdGlvbnMuZWFjaChmdW5jdGlvbiAoKSB7XFxuICAgICAgICB2YXIgJG9wdGlvbiA9ICQodGhpcyk7XFxuXFxuICAgICAgICB2YXIgaXRlbSA9IFV0aWxzLkdldERhdGEodGhpcywgJ2RhdGEnKTtcXG5cXG4gICAgICAgIC8vIGlkIG5lZWRzIHRvIGJlIGNvbnZlcnRlZCB0byBhIHN0cmluZyB3aGVuIGNvbXBhcmluZ1xcbiAgICAgICAgdmFyIGlkID0gJycgKyBpdGVtLmlkO1xcblxcbiAgICAgICAgaWYgKChpdGVtLmVsZW1lbnQgIT0gbnVsbCAmJiBpdGVtLmVsZW1lbnQuc2VsZWN0ZWQpIHx8XFxuICAgICAgICAgICAgKGl0ZW0uZWxlbWVudCA9PSBudWxsICYmICQuaW5BcnJheShpZCwgc2VsZWN0ZWRJZHMpID4gLTEpKSB7XFxuICAgICAgICAgICRvcHRpb24uYXR0cignYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAkb3B0aW9uLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG5cXG4gICAgfSk7XFxuICB9O1xcblxcbiAgUmVzdWx0cy5wcm90b3R5cGUuc2hvd0xvYWRpbmcgPSBmdW5jdGlvbiAocGFyYW1zKSB7XFxuICAgIHRoaXMuaGlkZUxvYWRpbmcoKTtcXG5cXG4gICAgdmFyIGxvYWRpbmdNb3JlID0gdGhpcy5vcHRpb25zLmdldCgndHJhbnNsYXRpb25zJykuZ2V0KCdzZWFyY2hpbmcnKTtcXG5cXG4gICAgdmFyIGxvYWRpbmcgPSB7XFxuICAgICAgZGlzYWJsZWQ6IHRydWUsXFxuICAgICAgbG9hZGluZzogdHJ1ZSxcXG4gICAgICB0ZXh0OiBsb2FkaW5nTW9yZShwYXJhbXMpXFxuICAgIH07XFxuICAgIHZhciAkbG9hZGluZyA9IHRoaXMub3B0aW9uKGxvYWRpbmcpO1xcbiAgICAkbG9hZGluZy5jbGFzc05hbWUgKz0gJyBsb2FkaW5nLXJlc3VsdHMnO1xcblxcbiAgICB0aGlzLiRyZXN1bHRzLnByZXBlbmQoJGxvYWRpbmcpO1xcbiAgfTtcXG5cXG4gIFJlc3VsdHMucHJvdG90eXBlLmhpZGVMb2FkaW5nID0gZnVuY3Rpb24gKCkge1xcbiAgICB0aGlzLiRyZXN1bHRzLmZpbmQoJy5sb2FkaW5nLXJlc3VsdHMnKS5yZW1vdmUoKTtcXG4gIH07XFxuXFxuICBSZXN1bHRzLnByb3RvdHlwZS5vcHRpb24gPSBmdW5jdGlvbiAoZGF0YSkge1xcbiAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcXG4gICAgb3B0aW9uLmNsYXNzTmFtZSA9ICdzZWxlY3QyLXJlc3VsdHNfX29wdGlvbic7XFxuXFxuICAgIHZhciBhdHRycyA9IHtcXG4gICAgICAncm9sZSc6ICdvcHRpb24nLFxcbiAgICAgICdhcmlhLXNlbGVjdGVkJzogJ2ZhbHNlJ1xcbiAgICB9O1xcblxcbiAgICB2YXIgbWF0Y2hlcyA9IHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzIHx8XFxuICAgICAgd2luZG93LkVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XFxuICAgICAgd2luZG93LkVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvcjtcXG5cXG4gICAgaWYgKChkYXRhLmVsZW1lbnQgIT0gbnVsbCAmJiBtYXRjaGVzLmNhbGwoZGF0YS5lbGVtZW50LCAnOmRpc2FibGVkJykpIHx8XFxuICAgICAgICAoZGF0YS5lbGVtZW50ID09IG51bGwgJiYgZGF0YS5kaXNhYmxlZCkpIHtcXG4gICAgICBkZWxldGUgYXR0cnNbJ2FyaWEtc2VsZWN0ZWQnXTtcXG4gICAgICBhdHRyc1snYXJpYS1kaXNhYmxlZCddID0gJ3RydWUnO1xcbiAgICB9XFxuXFxuICAgIGlmIChkYXRhLmlkID09IG51bGwpIHtcXG4gICAgICBkZWxldGUgYXR0cnNbJ2FyaWEtc2VsZWN0ZWQnXTtcXG4gICAgfVxcblxcbiAgICBpZiAoZGF0YS5fcmVzdWx0SWQgIT0gbnVsbCkge1xcbiAgICAgIG9wdGlvbi5pZCA9IGRhdGEuX3Jlc3VsdElkO1xcbiAgICB9XFxuXFxuICAgIGlmIChkYXRhLnRpdGxlKSB7XFxuICAgICAgb3B0aW9uLnRpdGxlID0gZGF0YS50aXRsZTtcXG4gICAgfVxcblxcbiAgICBpZiAoZGF0YS5jaGlsZHJlbikge1xcbiAgICAgIGF0dHJzLnJvbGUgPSAnZ3JvdXAnO1xcbiAgICAgIGF0dHJzWydhcmlhLWxhYmVsJ10gPSBkYXRhLnRleHQ7XFxuICAgICAgZGVsZXRlIGF0dHJzWydhcmlhLXNlbGVjdGVkJ107XFxuICAgIH1cXG5cXG4gICAgZm9yICh2YXIgYXR0ciBpbiBhdHRycykge1xcbiAgICAgIHZhciB2YWwgPSBhdHRyc1thdHRyXTtcXG5cXG4gICAgICBvcHRpb24uc2V0QXR0cmlidXRlKGF0dHIsIHZhbCk7XFxuICAgIH1cXG5cXG4gICAgaWYgKGRhdGEuY2hpbGRyZW4pIHtcXG4gICAgICB2YXIgJG9wdGlvbiA9ICQob3B0aW9uKTtcXG5cXG4gICAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHJvbmcnKTtcXG4gICAgICBsYWJlbC5jbGFzc05hbWUgPSAnc2VsZWN0Mi1yZXN1bHRzX19ncm91cCc7XFxuXFxuICAgICAgdmFyICRsYWJlbCA9ICQobGFiZWwpO1xcbiAgICAgIHRoaXMudGVtcGxhdGUoZGF0YSwgbGFiZWwpO1xcblxcbiAgICAgIHZhciAkY2hpbGRyZW4gPSBbXTtcXG5cXG4gICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGRhdGEuY2hpbGRyZW4ubGVuZ3RoOyBjKyspIHtcXG4gICAgICAgIHZhciBjaGlsZCA9IGRhdGEuY2hpbGRyZW5bY107XFxuXFxuICAgICAgICB2YXIgJGNoaWxkID0gdGhpcy5vcHRpb24oY2hpbGQpO1xcblxcbiAgICAgICAgJGNoaWxkcmVuLnB1c2goJGNoaWxkKTtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyICRjaGlsZHJlbkNvbnRhaW5lciA9ICQoJzx1bD48L3VsPicsIHtcXG4gICAgICAgICdjbGFzcyc6ICdzZWxlY3QyLXJlc3VsdHNfX29wdGlvbnMgc2VsZWN0Mi1yZXN1bHRzX19vcHRpb25zLS1uZXN0ZWQnXFxuICAgICAgfSk7XFxuXFxuICAgICAgJGNoaWxkcmVuQ29udGFpbmVyLmFwcGVuZCgkY2hpbGRyZW4pO1xcblxcbiAgICAgICRvcHRpb24uYXBwZW5kKGxhYmVsKTtcXG4gICAgICAkb3B0aW9uLmFwcGVuZCgkY2hpbGRyZW5Db250YWluZXIpO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIHRoaXMudGVtcGxhdGUoZGF0YSwgb3B0aW9uKTtcXG4gICAgfVxcblxcbiAgICBVdGlscy5TdG9yZURhdGEob3B0aW9uLCAnZGF0YScsIGRhdGEpO1xcblxcbiAgICByZXR1cm4gb3B0aW9uO1xcbiAgfTtcXG5cXG4gIFJlc3VsdHMucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgdmFyIGlkID0gY29udGFpbmVyLmlkICsgJy1yZXN1bHRzJztcXG5cXG4gICAgdGhpcy4kcmVzdWx0cy5hdHRyKCdpZCcsIGlkKTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmFsbCcsIGZ1bmN0aW9uIChwYXJhbXMpIHtcXG4gICAgICBzZWxmLmNsZWFyKCk7XFxuICAgICAgc2VsZi5hcHBlbmQocGFyYW1zLmRhdGEpO1xcblxcbiAgICAgIGlmIChjb250YWluZXIuaXNPcGVuKCkpIHtcXG4gICAgICAgIHNlbGYuc2V0Q2xhc3NlcygpO1xcbiAgICAgICAgc2VsZi5oaWdobGlnaHRGaXJzdEl0ZW0oKTtcXG4gICAgICB9XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6YXBwZW5kJywgZnVuY3Rpb24gKHBhcmFtcykge1xcbiAgICAgIHNlbGYuYXBwZW5kKHBhcmFtcy5kYXRhKTtcXG5cXG4gICAgICBpZiAoY29udGFpbmVyLmlzT3BlbigpKSB7XFxuICAgICAgICBzZWxmLnNldENsYXNzZXMoKTtcXG4gICAgICB9XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ3F1ZXJ5JywgZnVuY3Rpb24gKHBhcmFtcykge1xcbiAgICAgIHNlbGYuaGlkZU1lc3NhZ2VzKCk7XFxuICAgICAgc2VsZi5zaG93TG9hZGluZyhwYXJhbXMpO1xcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgaWYgKCFjb250YWluZXIuaXNPcGVuKCkpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuXFxuICAgICAgc2VsZi5zZXRDbGFzc2VzKCk7XFxuXFxuICAgICAgaWYgKHNlbGYub3B0aW9ucy5nZXQoJ3Njcm9sbEFmdGVyU2VsZWN0JykpIHtcXG4gICAgICAgIHNlbGYuaGlnaGxpZ2h0Rmlyc3RJdGVtKCk7XFxuICAgICAgfVxcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCd1bnNlbGVjdCcsIGZ1bmN0aW9uICgpIHtcXG4gICAgICBpZiAoIWNvbnRhaW5lci5pc09wZW4oKSkge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH1cXG5cXG4gICAgICBzZWxmLnNldENsYXNzZXMoKTtcXG5cXG4gICAgICBpZiAoc2VsZi5vcHRpb25zLmdldCgnc2Nyb2xsQWZ0ZXJTZWxlY3QnKSkge1xcbiAgICAgICAgc2VsZi5oaWdobGlnaHRGaXJzdEl0ZW0oKTtcXG4gICAgICB9XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgLy8gV2hlbiB0aGUgZHJvcGRvd24gaXMgb3BlbiwgYXJpYS1leHBlbmRlZD1cXFwidHJ1ZVxcXCJcXG4gICAgICBzZWxmLiRyZXN1bHRzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xcbiAgICAgIHNlbGYuJHJlc3VsdHMuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcXG5cXG4gICAgICBzZWxmLnNldENsYXNzZXMoKTtcXG4gICAgICBzZWxmLmVuc3VyZUhpZ2hsaWdodFZpc2libGUoKTtcXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgLy8gV2hlbiB0aGUgZHJvcGRvd24gaXMgY2xvc2VkLCBhcmlhLWV4cGVuZGVkPVxcXCJmYWxzZVxcXCJcXG4gICAgICBzZWxmLiRyZXN1bHRzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcXG4gICAgICBzZWxmLiRyZXN1bHRzLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcXG4gICAgICBzZWxmLiRyZXN1bHRzLnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOnRvZ2dsZScsIGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgJGhpZ2hsaWdodGVkID0gc2VsZi5nZXRIaWdobGlnaHRlZFJlc3VsdHMoKTtcXG5cXG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmxlbmd0aCA9PT0gMCkge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH1cXG5cXG4gICAgICAkaGlnaGxpZ2h0ZWQudHJpZ2dlcignbW91c2V1cCcpO1xcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOnNlbGVjdCcsIGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgJGhpZ2hsaWdodGVkID0gc2VsZi5nZXRIaWdobGlnaHRlZFJlc3VsdHMoKTtcXG5cXG4gICAgICBpZiAoJGhpZ2hsaWdodGVkLmxlbmd0aCA9PT0gMCkge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgZGF0YSA9IFV0aWxzLkdldERhdGEoJGhpZ2hsaWdodGVkWzBdLCAnZGF0YScpO1xcblxcbiAgICAgIGlmICgkaGlnaGxpZ2h0ZWQuYXR0cignYXJpYS1zZWxlY3RlZCcpID09ICd0cnVlJykge1xcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdjbG9zZScsIHt9KTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdzZWxlY3QnLCB7XFxuICAgICAgICAgIGRhdGE6IGRhdGFcXG4gICAgICAgIH0pO1xcbiAgICAgIH1cXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czpwcmV2aW91cycsIGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgJGhpZ2hsaWdodGVkID0gc2VsZi5nZXRIaWdobGlnaHRlZFJlc3VsdHMoKTtcXG5cXG4gICAgICB2YXIgJG9wdGlvbnMgPSBzZWxmLiRyZXN1bHRzLmZpbmQoJ1thcmlhLXNlbGVjdGVkXScpO1xcblxcbiAgICAgIHZhciBjdXJyZW50SW5kZXggPSAkb3B0aW9ucy5pbmRleCgkaGlnaGxpZ2h0ZWQpO1xcblxcbiAgICAgIC8vIElmIHdlIGFyZSBhbHJlYWR5IGF0IHRoZSB0b3AsIGRvbid0IG1vdmUgZnVydGhlclxcbiAgICAgIC8vIElmIG5vIG9wdGlvbnMsIGN1cnJlbnRJbmRleCB3aWxsIGJlIC0xXFxuICAgICAgaWYgKGN1cnJlbnRJbmRleCA8PSAwKSB7XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfVxcblxcbiAgICAgIHZhciBuZXh0SW5kZXggPSBjdXJyZW50SW5kZXggLSAxO1xcblxcbiAgICAgIC8vIElmIG5vbmUgYXJlIGhpZ2hsaWdodGVkLCBoaWdobGlnaHQgdGhlIGZpcnN0XFxuICAgICAgaWYgKCRoaWdobGlnaHRlZC5sZW5ndGggPT09IDApIHtcXG4gICAgICAgIG5leHRJbmRleCA9IDA7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciAkbmV4dCA9ICRvcHRpb25zLmVxKG5leHRJbmRleCk7XFxuXFxuICAgICAgJG5leHQudHJpZ2dlcignbW91c2VlbnRlcicpO1xcblxcbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gc2VsZi4kcmVzdWx0cy5vZmZzZXQoKS50b3A7XFxuICAgICAgdmFyIG5leHRUb3AgPSAkbmV4dC5vZmZzZXQoKS50b3A7XFxuICAgICAgdmFyIG5leHRPZmZzZXQgPSBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgpICsgKG5leHRUb3AgLSBjdXJyZW50T2Zmc2V0KTtcXG5cXG4gICAgICBpZiAobmV4dEluZGV4ID09PSAwKSB7XFxuICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcXG4gICAgICB9IGVsc2UgaWYgKG5leHRUb3AgLSBjdXJyZW50T2Zmc2V0IDwgMCkge1xcbiAgICAgICAgc2VsZi4kcmVzdWx0cy5zY3JvbGxUb3AobmV4dE9mZnNldCk7XFxuICAgICAgfVxcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOm5leHQnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyICRoaWdobGlnaHRlZCA9IHNlbGYuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7XFxuXFxuICAgICAgdmFyICRvcHRpb25zID0gc2VsZi4kcmVzdWx0cy5maW5kKCdbYXJpYS1zZWxlY3RlZF0nKTtcXG5cXG4gICAgICB2YXIgY3VycmVudEluZGV4ID0gJG9wdGlvbnMuaW5kZXgoJGhpZ2hsaWdodGVkKTtcXG5cXG4gICAgICB2YXIgbmV4dEluZGV4ID0gY3VycmVudEluZGV4ICsgMTtcXG5cXG4gICAgICAvLyBJZiB3ZSBhcmUgYXQgdGhlIGxhc3Qgb3B0aW9uLCBzdGF5IHRoZXJlXFxuICAgICAgaWYgKG5leHRJbmRleCA+PSAkb3B0aW9ucy5sZW5ndGgpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyICRuZXh0ID0gJG9wdGlvbnMuZXEobmV4dEluZGV4KTtcXG5cXG4gICAgICAkbmV4dC50cmlnZ2VyKCdtb3VzZWVudGVyJyk7XFxuXFxuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBzZWxmLiRyZXN1bHRzLm9mZnNldCgpLnRvcCArXFxuICAgICAgICBzZWxmLiRyZXN1bHRzLm91dGVySGVpZ2h0KGZhbHNlKTtcXG4gICAgICB2YXIgbmV4dEJvdHRvbSA9ICRuZXh0Lm9mZnNldCgpLnRvcCArICRuZXh0Lm91dGVySGVpZ2h0KGZhbHNlKTtcXG4gICAgICB2YXIgbmV4dE9mZnNldCA9IHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKCkgKyBuZXh0Qm90dG9tIC0gY3VycmVudE9mZnNldDtcXG5cXG4gICAgICBpZiAobmV4dEluZGV4ID09PSAwKSB7XFxuICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcXG4gICAgICB9IGVsc2UgaWYgKG5leHRCb3R0b20gPiBjdXJyZW50T2Zmc2V0KSB7XFxuICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcChuZXh0T2Zmc2V0KTtcXG4gICAgICB9XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6Zm9jdXMnLCBmdW5jdGlvbiAocGFyYW1zKSB7XFxuICAgICAgcGFyYW1zLmVsZW1lbnQuYWRkQ2xhc3MoJ3NlbGVjdDItcmVzdWx0c19fb3B0aW9uLS1oaWdobGlnaHRlZCcpO1xcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOm1lc3NhZ2UnLCBmdW5jdGlvbiAocGFyYW1zKSB7XFxuICAgICAgc2VsZi5kaXNwbGF5TWVzc2FnZShwYXJhbXMpO1xcbiAgICB9KTtcXG5cXG4gICAgaWYgKCQuZm4ubW91c2V3aGVlbCkge1xcbiAgICAgIHRoaXMuJHJlc3VsdHMub24oJ21vdXNld2hlZWwnLCBmdW5jdGlvbiAoZSkge1xcbiAgICAgICAgdmFyIHRvcCA9IHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKCk7XFxuXFxuICAgICAgICB2YXIgYm90dG9tID0gc2VsZi4kcmVzdWx0cy5nZXQoMCkuc2Nyb2xsSGVpZ2h0IC0gdG9wICsgZS5kZWx0YVk7XFxuXFxuICAgICAgICB2YXIgaXNBdFRvcCA9IGUuZGVsdGFZID4gMCAmJiB0b3AgLSBlLmRlbHRhWSA8PSAwO1xcbiAgICAgICAgdmFyIGlzQXRCb3R0b20gPSBlLmRlbHRhWSA8IDAgJiYgYm90dG9tIDw9IHNlbGYuJHJlc3VsdHMuaGVpZ2h0KCk7XFxuXFxuICAgICAgICBpZiAoaXNBdFRvcCkge1xcbiAgICAgICAgICBzZWxmLiRyZXN1bHRzLnNjcm9sbFRvcCgwKTtcXG5cXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xcbiAgICAgICAgfSBlbHNlIGlmIChpc0F0Qm90dG9tKSB7XFxuICAgICAgICAgIHNlbGYuJHJlc3VsdHMuc2Nyb2xsVG9wKFxcbiAgICAgICAgICAgIHNlbGYuJHJlc3VsdHMuZ2V0KDApLnNjcm9sbEhlaWdodCAtIHNlbGYuJHJlc3VsdHMuaGVpZ2h0KClcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9XFxuXFxuICAgIHRoaXMuJHJlc3VsdHMub24oJ21vdXNldXAnLCAnLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdJyxcXG4gICAgICBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcXG5cXG4gICAgICB2YXIgZGF0YSA9IFV0aWxzLkdldERhdGEodGhpcywgJ2RhdGEnKTtcXG5cXG4gICAgICBpZiAoJHRoaXMuYXR0cignYXJpYS1zZWxlY3RlZCcpID09PSAndHJ1ZScpIHtcXG4gICAgICAgIGlmIChzZWxmLm9wdGlvbnMuZ2V0KCdtdWx0aXBsZScpKSB7XFxuICAgICAgICAgIHNlbGYudHJpZ2dlcigndW5zZWxlY3QnLCB7XFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0LFxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcXG4gICAgICAgICAgfSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoJ2Nsb3NlJywge30pO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH1cXG5cXG4gICAgICBzZWxmLnRyaWdnZXIoJ3NlbGVjdCcsIHtcXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dCxcXG4gICAgICAgIGRhdGE6IGRhdGFcXG4gICAgICB9KTtcXG4gICAgfSk7XFxuXFxuICAgIHRoaXMuJHJlc3VsdHMub24oJ21vdXNlZW50ZXInLCAnLnNlbGVjdDItcmVzdWx0c19fb3B0aW9uW2FyaWEtc2VsZWN0ZWRdJyxcXG4gICAgICBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgdmFyIGRhdGEgPSBVdGlscy5HZXREYXRhKHRoaXMsICdkYXRhJyk7XFxuXFxuICAgICAgc2VsZi5nZXRIaWdobGlnaHRlZFJlc3VsdHMoKVxcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItcmVzdWx0c19fb3B0aW9uLS1oaWdobGlnaHRlZCcpO1xcblxcbiAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czpmb2N1cycsIHtcXG4gICAgICAgIGRhdGE6IGRhdGEsXFxuICAgICAgICBlbGVtZW50OiAkKHRoaXMpXFxuICAgICAgfSk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIFJlc3VsdHMucHJvdG90eXBlLmdldEhpZ2hsaWdodGVkUmVzdWx0cyA9IGZ1bmN0aW9uICgpIHtcXG4gICAgdmFyICRoaWdobGlnaHRlZCA9IHRoaXMuJHJlc3VsdHNcXG4gICAgLmZpbmQoJy5zZWxlY3QyLXJlc3VsdHNfX29wdGlvbi0taGlnaGxpZ2h0ZWQnKTtcXG5cXG4gICAgcmV0dXJuICRoaWdobGlnaHRlZDtcXG4gIH07XFxuXFxuICBSZXN1bHRzLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xcbiAgICB0aGlzLiRyZXN1bHRzLnJlbW92ZSgpO1xcbiAgfTtcXG5cXG4gIFJlc3VsdHMucHJvdG90eXBlLmVuc3VyZUhpZ2hsaWdodFZpc2libGUgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHZhciAkaGlnaGxpZ2h0ZWQgPSB0aGlzLmdldEhpZ2hsaWdodGVkUmVzdWx0cygpO1xcblxcbiAgICBpZiAoJGhpZ2hsaWdodGVkLmxlbmd0aCA9PT0gMCkge1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcblxcbiAgICB2YXIgJG9wdGlvbnMgPSB0aGlzLiRyZXN1bHRzLmZpbmQoJ1thcmlhLXNlbGVjdGVkXScpO1xcblxcbiAgICB2YXIgY3VycmVudEluZGV4ID0gJG9wdGlvbnMuaW5kZXgoJGhpZ2hsaWdodGVkKTtcXG5cXG4gICAgdmFyIGN1cnJlbnRPZmZzZXQgPSB0aGlzLiRyZXN1bHRzLm9mZnNldCgpLnRvcDtcXG4gICAgdmFyIG5leHRUb3AgPSAkaGlnaGxpZ2h0ZWQub2Zmc2V0KCkudG9wO1xcbiAgICB2YXIgbmV4dE9mZnNldCA9IHRoaXMuJHJlc3VsdHMuc2Nyb2xsVG9wKCkgKyAobmV4dFRvcCAtIGN1cnJlbnRPZmZzZXQpO1xcblxcbiAgICB2YXIgb2Zmc2V0RGVsdGEgPSBuZXh0VG9wIC0gY3VycmVudE9mZnNldDtcXG4gICAgbmV4dE9mZnNldCAtPSAkaGlnaGxpZ2h0ZWQub3V0ZXJIZWlnaHQoZmFsc2UpICogMjtcXG5cXG4gICAgaWYgKGN1cnJlbnRJbmRleCA8PSAyKSB7XFxuICAgICAgdGhpcy4kcmVzdWx0cy5zY3JvbGxUb3AoMCk7XFxuICAgIH0gZWxzZSBpZiAob2Zmc2V0RGVsdGEgPiB0aGlzLiRyZXN1bHRzLm91dGVySGVpZ2h0KCkgfHwgb2Zmc2V0RGVsdGEgPCAwKSB7XFxuICAgICAgdGhpcy4kcmVzdWx0cy5zY3JvbGxUb3AobmV4dE9mZnNldCk7XFxuICAgIH1cXG4gIH07XFxuXFxuICBSZXN1bHRzLnByb3RvdHlwZS50ZW1wbGF0ZSA9IGZ1bmN0aW9uIChyZXN1bHQsIGNvbnRhaW5lcikge1xcbiAgICB2YXIgdGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0ZW1wbGF0ZVJlc3VsdCcpO1xcbiAgICB2YXIgZXNjYXBlTWFya3VwID0gdGhpcy5vcHRpb25zLmdldCgnZXNjYXBlTWFya3VwJyk7XFxuXFxuICAgIHZhciBjb250ZW50ID0gdGVtcGxhdGUocmVzdWx0LCBjb250YWluZXIpO1xcblxcbiAgICBpZiAoY29udGVudCA9PSBudWxsKSB7XFxuICAgICAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XFxuICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IGVzY2FwZU1hcmt1cChjb250ZW50KTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAkKGNvbnRhaW5lcikuYXBwZW5kKGNvbnRlbnQpO1xcbiAgICB9XFxuICB9O1xcblxcbiAgcmV0dXJuIFJlc3VsdHM7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2tleXMnLFtcXG5cXG5dLCBmdW5jdGlvbiAoKSB7XFxuICB2YXIgS0VZUyA9IHtcXG4gICAgQkFDS1NQQUNFOiA4LFxcbiAgICBUQUI6IDksXFxuICAgIEVOVEVSOiAxMyxcXG4gICAgU0hJRlQ6IDE2LFxcbiAgICBDVFJMOiAxNyxcXG4gICAgQUxUOiAxOCxcXG4gICAgRVNDOiAyNyxcXG4gICAgU1BBQ0U6IDMyLFxcbiAgICBQQUdFX1VQOiAzMyxcXG4gICAgUEFHRV9ET1dOOiAzNCxcXG4gICAgRU5EOiAzNSxcXG4gICAgSE9NRTogMzYsXFxuICAgIExFRlQ6IDM3LFxcbiAgICBVUDogMzgsXFxuICAgIFJJR0hUOiAzOSxcXG4gICAgRE9XTjogNDAsXFxuICAgIERFTEVURTogNDZcXG4gIH07XFxuXFxuICByZXR1cm4gS0VZUztcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvc2VsZWN0aW9uL2Jhc2UnLFtcXG4gICdqcXVlcnknLFxcbiAgJy4uL3V0aWxzJyxcXG4gICcuLi9rZXlzJ1xcbl0sIGZ1bmN0aW9uICgkLCBVdGlscywgS0VZUykge1xcbiAgZnVuY3Rpb24gQmFzZVNlbGVjdGlvbiAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcXG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xcblxcbiAgICBCYXNlU2VsZWN0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xcbiAgfVxcblxcbiAgVXRpbHMuRXh0ZW5kKEJhc2VTZWxlY3Rpb24sIFV0aWxzLk9ic2VydmFibGUpO1xcblxcbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgJHNlbGVjdGlvbiA9ICQoXFxuICAgICAgJzxzcGFuIGNsYXNzPVxcXCJzZWxlY3QyLXNlbGVjdGlvblxcXCIgcm9sZT1cXFwiY29tYm9ib3hcXFwiICcgK1xcbiAgICAgICcgYXJpYS1oYXNwb3B1cD1cXFwidHJ1ZVxcXCIgYXJpYS1leHBhbmRlZD1cXFwiZmFsc2VcXFwiPicgK1xcbiAgICAgICc8L3NwYW4+J1xcbiAgICApO1xcblxcbiAgICB0aGlzLl90YWJpbmRleCA9IDA7XFxuXFxuICAgIGlmIChVdGlscy5HZXREYXRhKHRoaXMuJGVsZW1lbnRbMF0sICdvbGQtdGFiaW5kZXgnKSAhPSBudWxsKSB7XFxuICAgICAgdGhpcy5fdGFiaW5kZXggPSBVdGlscy5HZXREYXRhKHRoaXMuJGVsZW1lbnRbMF0sICdvbGQtdGFiaW5kZXgnKTtcXG4gICAgfSBlbHNlIGlmICh0aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykgIT0gbnVsbCkge1xcbiAgICAgIHRoaXMuX3RhYmluZGV4ID0gdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcpO1xcbiAgICB9XFxuXFxuICAgICRzZWxlY3Rpb24uYXR0cigndGl0bGUnLCB0aGlzLiRlbGVtZW50LmF0dHIoJ3RpdGxlJykpO1xcbiAgICAkc2VsZWN0aW9uLmF0dHIoJ3RhYmluZGV4JywgdGhpcy5fdGFiaW5kZXgpO1xcbiAgICAkc2VsZWN0aW9uLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcXG5cXG4gICAgdGhpcy4kc2VsZWN0aW9uID0gJHNlbGVjdGlvbjtcXG5cXG4gICAgcmV0dXJuICRzZWxlY3Rpb247XFxuICB9O1xcblxcbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChjb250YWluZXIsICRjb250YWluZXIpIHtcXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcblxcbiAgICB2YXIgcmVzdWx0c0lkID0gY29udGFpbmVyLmlkICsgJy1yZXN1bHRzJztcXG5cXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XFxuXFxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignZm9jdXMnLCBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgc2VsZi50cmlnZ2VyKCdmb2N1cycsIGV2dCk7XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2JsdXInLCBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgc2VsZi5faGFuZGxlQmx1cihldnQpO1xcbiAgICB9KTtcXG5cXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgIHNlbGYudHJpZ2dlcigna2V5cHJlc3MnLCBldnQpO1xcblxcbiAgICAgIGlmIChldnQud2hpY2ggPT09IEtFWVMuU1BBQ0UpIHtcXG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICAgIH1cXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czpmb2N1cycsIGZ1bmN0aW9uIChwYXJhbXMpIHtcXG4gICAgICBzZWxmLiRzZWxlY3Rpb24uYXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgcGFyYW1zLmRhdGEuX3Jlc3VsdElkKTtcXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0aW9uOnVwZGF0ZScsIGZ1bmN0aW9uIChwYXJhbXMpIHtcXG4gICAgICBzZWxmLnVwZGF0ZShwYXJhbXMuZGF0YSk7XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgLy8gV2hlbiB0aGUgZHJvcGRvd24gaXMgb3BlbiwgYXJpYS1leHBhbmRlZD1cXFwidHJ1ZVxcXCJcXG4gICAgICBzZWxmLiRzZWxlY3Rpb24uYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XFxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ2FyaWEtb3ducycsIHJlc3VsdHNJZCk7XFxuXFxuICAgICAgc2VsZi5fYXR0YWNoQ2xvc2VIYW5kbGVyKGNvbnRhaW5lcik7XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xcbiAgICAgIC8vIFdoZW4gdGhlIGRyb3Bkb3duIGlzIGNsb3NlZCwgYXJpYS1leHBhbmRlZD1cXFwiZmFsc2VcXFwiXFxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcXG4gICAgICBzZWxmLiRzZWxlY3Rpb24ucmVtb3ZlQXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50Jyk7XFxuICAgICAgc2VsZi4kc2VsZWN0aW9uLnJlbW92ZUF0dHIoJ2FyaWEtb3ducycpO1xcblxcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi50cmlnZ2VyKCdmb2N1cycpO1xcblxcbiAgICAgIHNlbGYuX2RldGFjaENsb3NlSGFuZGxlcihjb250YWluZXIpO1xcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdlbmFibGUnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ3RhYmluZGV4Jywgc2VsZi5fdGFiaW5kZXgpO1xcbiAgICAgIHNlbGYuJHNlbGVjdGlvbi5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ2Rpc2FibGUnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XFxuICAgICAgc2VsZi4kc2VsZWN0aW9uLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xcbiAgICB9KTtcXG4gIH07XFxuXFxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS5faGFuZGxlQmx1ciA9IGZ1bmN0aW9uIChldnQpIHtcXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcblxcbiAgICAvLyBUaGlzIG5lZWRzIHRvIGJlIGRlbGF5ZWQgYXMgdGhlIGFjdGl2ZSBlbGVtZW50IGlzIHRoZSBib2R5IHdoZW4gdGhlIHRhYlxcbiAgICAvLyBrZXkgaXMgcHJlc3NlZCwgcG9zc2libHkgYWxvbmcgd2l0aCBvdGhlcnMuXFxuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcXG4gICAgICAvLyBEb24ndCB0cmlnZ2VyIGBibHVyYCBpZiB0aGUgZm9jdXMgaXMgc3RpbGwgaW4gdGhlIHNlbGVjdGlvblxcbiAgICAgIGlmIChcXG4gICAgICAgIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09IHNlbGYuJHNlbGVjdGlvblswXSkgfHxcXG4gICAgICAgICgkLmNvbnRhaW5zKHNlbGYuJHNlbGVjdGlvblswXSwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpXFxuICAgICAgKSB7XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfVxcblxcbiAgICAgIHNlbGYudHJpZ2dlcignYmx1cicsIGV2dCk7XFxuICAgIH0sIDEpO1xcbiAgfTtcXG5cXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLl9hdHRhY2hDbG9zZUhhbmRsZXIgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XFxuXFxuICAgICQoZG9jdW1lbnQuYm9keSkub24oJ21vdXNlZG93bi5zZWxlY3QyLicgKyBjb250YWluZXIuaWQsIGZ1bmN0aW9uIChlKSB7XFxuICAgICAgdmFyICR0YXJnZXQgPSAkKGUudGFyZ2V0KTtcXG5cXG4gICAgICB2YXIgJHNlbGVjdCA9ICR0YXJnZXQuY2xvc2VzdCgnLnNlbGVjdDInKTtcXG5cXG4gICAgICB2YXIgJGFsbCA9ICQoJy5zZWxlY3QyLnNlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XFxuXFxuICAgICAgJGFsbC5lYWNoKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIGlmICh0aGlzID09ICRzZWxlY3RbMF0pIHtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgdmFyICRlbGVtZW50ID0gVXRpbHMuR2V0RGF0YSh0aGlzLCAnZWxlbWVudCcpO1xcblxcbiAgICAgICAgJGVsZW1lbnQuc2VsZWN0MignY2xvc2UnKTtcXG4gICAgICB9KTtcXG4gICAgfSk7XFxuICB9O1xcblxcbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUuX2RldGFjaENsb3NlSGFuZGxlciA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcXG4gICAgJChkb2N1bWVudC5ib2R5KS5vZmYoJ21vdXNlZG93bi5zZWxlY3QyLicgKyBjb250YWluZXIuaWQpO1xcbiAgfTtcXG5cXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCRzZWxlY3Rpb24sICRjb250YWluZXIpIHtcXG4gICAgdmFyICRzZWxlY3Rpb25Db250YWluZXIgPSAkY29udGFpbmVyLmZpbmQoJy5zZWxlY3Rpb24nKTtcXG4gICAgJHNlbGVjdGlvbkNvbnRhaW5lci5hcHBlbmQoJHNlbGVjdGlvbik7XFxuICB9O1xcblxcbiAgQmFzZVNlbGVjdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgdGhpcy5fZGV0YWNoQ2xvc2VIYW5kbGVyKHRoaXMuY29udGFpbmVyKTtcXG4gIH07XFxuXFxuICBCYXNlU2VsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgdXBkYXRlYCBtZXRob2QgbXVzdCBiZSBkZWZpbmVkIGluIGNoaWxkIGNsYXNzZXMuJyk7XFxuICB9O1xcblxcbiAgLyoqXFxuICAgKiBIZWxwZXIgbWV0aG9kIHRvIGFic3RyYWN0IHRoZSBcXFwiZW5hYmxlZFxcXCIgKG5vdCBcXFwiZGlzYWJsZWRcXFwiKSBzdGF0ZSBvZiB0aGlzXFxuICAgKiBvYmplY3QuXFxuICAgKlxcbiAgICogQHJldHVybiB7dHJ1ZX0gaWYgdGhlIGluc3RhbmNlIGlzIG5vdCBkaXNhYmxlZC5cXG4gICAqIEByZXR1cm4ge2ZhbHNlfSBpZiB0aGUgaW5zdGFuY2UgaXMgZGlzYWJsZWQuXFxuICAgKi9cXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLmlzRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgcmV0dXJuICF0aGlzLmlzRGlzYWJsZWQoKTtcXG4gIH07XFxuXFxuICAvKipcXG4gICAqIEhlbHBlciBtZXRob2QgdG8gYWJzdHJhY3QgdGhlIFxcXCJkaXNhYmxlZFxcXCIgc3RhdGUgb2YgdGhpcyBvYmplY3QuXFxuICAgKlxcbiAgICogQHJldHVybiB7dHJ1ZX0gaWYgdGhlIGRpc2FibGVkIG9wdGlvbiBpcyB0cnVlLlxcbiAgICogQHJldHVybiB7ZmFsc2V9IGlmIHRoZSBkaXNhYmxlZCBvcHRpb24gaXMgZmFsc2UuXFxuICAgKi9cXG4gIEJhc2VTZWxlY3Rpb24ucHJvdG90eXBlLmlzRGlzYWJsZWQgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ2V0KCdkaXNhYmxlZCcpO1xcbiAgfTtcXG5cXG4gIHJldHVybiBCYXNlU2VsZWN0aW9uO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9zZWxlY3Rpb24vc2luZ2xlJyxbXFxuICAnanF1ZXJ5JyxcXG4gICcuL2Jhc2UnLFxcbiAgJy4uL3V0aWxzJyxcXG4gICcuLi9rZXlzJ1xcbl0sIGZ1bmN0aW9uICgkLCBCYXNlU2VsZWN0aW9uLCBVdGlscywgS0VZUykge1xcbiAgZnVuY3Rpb24gU2luZ2xlU2VsZWN0aW9uICgpIHtcXG4gICAgU2luZ2xlU2VsZWN0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgfVxcblxcbiAgVXRpbHMuRXh0ZW5kKFNpbmdsZVNlbGVjdGlvbiwgQmFzZVNlbGVjdGlvbik7XFxuXFxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcXG4gICAgdmFyICRzZWxlY3Rpb24gPSBTaW5nbGVTZWxlY3Rpb24uX19zdXBlcl9fLnJlbmRlci5jYWxsKHRoaXMpO1xcblxcbiAgICAkc2VsZWN0aW9uLmFkZENsYXNzKCdzZWxlY3QyLXNlbGVjdGlvbi0tc2luZ2xlJyk7XFxuXFxuICAgICRzZWxlY3Rpb24uaHRtbChcXG4gICAgICAnPHNwYW4gY2xhc3M9XFxcInNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZFxcXCI+PC9zcGFuPicgK1xcbiAgICAgICc8c3BhbiBjbGFzcz1cXFwic2VsZWN0Mi1zZWxlY3Rpb25fX2Fycm93XFxcIiByb2xlPVxcXCJwcmVzZW50YXRpb25cXFwiPicgK1xcbiAgICAgICAgJzxiIHJvbGU9XFxcInByZXNlbnRhdGlvblxcXCI+PC9iPicgK1xcbiAgICAgICc8L3NwYW4+J1xcbiAgICApO1xcblxcbiAgICByZXR1cm4gJHNlbGVjdGlvbjtcXG4gIH07XFxuXFxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgU2luZ2xlU2VsZWN0aW9uLl9fc3VwZXJfXy5iaW5kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuXFxuICAgIHZhciBpZCA9IGNvbnRhaW5lci5pZCArICctY29udGFpbmVyJztcXG5cXG4gICAgdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKVxcbiAgICAgIC5hdHRyKCdpZCcsIGlkKVxcbiAgICAgIC5hdHRyKCdyb2xlJywgJ3RleHRib3gnKVxcbiAgICAgIC5hdHRyKCdhcmlhLXJlYWRvbmx5JywgJ3RydWUnKTtcXG4gICAgdGhpcy4kc2VsZWN0aW9uLmF0dHIoJ2FyaWEtbGFiZWxsZWRieScsIGlkKTtcXG5cXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgLy8gT25seSByZXNwb25kIHRvIGxlZnQgY2xpY2tzXFxuICAgICAgaWYgKGV2dC53aGljaCAhPT0gMSkge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH1cXG5cXG4gICAgICBzZWxmLnRyaWdnZXIoJ3RvZ2dsZScsIHtcXG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxcbiAgICAgIH0pO1xcbiAgICB9KTtcXG5cXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdmb2N1cycsIGZ1bmN0aW9uIChldnQpIHtcXG4gICAgICAvLyBVc2VyIGZvY3VzZXMgb24gdGhlIGNvbnRhaW5lclxcbiAgICB9KTtcXG5cXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKCdibHVyJywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgIC8vIFVzZXIgZXhpdHMgdGhlIGNvbnRhaW5lclxcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdmb2N1cycsIGZ1bmN0aW9uIChldnQpIHtcXG4gICAgICBpZiAoIWNvbnRhaW5lci5pc09wZW4oKSkge1xcbiAgICAgICAgc2VsZi4kc2VsZWN0aW9uLnRyaWdnZXIoJ2ZvY3VzJyk7XFxuICAgICAgfVxcbiAgICB9KTtcXG4gIH07XFxuXFxuICBTaW5nbGVTZWxlY3Rpb24ucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgJHJlbmRlcmVkID0gdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKTtcXG4gICAgJHJlbmRlcmVkLmVtcHR5KCk7XFxuICAgICRyZW5kZXJlZC5yZW1vdmVBdHRyKCd0aXRsZScpOyAvLyBjbGVhciB0b29sdGlwIG9uIGVtcHR5XFxuICB9O1xcblxcbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS5kaXNwbGF5ID0gZnVuY3Rpb24gKGRhdGEsIGNvbnRhaW5lcikge1xcbiAgICB2YXIgdGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0ZW1wbGF0ZVNlbGVjdGlvbicpO1xcbiAgICB2YXIgZXNjYXBlTWFya3VwID0gdGhpcy5vcHRpb25zLmdldCgnZXNjYXBlTWFya3VwJyk7XFxuXFxuICAgIHJldHVybiBlc2NhcGVNYXJrdXAodGVtcGxhdGUoZGF0YSwgY29udGFpbmVyKSk7XFxuICB9O1xcblxcbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS5zZWxlY3Rpb25Db250YWluZXIgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHJldHVybiAkKCc8c3Bhbj48L3NwYW4+Jyk7XFxuICB9O1xcblxcbiAgU2luZ2xlU2VsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xcbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDApIHtcXG4gICAgICB0aGlzLmNsZWFyKCk7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuXFxuICAgIHZhciBzZWxlY3Rpb24gPSBkYXRhWzBdO1xcblxcbiAgICB2YXIgJHJlbmRlcmVkID0gdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKTtcXG4gICAgdmFyIGZvcm1hdHRlZCA9IHRoaXMuZGlzcGxheShzZWxlY3Rpb24sICRyZW5kZXJlZCk7XFxuXFxuICAgICRyZW5kZXJlZC5lbXB0eSgpLmFwcGVuZChmb3JtYXR0ZWQpO1xcblxcbiAgICB2YXIgdGl0bGUgPSBzZWxlY3Rpb24udGl0bGUgfHwgc2VsZWN0aW9uLnRleHQ7XFxuXFxuICAgIGlmICh0aXRsZSkge1xcbiAgICAgICRyZW5kZXJlZC5hdHRyKCd0aXRsZScsIHRpdGxlKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAkcmVuZGVyZWQucmVtb3ZlQXR0cigndGl0bGUnKTtcXG4gICAgfVxcbiAgfTtcXG5cXG4gIHJldHVybiBTaW5nbGVTZWxlY3Rpb247XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9tdWx0aXBsZScsW1xcbiAgJ2pxdWVyeScsXFxuICAnLi9iYXNlJyxcXG4gICcuLi91dGlscydcXG5dLCBmdW5jdGlvbiAoJCwgQmFzZVNlbGVjdGlvbiwgVXRpbHMpIHtcXG4gIGZ1bmN0aW9uIE11bHRpcGxlU2VsZWN0aW9uICgkZWxlbWVudCwgb3B0aW9ucykge1xcbiAgICBNdWx0aXBsZVNlbGVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcXG4gIH1cXG5cXG4gIFV0aWxzLkV4dGVuZChNdWx0aXBsZVNlbGVjdGlvbiwgQmFzZVNlbGVjdGlvbik7XFxuXFxuICBNdWx0aXBsZVNlbGVjdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgJHNlbGVjdGlvbiA9IE11bHRpcGxlU2VsZWN0aW9uLl9fc3VwZXJfXy5yZW5kZXIuY2FsbCh0aGlzKTtcXG5cXG4gICAgJHNlbGVjdGlvbi5hZGRDbGFzcygnc2VsZWN0Mi1zZWxlY3Rpb24tLW11bHRpcGxlJyk7XFxuXFxuICAgICRzZWxlY3Rpb24uaHRtbChcXG4gICAgICAnPHVsIGNsYXNzPVxcXCJzZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWRcXFwiPjwvdWw+J1xcbiAgICApO1xcblxcbiAgICByZXR1cm4gJHNlbGVjdGlvbjtcXG4gIH07XFxuXFxuICBNdWx0aXBsZVNlbGVjdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChjb250YWluZXIsICRjb250YWluZXIpIHtcXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcblxcbiAgICBNdWx0aXBsZVNlbGVjdGlvbi5fX3N1cGVyX18uYmluZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcblxcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgIHNlbGYudHJpZ2dlcigndG9nZ2xlJywge1xcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XFxuICAgICAgfSk7XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oXFxuICAgICAgJ2NsaWNrJyxcXG4gICAgICAnLnNlbGVjdDItc2VsZWN0aW9uX19jaG9pY2VfX3JlbW92ZScsXFxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgICAgLy8gSWdub3JlIHRoZSBldmVudCBpZiBpdCBpcyBkaXNhYmxlZFxcbiAgICAgICAgaWYgKHNlbGYuaXNEaXNhYmxlZCgpKSB7XFxuICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHZhciAkcmVtb3ZlID0gJCh0aGlzKTtcXG4gICAgICAgIHZhciAkc2VsZWN0aW9uID0gJHJlbW92ZS5wYXJlbnQoKTtcXG5cXG4gICAgICAgIHZhciBkYXRhID0gVXRpbHMuR2V0RGF0YSgkc2VsZWN0aW9uWzBdLCAnZGF0YScpO1xcblxcbiAgICAgICAgc2VsZi50cmlnZ2VyKCd1bnNlbGVjdCcsIHtcXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0LFxcbiAgICAgICAgICBkYXRhOiBkYXRhXFxuICAgICAgICB9KTtcXG4gICAgICB9XFxuICAgICk7XFxuICB9O1xcblxcbiAgTXVsdGlwbGVTZWxlY3Rpb24ucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgJHJlbmRlcmVkID0gdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKTtcXG4gICAgJHJlbmRlcmVkLmVtcHR5KCk7XFxuICAgICRyZW5kZXJlZC5yZW1vdmVBdHRyKCd0aXRsZScpO1xcbiAgfTtcXG5cXG4gIE11bHRpcGxlU2VsZWN0aW9uLnByb3RvdHlwZS5kaXNwbGF5ID0gZnVuY3Rpb24gKGRhdGEsIGNvbnRhaW5lcikge1xcbiAgICB2YXIgdGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0ZW1wbGF0ZVNlbGVjdGlvbicpO1xcbiAgICB2YXIgZXNjYXBlTWFya3VwID0gdGhpcy5vcHRpb25zLmdldCgnZXNjYXBlTWFya3VwJyk7XFxuXFxuICAgIHJldHVybiBlc2NhcGVNYXJrdXAodGVtcGxhdGUoZGF0YSwgY29udGFpbmVyKSk7XFxuICB9O1xcblxcbiAgTXVsdGlwbGVTZWxlY3Rpb24ucHJvdG90eXBlLnNlbGVjdGlvbkNvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcXG4gICAgdmFyICRjb250YWluZXIgPSAkKFxcbiAgICAgICc8bGkgY2xhc3M9XFxcInNlbGVjdDItc2VsZWN0aW9uX19jaG9pY2VcXFwiPicgK1xcbiAgICAgICAgJzxzcGFuIGNsYXNzPVxcXCJzZWxlY3QyLXNlbGVjdGlvbl9fY2hvaWNlX19yZW1vdmVcXFwiIHJvbGU9XFxcInByZXNlbnRhdGlvblxcXCI+JyArXFxuICAgICAgICAgICcmdGltZXM7JyArXFxuICAgICAgICAnPC9zcGFuPicgK1xcbiAgICAgICc8L2xpPidcXG4gICAgKTtcXG5cXG4gICAgcmV0dXJuICRjb250YWluZXI7XFxuICB9O1xcblxcbiAgTXVsdGlwbGVTZWxlY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XFxuICAgIHRoaXMuY2xlYXIoKTtcXG5cXG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuXFxuICAgIHZhciAkc2VsZWN0aW9ucyA9IFtdO1xcblxcbiAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRhdGEubGVuZ3RoOyBkKyspIHtcXG4gICAgICB2YXIgc2VsZWN0aW9uID0gZGF0YVtkXTtcXG5cXG4gICAgICB2YXIgJHNlbGVjdGlvbiA9IHRoaXMuc2VsZWN0aW9uQ29udGFpbmVyKCk7XFxuICAgICAgdmFyIGZvcm1hdHRlZCA9IHRoaXMuZGlzcGxheShzZWxlY3Rpb24sICRzZWxlY3Rpb24pO1xcblxcbiAgICAgICRzZWxlY3Rpb24uYXBwZW5kKGZvcm1hdHRlZCk7XFxuXFxuICAgICAgdmFyIHRpdGxlID0gc2VsZWN0aW9uLnRpdGxlIHx8IHNlbGVjdGlvbi50ZXh0O1xcblxcbiAgICAgIGlmICh0aXRsZSkge1xcbiAgICAgICAgJHNlbGVjdGlvbi5hdHRyKCd0aXRsZScsIHRpdGxlKTtcXG4gICAgICB9XFxuXFxuICAgICAgVXRpbHMuU3RvcmVEYXRhKCRzZWxlY3Rpb25bMF0sICdkYXRhJywgc2VsZWN0aW9uKTtcXG5cXG4gICAgICAkc2VsZWN0aW9ucy5wdXNoKCRzZWxlY3Rpb24pO1xcbiAgICB9XFxuXFxuICAgIHZhciAkcmVuZGVyZWQgPSB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpO1xcblxcbiAgICBVdGlscy5hcHBlbmRNYW55KCRyZW5kZXJlZCwgJHNlbGVjdGlvbnMpO1xcbiAgfTtcXG5cXG4gIHJldHVybiBNdWx0aXBsZVNlbGVjdGlvbjtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvc2VsZWN0aW9uL3BsYWNlaG9sZGVyJyxbXFxuICAnLi4vdXRpbHMnXFxuXSwgZnVuY3Rpb24gKFV0aWxzKSB7XFxuICBmdW5jdGlvbiBQbGFjZWhvbGRlciAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5ub3JtYWxpemVQbGFjZWhvbGRlcihvcHRpb25zLmdldCgncGxhY2Vob2xkZXInKSk7XFxuXFxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zKTtcXG4gIH1cXG5cXG4gIFBsYWNlaG9sZGVyLnByb3RvdHlwZS5ub3JtYWxpemVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChfLCBwbGFjZWhvbGRlcikge1xcbiAgICBpZiAodHlwZW9mIHBsYWNlaG9sZGVyID09PSAnc3RyaW5nJykge1xcbiAgICAgIHBsYWNlaG9sZGVyID0ge1xcbiAgICAgICAgaWQ6ICcnLFxcbiAgICAgICAgdGV4dDogcGxhY2Vob2xkZXJcXG4gICAgICB9O1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBwbGFjZWhvbGRlcjtcXG4gIH07XFxuXFxuICBQbGFjZWhvbGRlci5wcm90b3R5cGUuY3JlYXRlUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwbGFjZWhvbGRlcikge1xcbiAgICB2YXIgJHBsYWNlaG9sZGVyID0gdGhpcy5zZWxlY3Rpb25Db250YWluZXIoKTtcXG5cXG4gICAgJHBsYWNlaG9sZGVyLmh0bWwodGhpcy5kaXNwbGF5KHBsYWNlaG9sZGVyKSk7XFxuICAgICRwbGFjZWhvbGRlci5hZGRDbGFzcygnc2VsZWN0Mi1zZWxlY3Rpb25fX3BsYWNlaG9sZGVyJylcXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzZWxlY3QyLXNlbGVjdGlvbl9fY2hvaWNlJyk7XFxuXFxuICAgIHJldHVybiAkcGxhY2Vob2xkZXI7XFxuICB9O1xcblxcbiAgUGxhY2Vob2xkZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGRhdGEpIHtcXG4gICAgdmFyIHNpbmdsZVBsYWNlaG9sZGVyID0gKFxcbiAgICAgIGRhdGEubGVuZ3RoID09IDEgJiYgZGF0YVswXS5pZCAhPSB0aGlzLnBsYWNlaG9sZGVyLmlkXFxuICAgICk7XFxuICAgIHZhciBtdWx0aXBsZVNlbGVjdGlvbnMgPSBkYXRhLmxlbmd0aCA+IDE7XFxuXFxuICAgIGlmIChtdWx0aXBsZVNlbGVjdGlvbnMgfHwgc2luZ2xlUGxhY2Vob2xkZXIpIHtcXG4gICAgICByZXR1cm4gZGVjb3JhdGVkLmNhbGwodGhpcywgZGF0YSk7XFxuICAgIH1cXG5cXG4gICAgdGhpcy5jbGVhcigpO1xcblxcbiAgICB2YXIgJHBsYWNlaG9sZGVyID0gdGhpcy5jcmVhdGVQbGFjZWhvbGRlcih0aGlzLnBsYWNlaG9sZGVyKTtcXG5cXG4gICAgdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKS5hcHBlbmQoJHBsYWNlaG9sZGVyKTtcXG4gIH07XFxuXFxuICByZXR1cm4gUGxhY2Vob2xkZXI7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL3NlbGVjdGlvbi9hbGxvd0NsZWFyJyxbXFxuICAnanF1ZXJ5JyxcXG4gICcuLi9rZXlzJyxcXG4gICcuLi91dGlscydcXG5dLCBmdW5jdGlvbiAoJCwgS0VZUywgVXRpbHMpIHtcXG4gIGZ1bmN0aW9uIEFsbG93Q2xlYXIgKCkgeyB9XFxuXFxuICBBbGxvd0NsZWFyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcXG5cXG4gICAgaWYgKHRoaXMucGxhY2Vob2xkZXIgPT0gbnVsbCkge1xcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkZWJ1ZycpICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXFxuICAgICAgICAgICdTZWxlY3QyOiBUaGUgYGFsbG93Q2xlYXJgIG9wdGlvbiBzaG91bGQgYmUgdXNlZCBpbiBjb21iaW5hdGlvbiAnICtcXG4gICAgICAgICAgJ3dpdGggdGhlIGBwbGFjZWhvbGRlcmAgb3B0aW9uLidcXG4gICAgICAgICk7XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbignbW91c2Vkb3duJywgJy5zZWxlY3QyLXNlbGVjdGlvbl9fY2xlYXInLFxcbiAgICAgIGZ1bmN0aW9uIChldnQpIHtcXG4gICAgICAgIHNlbGYuX2hhbmRsZUNsZWFyKGV2dCk7XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ2tleXByZXNzJywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgIHNlbGYuX2hhbmRsZUtleWJvYXJkQ2xlYXIoZXZ0LCBjb250YWluZXIpO1xcbiAgICB9KTtcXG4gIH07XFxuXFxuICBBbGxvd0NsZWFyLnByb3RvdHlwZS5faGFuZGxlQ2xlYXIgPSBmdW5jdGlvbiAoXywgZXZ0KSB7XFxuICAgIC8vIElnbm9yZSB0aGUgZXZlbnQgaWYgaXQgaXMgZGlzYWJsZWRcXG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZCgpKSB7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuXFxuICAgIHZhciAkY2xlYXIgPSB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19jbGVhcicpO1xcblxcbiAgICAvLyBJZ25vcmUgdGhlIGV2ZW50IGlmIG5vdGhpbmcgaGFzIGJlZW4gc2VsZWN0ZWRcXG4gICAgaWYgKCRjbGVhci5sZW5ndGggPT09IDApIHtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xcblxcbiAgICB2YXIgZGF0YSA9IFV0aWxzLkdldERhdGEoJGNsZWFyWzBdLCAnZGF0YScpO1xcblxcbiAgICB2YXIgcHJldmlvdXNWYWwgPSB0aGlzLiRlbGVtZW50LnZhbCgpO1xcbiAgICB0aGlzLiRlbGVtZW50LnZhbCh0aGlzLnBsYWNlaG9sZGVyLmlkKTtcXG5cXG4gICAgdmFyIHVuc2VsZWN0RGF0YSA9IHtcXG4gICAgICBkYXRhOiBkYXRhXFxuICAgIH07XFxuICAgIHRoaXMudHJpZ2dlcignY2xlYXInLCB1bnNlbGVjdERhdGEpO1xcbiAgICBpZiAodW5zZWxlY3REYXRhLnByZXZlbnRlZCkge1xcbiAgICAgIHRoaXMuJGVsZW1lbnQudmFsKHByZXZpb3VzVmFsKTtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCBkYXRhLmxlbmd0aDsgZCsrKSB7XFxuICAgICAgdW5zZWxlY3REYXRhID0ge1xcbiAgICAgICAgZGF0YTogZGF0YVtkXVxcbiAgICAgIH07XFxuXFxuICAgICAgLy8gVHJpZ2dlciB0aGUgYHVuc2VsZWN0YCBldmVudCwgc28gcGVvcGxlIGNhbiBwcmV2ZW50IGl0IGZyb20gYmVpbmdcXG4gICAgICAvLyBjbGVhcmVkLlxcbiAgICAgIHRoaXMudHJpZ2dlcigndW5zZWxlY3QnLCB1bnNlbGVjdERhdGEpO1xcblxcbiAgICAgIC8vIElmIHRoZSBldmVudCB3YXMgcHJldmVudGVkLCBkb24ndCBjbGVhciBpdCBvdXQuXFxuICAgICAgaWYgKHVuc2VsZWN0RGF0YS5wcmV2ZW50ZWQpIHtcXG4gICAgICAgIHRoaXMuJGVsZW1lbnQudmFsKHByZXZpb3VzVmFsKTtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbnB1dCcpLnRyaWdnZXIoJ2NoYW5nZScpO1xcblxcbiAgICB0aGlzLnRyaWdnZXIoJ3RvZ2dsZScsIHt9KTtcXG4gIH07XFxuXFxuICBBbGxvd0NsZWFyLnByb3RvdHlwZS5faGFuZGxlS2V5Ym9hcmRDbGVhciA9IGZ1bmN0aW9uIChfLCBldnQsIGNvbnRhaW5lcikge1xcbiAgICBpZiAoY29udGFpbmVyLmlzT3BlbigpKSB7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuXFxuICAgIGlmIChldnQud2hpY2ggPT0gS0VZUy5ERUxFVEUgfHwgZXZ0LndoaWNoID09IEtFWVMuQkFDS1NQQUNFKSB7XFxuICAgICAgdGhpcy5faGFuZGxlQ2xlYXIoZXZ0KTtcXG4gICAgfVxcbiAgfTtcXG5cXG4gIEFsbG93Q2xlYXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGRhdGEpIHtcXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgZGF0YSk7XFxuXFxuICAgIGlmICh0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19wbGFjZWhvbGRlcicpLmxlbmd0aCA+IDAgfHxcXG4gICAgICAgIGRhdGEubGVuZ3RoID09PSAwKSB7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuXFxuICAgIHZhciByZW1vdmVBbGwgPSB0aGlzLm9wdGlvbnMuZ2V0KCd0cmFuc2xhdGlvbnMnKS5nZXQoJ3JlbW92ZUFsbEl0ZW1zJyk7XFxuXFxuICAgIHZhciAkcmVtb3ZlID0gJChcXG4gICAgICAnPHNwYW4gY2xhc3M9XFxcInNlbGVjdDItc2VsZWN0aW9uX19jbGVhclxcXCIgdGl0bGU9XFxcIicgKyByZW1vdmVBbGwoKSArJ1xcXCI+JyArXFxuICAgICAgICAnJnRpbWVzOycgK1xcbiAgICAgICc8L3NwYW4+J1xcbiAgICApO1xcbiAgICBVdGlscy5TdG9yZURhdGEoJHJlbW92ZVswXSwgJ2RhdGEnLCBkYXRhKTtcXG5cXG4gICAgdGhpcy4kc2VsZWN0aW9uLmZpbmQoJy5zZWxlY3QyLXNlbGVjdGlvbl9fcmVuZGVyZWQnKS5wcmVwZW5kKCRyZW1vdmUpO1xcbiAgfTtcXG5cXG4gIHJldHVybiBBbGxvd0NsZWFyO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9zZWxlY3Rpb24vc2VhcmNoJyxbXFxuICAnanF1ZXJ5JyxcXG4gICcuLi91dGlscycsXFxuICAnLi4va2V5cydcXG5dLCBmdW5jdGlvbiAoJCwgVXRpbHMsIEtFWVMpIHtcXG4gIGZ1bmN0aW9uIFNlYXJjaCAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XFxuICB9XFxuXFxuICBTZWFyY2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcXG4gICAgdmFyICRzZWFyY2ggPSAkKFxcbiAgICAgICc8bGkgY2xhc3M9XFxcInNlbGVjdDItc2VhcmNoIHNlbGVjdDItc2VhcmNoLS1pbmxpbmVcXFwiPicgK1xcbiAgICAgICAgJzxpbnB1dCBjbGFzcz1cXFwic2VsZWN0Mi1zZWFyY2hfX2ZpZWxkXFxcIiB0eXBlPVxcXCJzZWFyY2hcXFwiIHRhYmluZGV4PVxcXCItMVxcXCInICtcXG4gICAgICAgICcgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiIGF1dG9jb3JyZWN0PVxcXCJvZmZcXFwiIGF1dG9jYXBpdGFsaXplPVxcXCJub25lXFxcIicgK1xcbiAgICAgICAgJyBzcGVsbGNoZWNrPVxcXCJmYWxzZVxcXCIgcm9sZT1cXFwic2VhcmNoYm94XFxcIiBhcmlhLWF1dG9jb21wbGV0ZT1cXFwibGlzdFxcXCIgLz4nICtcXG4gICAgICAnPC9saT4nXFxuICAgICk7XFxuXFxuICAgIHRoaXMuJHNlYXJjaENvbnRhaW5lciA9ICRzZWFyY2g7XFxuICAgIHRoaXMuJHNlYXJjaCA9ICRzZWFyY2guZmluZCgnaW5wdXQnKTtcXG5cXG4gICAgdmFyICRyZW5kZXJlZCA9IGRlY29yYXRlZC5jYWxsKHRoaXMpO1xcblxcbiAgICB0aGlzLl90cmFuc2ZlclRhYkluZGV4KCk7XFxuXFxuICAgIHJldHVybiAkcmVuZGVyZWQ7XFxuICB9O1xcblxcbiAgU2VhcmNoLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgdmFyIHJlc3VsdHNJZCA9IGNvbnRhaW5lci5pZCArICctcmVzdWx0cyc7XFxuXFxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XFxuXFxuICAgIGNvbnRhaW5lci5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcXG4gICAgICBzZWxmLiRzZWFyY2guYXR0cignYXJpYS1jb250cm9scycsIHJlc3VsdHNJZCk7XFxuICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2ZvY3VzJyk7XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xcbiAgICAgIHNlbGYuJHNlYXJjaC52YWwoJycpO1xcbiAgICAgIHNlbGYuJHNlYXJjaC5yZW1vdmVBdHRyKCdhcmlhLWNvbnRyb2xzJyk7XFxuICAgICAgc2VsZi4kc2VhcmNoLnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xcbiAgICAgIHNlbGYuJHNlYXJjaC50cmlnZ2VyKCdmb2N1cycpO1xcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdlbmFibGUnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgc2VsZi4kc2VhcmNoLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpO1xcblxcbiAgICAgIHNlbGYuX3RyYW5zZmVyVGFiSW5kZXgoKTtcXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbignZGlzYWJsZScsIGZ1bmN0aW9uICgpIHtcXG4gICAgICBzZWxmLiRzZWFyY2gucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbignZm9jdXMnLCBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2ZvY3VzJyk7XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6Zm9jdXMnLCBmdW5jdGlvbiAocGFyYW1zKSB7XFxuICAgICAgaWYgKHBhcmFtcy5kYXRhLl9yZXN1bHRJZCkge1xcbiAgICAgICAgc2VsZi4kc2VhcmNoLmF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsIHBhcmFtcy5kYXRhLl9yZXN1bHRJZCk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHNlbGYuJHNlYXJjaC5yZW1vdmVBdHRyKCdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnKTtcXG4gICAgICB9XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2ZvY3VzaW4nLCAnLnNlbGVjdDItc2VhcmNoLS1pbmxpbmUnLCBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgc2VsZi50cmlnZ2VyKCdmb2N1cycsIGV2dCk7XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2ZvY3Vzb3V0JywgJy5zZWxlY3QyLXNlYXJjaC0taW5saW5lJywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgIHNlbGYuX2hhbmRsZUJsdXIoZXZ0KTtcXG4gICAgfSk7XFxuXFxuICAgIHRoaXMuJHNlbGVjdGlvbi5vbigna2V5ZG93bicsICcuc2VsZWN0Mi1zZWFyY2gtLWlubGluZScsIGZ1bmN0aW9uIChldnQpIHtcXG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XFxuXFxuICAgICAgc2VsZi50cmlnZ2VyKCdrZXlwcmVzcycsIGV2dCk7XFxuXFxuICAgICAgc2VsZi5fa2V5VXBQcmV2ZW50ZWQgPSBldnQuaXNEZWZhdWx0UHJldmVudGVkKCk7XFxuXFxuICAgICAgdmFyIGtleSA9IGV2dC53aGljaDtcXG5cXG4gICAgICBpZiAoa2V5ID09PSBLRVlTLkJBQ0tTUEFDRSAmJiBzZWxmLiRzZWFyY2gudmFsKCkgPT09ICcnKSB7XFxuICAgICAgICB2YXIgJHByZXZpb3VzQ2hvaWNlID0gc2VsZi4kc2VhcmNoQ29udGFpbmVyXFxuICAgICAgICAgIC5wcmV2KCcuc2VsZWN0Mi1zZWxlY3Rpb25fX2Nob2ljZScpO1xcblxcbiAgICAgICAgaWYgKCRwcmV2aW91c0Nob2ljZS5sZW5ndGggPiAwKSB7XFxuICAgICAgICAgIHZhciBpdGVtID0gVXRpbHMuR2V0RGF0YSgkcHJldmlvdXNDaG9pY2VbMF0sICdkYXRhJyk7XFxuXFxuICAgICAgICAgIHNlbGYuc2VhcmNoUmVtb3ZlQ2hvaWNlKGl0ZW0pO1xcblxcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oJ2NsaWNrJywgJy5zZWxlY3QyLXNlYXJjaC0taW5saW5lJywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgIGlmIChzZWxmLiRzZWFyY2gudmFsKCkpIHtcXG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcXG4gICAgICB9XFxuICAgIH0pO1xcblxcbiAgICAvLyBUcnkgdG8gZGV0ZWN0IHRoZSBJRSB2ZXJzaW9uIHNob3VsZCB0aGUgYGRvY3VtZW50TW9kZWAgcHJvcGVydHkgdGhhdFxcbiAgICAvLyBpcyBzdG9yZWQgb24gdGhlIGRvY3VtZW50LiBUaGlzIGlzIG9ubHkgaW1wbGVtZW50ZWQgaW4gSUUgYW5kIGlzXFxuICAgIC8vIHNsaWdodGx5IGNsZWFuZXIgdGhhbiBkb2luZyBhIHVzZXIgYWdlbnQgY2hlY2suXFxuICAgIC8vIFRoaXMgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZSBpbiBFZGdlLCBidXQgRWRnZSBhbHNvIGRvZXNuJ3QgaGF2ZVxcbiAgICAvLyB0aGlzIGJ1Zy5cXG4gICAgdmFyIG1zaWUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XFxuICAgIHZhciBkaXNhYmxlSW5wdXRFdmVudHMgPSBtc2llICYmIG1zaWUgPD0gMTE7XFxuXFxuICAgIC8vIFdvcmthcm91bmQgZm9yIGJyb3dzZXJzIHdoaWNoIGRvIG5vdCBzdXBwb3J0IHRoZSBgaW5wdXRgIGV2ZW50XFxuICAgIC8vIFRoaXMgd2lsbCBwcmV2ZW50IGRvdWJsZS10cmlnZ2VyaW5nIG9mIGV2ZW50cyBmb3IgYnJvd3NlcnMgd2hpY2ggc3VwcG9ydFxcbiAgICAvLyBib3RoIHRoZSBga2V5dXBgIGFuZCBgaW5wdXRgIGV2ZW50cy5cXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKFxcbiAgICAgICdpbnB1dC5zZWFyY2hjaGVjaycsXFxuICAgICAgJy5zZWxlY3QyLXNlYXJjaC0taW5saW5lJyxcXG4gICAgICBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgICAvLyBJRSB3aWxsIHRyaWdnZXIgdGhlIGBpbnB1dGAgZXZlbnQgd2hlbiBhIHBsYWNlaG9sZGVyIGlzIHVzZWQgb24gYVxcbiAgICAgICAgLy8gc2VhcmNoIGJveC4gVG8gZ2V0IGFyb3VuZCB0aGlzIGlzc3VlLCB3ZSBhcmUgZm9yY2VkIHRvIGlnbm9yZSBhbGxcXG4gICAgICAgIC8vIGBpbnB1dGAgZXZlbnRzIGluIElFIGFuZCBrZWVwIHVzaW5nIGBrZXl1cGAuXFxuICAgICAgICBpZiAoZGlzYWJsZUlucHV0RXZlbnRzKSB7XFxuICAgICAgICAgIHNlbGYuJHNlbGVjdGlvbi5vZmYoJ2lucHV0LnNlYXJjaCBpbnB1dC5zZWFyY2hjaGVjaycpO1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICAvLyBVbmJpbmQgdGhlIGR1cGxpY2F0ZWQgYGtleXVwYCBldmVudFxcbiAgICAgICAgc2VsZi4kc2VsZWN0aW9uLm9mZigna2V5dXAuc2VhcmNoJyk7XFxuICAgICAgfVxcbiAgICApO1xcblxcbiAgICB0aGlzLiRzZWxlY3Rpb24ub24oXFxuICAgICAgJ2tleXVwLnNlYXJjaCBpbnB1dC5zZWFyY2gnLFxcbiAgICAgICcuc2VsZWN0Mi1zZWFyY2gtLWlubGluZScsXFxuICAgICAgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgICAgLy8gSUUgd2lsbCB0cmlnZ2VyIHRoZSBgaW5wdXRgIGV2ZW50IHdoZW4gYSBwbGFjZWhvbGRlciBpcyB1c2VkIG9uIGFcXG4gICAgICAgIC8vIHNlYXJjaCBib3guIFRvIGdldCBhcm91bmQgdGhpcyBpc3N1ZSwgd2UgYXJlIGZvcmNlZCB0byBpZ25vcmUgYWxsXFxuICAgICAgICAvLyBgaW5wdXRgIGV2ZW50cyBpbiBJRSBhbmQga2VlcCB1c2luZyBga2V5dXBgLlxcbiAgICAgICAgaWYgKGRpc2FibGVJbnB1dEV2ZW50cyAmJiBldnQudHlwZSA9PT0gJ2lucHV0Jykge1xcbiAgICAgICAgICBzZWxmLiRzZWxlY3Rpb24ub2ZmKCdpbnB1dC5zZWFyY2ggaW5wdXQuc2VhcmNoY2hlY2snKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgdmFyIGtleSA9IGV2dC53aGljaDtcXG5cXG4gICAgICAgIC8vIFdlIGNhbiBmcmVlbHkgaWdub3JlIGV2ZW50cyBmcm9tIG1vZGlmaWVyIGtleXNcXG4gICAgICAgIGlmIChrZXkgPT0gS0VZUy5TSElGVCB8fCBrZXkgPT0gS0VZUy5DVFJMIHx8IGtleSA9PSBLRVlTLkFMVCkge1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICAvLyBUYWJiaW5nIHdpbGwgYmUgaGFuZGxlZCBkdXJpbmcgdGhlIGBrZXlkb3duYCBwaGFzZVxcbiAgICAgICAgaWYgKGtleSA9PSBLRVlTLlRBQikge1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICBzZWxmLmhhbmRsZVNlYXJjaChldnQpO1xcbiAgICAgIH1cXG4gICAgKTtcXG4gIH07XFxuXFxuICAvKipcXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgdHJhbnNmZXIgdGhlIHRhYmluZGV4IGF0dHJpYnV0ZSBmcm9tIHRoZSByZW5kZXJlZFxcbiAgICogc2VsZWN0aW9uIHRvIHRoZSBzZWFyY2ggYm94LiBUaGlzIGFsbG93cyBmb3IgdGhlIHNlYXJjaCBib3ggdG8gYmUgdXNlZCBhc1xcbiAgICogdGhlIHByaW1hcnkgZm9jdXMgaW5zdGVhZCBvZiB0aGUgc2VsZWN0aW9uIGNvbnRhaW5lci5cXG4gICAqXFxuICAgKiBAcHJpdmF0ZVxcbiAgICovXFxuICBTZWFyY2gucHJvdG90eXBlLl90cmFuc2ZlclRhYkluZGV4ID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xcbiAgICB0aGlzLiRzZWFyY2guYXR0cigndGFiaW5kZXgnLCB0aGlzLiRzZWxlY3Rpb24uYXR0cigndGFiaW5kZXgnKSk7XFxuICAgIHRoaXMuJHNlbGVjdGlvbi5hdHRyKCd0YWJpbmRleCcsICctMScpO1xcbiAgfTtcXG5cXG4gIFNlYXJjaC5wcm90b3R5cGUuY3JlYXRlUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwbGFjZWhvbGRlcikge1xcbiAgICB0aGlzLiRzZWFyY2guYXR0cigncGxhY2Vob2xkZXInLCBwbGFjZWhvbGRlci50ZXh0KTtcXG4gIH07XFxuXFxuICBTZWFyY2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGRhdGEpIHtcXG4gICAgdmFyIHNlYXJjaEhhZEZvY3VzID0gdGhpcy4kc2VhcmNoWzBdID09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XFxuXFxuICAgIHRoaXMuJHNlYXJjaC5hdHRyKCdwbGFjZWhvbGRlcicsICcnKTtcXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgZGF0YSk7XFxuXFxuICAgIHRoaXMuJHNlbGVjdGlvbi5maW5kKCcuc2VsZWN0Mi1zZWxlY3Rpb25fX3JlbmRlcmVkJylcXG4gICAgICAgICAgICAgICAgICAgLmFwcGVuZCh0aGlzLiRzZWFyY2hDb250YWluZXIpO1xcblxcbiAgICB0aGlzLnJlc2l6ZVNlYXJjaCgpO1xcbiAgICBpZiAoc2VhcmNoSGFkRm9jdXMpIHtcXG4gICAgICB0aGlzLiRzZWFyY2gudHJpZ2dlcignZm9jdXMnKTtcXG4gICAgfVxcbiAgfTtcXG5cXG4gIFNlYXJjaC5wcm90b3R5cGUuaGFuZGxlU2VhcmNoID0gZnVuY3Rpb24gKCkge1xcbiAgICB0aGlzLnJlc2l6ZVNlYXJjaCgpO1xcblxcbiAgICBpZiAoIXRoaXMuX2tleVVwUHJldmVudGVkKSB7XFxuICAgICAgdmFyIGlucHV0ID0gdGhpcy4kc2VhcmNoLnZhbCgpO1xcblxcbiAgICAgIHRoaXMudHJpZ2dlcigncXVlcnknLCB7XFxuICAgICAgICB0ZXJtOiBpbnB1dFxcbiAgICAgIH0pO1xcbiAgICB9XFxuXFxuICAgIHRoaXMuX2tleVVwUHJldmVudGVkID0gZmFsc2U7XFxuICB9O1xcblxcbiAgU2VhcmNoLnByb3RvdHlwZS5zZWFyY2hSZW1vdmVDaG9pY2UgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBpdGVtKSB7XFxuICAgIHRoaXMudHJpZ2dlcigndW5zZWxlY3QnLCB7XFxuICAgICAgZGF0YTogaXRlbVxcbiAgICB9KTtcXG5cXG4gICAgdGhpcy4kc2VhcmNoLnZhbChpdGVtLnRleHQpO1xcbiAgICB0aGlzLmhhbmRsZVNlYXJjaCgpO1xcbiAgfTtcXG5cXG4gIFNlYXJjaC5wcm90b3R5cGUucmVzaXplU2VhcmNoID0gZnVuY3Rpb24gKCkge1xcbiAgICB0aGlzLiRzZWFyY2guY3NzKCd3aWR0aCcsICcyNXB4Jyk7XFxuXFxuICAgIHZhciB3aWR0aCA9ICcnO1xcblxcbiAgICBpZiAodGhpcy4kc2VhcmNoLmF0dHIoJ3BsYWNlaG9sZGVyJykgIT09ICcnKSB7XFxuICAgICAgd2lkdGggPSB0aGlzLiRzZWxlY3Rpb24uZmluZCgnLnNlbGVjdDItc2VsZWN0aW9uX19yZW5kZXJlZCcpLndpZHRoKCk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgdmFyIG1pbmltdW1XaWR0aCA9IHRoaXMuJHNlYXJjaC52YWwoKS5sZW5ndGggKyAxO1xcblxcbiAgICAgIHdpZHRoID0gKG1pbmltdW1XaWR0aCAqIDAuNzUpICsgJ2VtJztcXG4gICAgfVxcblxcbiAgICB0aGlzLiRzZWFyY2guY3NzKCd3aWR0aCcsIHdpZHRoKTtcXG4gIH07XFxuXFxuICByZXR1cm4gU2VhcmNoO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9zZWxlY3Rpb24vZXZlbnRSZWxheScsW1xcbiAgJ2pxdWVyeSdcXG5dLCBmdW5jdGlvbiAoJCkge1xcbiAgZnVuY3Rpb24gRXZlbnRSZWxheSAoKSB7IH1cXG5cXG4gIEV2ZW50UmVsYXkucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcbiAgICB2YXIgcmVsYXlFdmVudHMgPSBbXFxuICAgICAgJ29wZW4nLCAnb3BlbmluZycsXFxuICAgICAgJ2Nsb3NlJywgJ2Nsb3NpbmcnLFxcbiAgICAgICdzZWxlY3QnLCAnc2VsZWN0aW5nJyxcXG4gICAgICAndW5zZWxlY3QnLCAndW5zZWxlY3RpbmcnLFxcbiAgICAgICdjbGVhcicsICdjbGVhcmluZydcXG4gICAgXTtcXG5cXG4gICAgdmFyIHByZXZlbnRhYmxlRXZlbnRzID0gW1xcbiAgICAgICdvcGVuaW5nJywgJ2Nsb3NpbmcnLCAnc2VsZWN0aW5nJywgJ3Vuc2VsZWN0aW5nJywgJ2NsZWFyaW5nJ1xcbiAgICBdO1xcblxcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xcblxcbiAgICBjb250YWluZXIub24oJyonLCBmdW5jdGlvbiAobmFtZSwgcGFyYW1zKSB7XFxuICAgICAgLy8gSWdub3JlIGV2ZW50cyB0aGF0IHNob3VsZCBub3QgYmUgcmVsYXllZFxcbiAgICAgIGlmICgkLmluQXJyYXkobmFtZSwgcmVsYXlFdmVudHMpID09PSAtMSkge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH1cXG5cXG4gICAgICAvLyBUaGUgcGFyYW1ldGVycyBzaG91bGQgYWx3YXlzIGJlIGFuIG9iamVjdFxcbiAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcXG5cXG4gICAgICAvLyBHZW5lcmF0ZSB0aGUgalF1ZXJ5IGV2ZW50IGZvciB0aGUgU2VsZWN0MiBldmVudFxcbiAgICAgIHZhciBldnQgPSAkLkV2ZW50KCdzZWxlY3QyOicgKyBuYW1lLCB7XFxuICAgICAgICBwYXJhbXM6IHBhcmFtc1xcbiAgICAgIH0pO1xcblxcbiAgICAgIHNlbGYuJGVsZW1lbnQudHJpZ2dlcihldnQpO1xcblxcbiAgICAgIC8vIE9ubHkgaGFuZGxlIHByZXZlbnRhYmxlIGV2ZW50cyBpZiBpdCB3YXMgb25lXFxuICAgICAgaWYgKCQuaW5BcnJheShuYW1lLCBwcmV2ZW50YWJsZUV2ZW50cykgPT09IC0xKSB7XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfVxcblxcbiAgICAgIHBhcmFtcy5wcmV2ZW50ZWQgPSBldnQuaXNEZWZhdWx0UHJldmVudGVkKCk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIHJldHVybiBFdmVudFJlbGF5O1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi90cmFuc2xhdGlvbicsW1xcbiAgJ2pxdWVyeScsXFxuICAncmVxdWlyZSdcXG5dLCBmdW5jdGlvbiAoJCwgcmVxdWlyZSkge1xcbiAgZnVuY3Rpb24gVHJhbnNsYXRpb24gKGRpY3QpIHtcXG4gICAgdGhpcy5kaWN0ID0gZGljdCB8fCB7fTtcXG4gIH1cXG5cXG4gIFRyYW5zbGF0aW9uLnByb3RvdHlwZS5hbGwgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHJldHVybiB0aGlzLmRpY3Q7XFxuICB9O1xcblxcbiAgVHJhbnNsYXRpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcXG4gICAgcmV0dXJuIHRoaXMuZGljdFtrZXldO1xcbiAgfTtcXG5cXG4gIFRyYW5zbGF0aW9uLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiAodHJhbnNsYXRpb24pIHtcXG4gICAgdGhpcy5kaWN0ID0gJC5leHRlbmQoe30sIHRyYW5zbGF0aW9uLmFsbCgpLCB0aGlzLmRpY3QpO1xcbiAgfTtcXG5cXG4gIC8vIFN0YXRpYyBmdW5jdGlvbnNcXG5cXG4gIFRyYW5zbGF0aW9uLl9jYWNoZSA9IHt9O1xcblxcbiAgVHJhbnNsYXRpb24ubG9hZFBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xcbiAgICBpZiAoIShwYXRoIGluIFRyYW5zbGF0aW9uLl9jYWNoZSkpIHtcXG4gICAgICB2YXIgdHJhbnNsYXRpb25zID0gcmVxdWlyZShwYXRoKTtcXG5cXG4gICAgICBUcmFuc2xhdGlvbi5fY2FjaGVbcGF0aF0gPSB0cmFuc2xhdGlvbnM7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIG5ldyBUcmFuc2xhdGlvbihUcmFuc2xhdGlvbi5fY2FjaGVbcGF0aF0pO1xcbiAgfTtcXG5cXG4gIHJldHVybiBUcmFuc2xhdGlvbjtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGlhY3JpdGljcycsW1xcblxcbl0sIGZ1bmN0aW9uICgpIHtcXG4gIHZhciBkaWFjcml0aWNzID0ge1xcbiAgICAnXFxcXHUyNEI2JzogJ0EnLFxcbiAgICAnXFxcXHVGRjIxJzogJ0EnLFxcbiAgICAnXFxcXHUwMEMwJzogJ0EnLFxcbiAgICAnXFxcXHUwMEMxJzogJ0EnLFxcbiAgICAnXFxcXHUwMEMyJzogJ0EnLFxcbiAgICAnXFxcXHUxRUE2JzogJ0EnLFxcbiAgICAnXFxcXHUxRUE0JzogJ0EnLFxcbiAgICAnXFxcXHUxRUFBJzogJ0EnLFxcbiAgICAnXFxcXHUxRUE4JzogJ0EnLFxcbiAgICAnXFxcXHUwMEMzJzogJ0EnLFxcbiAgICAnXFxcXHUwMTAwJzogJ0EnLFxcbiAgICAnXFxcXHUwMTAyJzogJ0EnLFxcbiAgICAnXFxcXHUxRUIwJzogJ0EnLFxcbiAgICAnXFxcXHUxRUFFJzogJ0EnLFxcbiAgICAnXFxcXHUxRUI0JzogJ0EnLFxcbiAgICAnXFxcXHUxRUIyJzogJ0EnLFxcbiAgICAnXFxcXHUwMjI2JzogJ0EnLFxcbiAgICAnXFxcXHUwMUUwJzogJ0EnLFxcbiAgICAnXFxcXHUwMEM0JzogJ0EnLFxcbiAgICAnXFxcXHUwMURFJzogJ0EnLFxcbiAgICAnXFxcXHUxRUEyJzogJ0EnLFxcbiAgICAnXFxcXHUwMEM1JzogJ0EnLFxcbiAgICAnXFxcXHUwMUZBJzogJ0EnLFxcbiAgICAnXFxcXHUwMUNEJzogJ0EnLFxcbiAgICAnXFxcXHUwMjAwJzogJ0EnLFxcbiAgICAnXFxcXHUwMjAyJzogJ0EnLFxcbiAgICAnXFxcXHUxRUEwJzogJ0EnLFxcbiAgICAnXFxcXHUxRUFDJzogJ0EnLFxcbiAgICAnXFxcXHUxRUI2JzogJ0EnLFxcbiAgICAnXFxcXHUxRTAwJzogJ0EnLFxcbiAgICAnXFxcXHUwMTA0JzogJ0EnLFxcbiAgICAnXFxcXHUwMjNBJzogJ0EnLFxcbiAgICAnXFxcXHUyQzZGJzogJ0EnLFxcbiAgICAnXFxcXHVBNzMyJzogJ0FBJyxcXG4gICAgJ1xcXFx1MDBDNic6ICdBRScsXFxuICAgICdcXFxcdTAxRkMnOiAnQUUnLFxcbiAgICAnXFxcXHUwMUUyJzogJ0FFJyxcXG4gICAgJ1xcXFx1QTczNCc6ICdBTycsXFxuICAgICdcXFxcdUE3MzYnOiAnQVUnLFxcbiAgICAnXFxcXHVBNzM4JzogJ0FWJyxcXG4gICAgJ1xcXFx1QTczQSc6ICdBVicsXFxuICAgICdcXFxcdUE3M0MnOiAnQVknLFxcbiAgICAnXFxcXHUyNEI3JzogJ0InLFxcbiAgICAnXFxcXHVGRjIyJzogJ0InLFxcbiAgICAnXFxcXHUxRTAyJzogJ0InLFxcbiAgICAnXFxcXHUxRTA0JzogJ0InLFxcbiAgICAnXFxcXHUxRTA2JzogJ0InLFxcbiAgICAnXFxcXHUwMjQzJzogJ0InLFxcbiAgICAnXFxcXHUwMTgyJzogJ0InLFxcbiAgICAnXFxcXHUwMTgxJzogJ0InLFxcbiAgICAnXFxcXHUyNEI4JzogJ0MnLFxcbiAgICAnXFxcXHVGRjIzJzogJ0MnLFxcbiAgICAnXFxcXHUwMTA2JzogJ0MnLFxcbiAgICAnXFxcXHUwMTA4JzogJ0MnLFxcbiAgICAnXFxcXHUwMTBBJzogJ0MnLFxcbiAgICAnXFxcXHUwMTBDJzogJ0MnLFxcbiAgICAnXFxcXHUwMEM3JzogJ0MnLFxcbiAgICAnXFxcXHUxRTA4JzogJ0MnLFxcbiAgICAnXFxcXHUwMTg3JzogJ0MnLFxcbiAgICAnXFxcXHUwMjNCJzogJ0MnLFxcbiAgICAnXFxcXHVBNzNFJzogJ0MnLFxcbiAgICAnXFxcXHUyNEI5JzogJ0QnLFxcbiAgICAnXFxcXHVGRjI0JzogJ0QnLFxcbiAgICAnXFxcXHUxRTBBJzogJ0QnLFxcbiAgICAnXFxcXHUwMTBFJzogJ0QnLFxcbiAgICAnXFxcXHUxRTBDJzogJ0QnLFxcbiAgICAnXFxcXHUxRTEwJzogJ0QnLFxcbiAgICAnXFxcXHUxRTEyJzogJ0QnLFxcbiAgICAnXFxcXHUxRTBFJzogJ0QnLFxcbiAgICAnXFxcXHUwMTEwJzogJ0QnLFxcbiAgICAnXFxcXHUwMThCJzogJ0QnLFxcbiAgICAnXFxcXHUwMThBJzogJ0QnLFxcbiAgICAnXFxcXHUwMTg5JzogJ0QnLFxcbiAgICAnXFxcXHVBNzc5JzogJ0QnLFxcbiAgICAnXFxcXHUwMUYxJzogJ0RaJyxcXG4gICAgJ1xcXFx1MDFDNCc6ICdEWicsXFxuICAgICdcXFxcdTAxRjInOiAnRHonLFxcbiAgICAnXFxcXHUwMUM1JzogJ0R6JyxcXG4gICAgJ1xcXFx1MjRCQSc6ICdFJyxcXG4gICAgJ1xcXFx1RkYyNSc6ICdFJyxcXG4gICAgJ1xcXFx1MDBDOCc6ICdFJyxcXG4gICAgJ1xcXFx1MDBDOSc6ICdFJyxcXG4gICAgJ1xcXFx1MDBDQSc6ICdFJyxcXG4gICAgJ1xcXFx1MUVDMCc6ICdFJyxcXG4gICAgJ1xcXFx1MUVCRSc6ICdFJyxcXG4gICAgJ1xcXFx1MUVDNCc6ICdFJyxcXG4gICAgJ1xcXFx1MUVDMic6ICdFJyxcXG4gICAgJ1xcXFx1MUVCQyc6ICdFJyxcXG4gICAgJ1xcXFx1MDExMic6ICdFJyxcXG4gICAgJ1xcXFx1MUUxNCc6ICdFJyxcXG4gICAgJ1xcXFx1MUUxNic6ICdFJyxcXG4gICAgJ1xcXFx1MDExNCc6ICdFJyxcXG4gICAgJ1xcXFx1MDExNic6ICdFJyxcXG4gICAgJ1xcXFx1MDBDQic6ICdFJyxcXG4gICAgJ1xcXFx1MUVCQSc6ICdFJyxcXG4gICAgJ1xcXFx1MDExQSc6ICdFJyxcXG4gICAgJ1xcXFx1MDIwNCc6ICdFJyxcXG4gICAgJ1xcXFx1MDIwNic6ICdFJyxcXG4gICAgJ1xcXFx1MUVCOCc6ICdFJyxcXG4gICAgJ1xcXFx1MUVDNic6ICdFJyxcXG4gICAgJ1xcXFx1MDIyOCc6ICdFJyxcXG4gICAgJ1xcXFx1MUUxQyc6ICdFJyxcXG4gICAgJ1xcXFx1MDExOCc6ICdFJyxcXG4gICAgJ1xcXFx1MUUxOCc6ICdFJyxcXG4gICAgJ1xcXFx1MUUxQSc6ICdFJyxcXG4gICAgJ1xcXFx1MDE5MCc6ICdFJyxcXG4gICAgJ1xcXFx1MDE4RSc6ICdFJyxcXG4gICAgJ1xcXFx1MjRCQic6ICdGJyxcXG4gICAgJ1xcXFx1RkYyNic6ICdGJyxcXG4gICAgJ1xcXFx1MUUxRSc6ICdGJyxcXG4gICAgJ1xcXFx1MDE5MSc6ICdGJyxcXG4gICAgJ1xcXFx1QTc3Qic6ICdGJyxcXG4gICAgJ1xcXFx1MjRCQyc6ICdHJyxcXG4gICAgJ1xcXFx1RkYyNyc6ICdHJyxcXG4gICAgJ1xcXFx1MDFGNCc6ICdHJyxcXG4gICAgJ1xcXFx1MDExQyc6ICdHJyxcXG4gICAgJ1xcXFx1MUUyMCc6ICdHJyxcXG4gICAgJ1xcXFx1MDExRSc6ICdHJyxcXG4gICAgJ1xcXFx1MDEyMCc6ICdHJyxcXG4gICAgJ1xcXFx1MDFFNic6ICdHJyxcXG4gICAgJ1xcXFx1MDEyMic6ICdHJyxcXG4gICAgJ1xcXFx1MDFFNCc6ICdHJyxcXG4gICAgJ1xcXFx1MDE5Myc6ICdHJyxcXG4gICAgJ1xcXFx1QTdBMCc6ICdHJyxcXG4gICAgJ1xcXFx1QTc3RCc6ICdHJyxcXG4gICAgJ1xcXFx1QTc3RSc6ICdHJyxcXG4gICAgJ1xcXFx1MjRCRCc6ICdIJyxcXG4gICAgJ1xcXFx1RkYyOCc6ICdIJyxcXG4gICAgJ1xcXFx1MDEyNCc6ICdIJyxcXG4gICAgJ1xcXFx1MUUyMic6ICdIJyxcXG4gICAgJ1xcXFx1MUUyNic6ICdIJyxcXG4gICAgJ1xcXFx1MDIxRSc6ICdIJyxcXG4gICAgJ1xcXFx1MUUyNCc6ICdIJyxcXG4gICAgJ1xcXFx1MUUyOCc6ICdIJyxcXG4gICAgJ1xcXFx1MUUyQSc6ICdIJyxcXG4gICAgJ1xcXFx1MDEyNic6ICdIJyxcXG4gICAgJ1xcXFx1MkM2Nyc6ICdIJyxcXG4gICAgJ1xcXFx1MkM3NSc6ICdIJyxcXG4gICAgJ1xcXFx1QTc4RCc6ICdIJyxcXG4gICAgJ1xcXFx1MjRCRSc6ICdJJyxcXG4gICAgJ1xcXFx1RkYyOSc6ICdJJyxcXG4gICAgJ1xcXFx1MDBDQyc6ICdJJyxcXG4gICAgJ1xcXFx1MDBDRCc6ICdJJyxcXG4gICAgJ1xcXFx1MDBDRSc6ICdJJyxcXG4gICAgJ1xcXFx1MDEyOCc6ICdJJyxcXG4gICAgJ1xcXFx1MDEyQSc6ICdJJyxcXG4gICAgJ1xcXFx1MDEyQyc6ICdJJyxcXG4gICAgJ1xcXFx1MDEzMCc6ICdJJyxcXG4gICAgJ1xcXFx1MDBDRic6ICdJJyxcXG4gICAgJ1xcXFx1MUUyRSc6ICdJJyxcXG4gICAgJ1xcXFx1MUVDOCc6ICdJJyxcXG4gICAgJ1xcXFx1MDFDRic6ICdJJyxcXG4gICAgJ1xcXFx1MDIwOCc6ICdJJyxcXG4gICAgJ1xcXFx1MDIwQSc6ICdJJyxcXG4gICAgJ1xcXFx1MUVDQSc6ICdJJyxcXG4gICAgJ1xcXFx1MDEyRSc6ICdJJyxcXG4gICAgJ1xcXFx1MUUyQyc6ICdJJyxcXG4gICAgJ1xcXFx1MDE5Nyc6ICdJJyxcXG4gICAgJ1xcXFx1MjRCRic6ICdKJyxcXG4gICAgJ1xcXFx1RkYyQSc6ICdKJyxcXG4gICAgJ1xcXFx1MDEzNCc6ICdKJyxcXG4gICAgJ1xcXFx1MDI0OCc6ICdKJyxcXG4gICAgJ1xcXFx1MjRDMCc6ICdLJyxcXG4gICAgJ1xcXFx1RkYyQic6ICdLJyxcXG4gICAgJ1xcXFx1MUUzMCc6ICdLJyxcXG4gICAgJ1xcXFx1MDFFOCc6ICdLJyxcXG4gICAgJ1xcXFx1MUUzMic6ICdLJyxcXG4gICAgJ1xcXFx1MDEzNic6ICdLJyxcXG4gICAgJ1xcXFx1MUUzNCc6ICdLJyxcXG4gICAgJ1xcXFx1MDE5OCc6ICdLJyxcXG4gICAgJ1xcXFx1MkM2OSc6ICdLJyxcXG4gICAgJ1xcXFx1QTc0MCc6ICdLJyxcXG4gICAgJ1xcXFx1QTc0Mic6ICdLJyxcXG4gICAgJ1xcXFx1QTc0NCc6ICdLJyxcXG4gICAgJ1xcXFx1QTdBMic6ICdLJyxcXG4gICAgJ1xcXFx1MjRDMSc6ICdMJyxcXG4gICAgJ1xcXFx1RkYyQyc6ICdMJyxcXG4gICAgJ1xcXFx1MDEzRic6ICdMJyxcXG4gICAgJ1xcXFx1MDEzOSc6ICdMJyxcXG4gICAgJ1xcXFx1MDEzRCc6ICdMJyxcXG4gICAgJ1xcXFx1MUUzNic6ICdMJyxcXG4gICAgJ1xcXFx1MUUzOCc6ICdMJyxcXG4gICAgJ1xcXFx1MDEzQic6ICdMJyxcXG4gICAgJ1xcXFx1MUUzQyc6ICdMJyxcXG4gICAgJ1xcXFx1MUUzQSc6ICdMJyxcXG4gICAgJ1xcXFx1MDE0MSc6ICdMJyxcXG4gICAgJ1xcXFx1MDIzRCc6ICdMJyxcXG4gICAgJ1xcXFx1MkM2Mic6ICdMJyxcXG4gICAgJ1xcXFx1MkM2MCc6ICdMJyxcXG4gICAgJ1xcXFx1QTc0OCc6ICdMJyxcXG4gICAgJ1xcXFx1QTc0Nic6ICdMJyxcXG4gICAgJ1xcXFx1QTc4MCc6ICdMJyxcXG4gICAgJ1xcXFx1MDFDNyc6ICdMSicsXFxuICAgICdcXFxcdTAxQzgnOiAnTGonLFxcbiAgICAnXFxcXHUyNEMyJzogJ00nLFxcbiAgICAnXFxcXHVGRjJEJzogJ00nLFxcbiAgICAnXFxcXHUxRTNFJzogJ00nLFxcbiAgICAnXFxcXHUxRTQwJzogJ00nLFxcbiAgICAnXFxcXHUxRTQyJzogJ00nLFxcbiAgICAnXFxcXHUyQzZFJzogJ00nLFxcbiAgICAnXFxcXHUwMTlDJzogJ00nLFxcbiAgICAnXFxcXHUyNEMzJzogJ04nLFxcbiAgICAnXFxcXHVGRjJFJzogJ04nLFxcbiAgICAnXFxcXHUwMUY4JzogJ04nLFxcbiAgICAnXFxcXHUwMTQzJzogJ04nLFxcbiAgICAnXFxcXHUwMEQxJzogJ04nLFxcbiAgICAnXFxcXHUxRTQ0JzogJ04nLFxcbiAgICAnXFxcXHUwMTQ3JzogJ04nLFxcbiAgICAnXFxcXHUxRTQ2JzogJ04nLFxcbiAgICAnXFxcXHUwMTQ1JzogJ04nLFxcbiAgICAnXFxcXHUxRTRBJzogJ04nLFxcbiAgICAnXFxcXHUxRTQ4JzogJ04nLFxcbiAgICAnXFxcXHUwMjIwJzogJ04nLFxcbiAgICAnXFxcXHUwMTlEJzogJ04nLFxcbiAgICAnXFxcXHVBNzkwJzogJ04nLFxcbiAgICAnXFxcXHVBN0E0JzogJ04nLFxcbiAgICAnXFxcXHUwMUNBJzogJ05KJyxcXG4gICAgJ1xcXFx1MDFDQic6ICdOaicsXFxuICAgICdcXFxcdTI0QzQnOiAnTycsXFxuICAgICdcXFxcdUZGMkYnOiAnTycsXFxuICAgICdcXFxcdTAwRDInOiAnTycsXFxuICAgICdcXFxcdTAwRDMnOiAnTycsXFxuICAgICdcXFxcdTAwRDQnOiAnTycsXFxuICAgICdcXFxcdTFFRDInOiAnTycsXFxuICAgICdcXFxcdTFFRDAnOiAnTycsXFxuICAgICdcXFxcdTFFRDYnOiAnTycsXFxuICAgICdcXFxcdTFFRDQnOiAnTycsXFxuICAgICdcXFxcdTAwRDUnOiAnTycsXFxuICAgICdcXFxcdTFFNEMnOiAnTycsXFxuICAgICdcXFxcdTAyMkMnOiAnTycsXFxuICAgICdcXFxcdTFFNEUnOiAnTycsXFxuICAgICdcXFxcdTAxNEMnOiAnTycsXFxuICAgICdcXFxcdTFFNTAnOiAnTycsXFxuICAgICdcXFxcdTFFNTInOiAnTycsXFxuICAgICdcXFxcdTAxNEUnOiAnTycsXFxuICAgICdcXFxcdTAyMkUnOiAnTycsXFxuICAgICdcXFxcdTAyMzAnOiAnTycsXFxuICAgICdcXFxcdTAwRDYnOiAnTycsXFxuICAgICdcXFxcdTAyMkEnOiAnTycsXFxuICAgICdcXFxcdTFFQ0UnOiAnTycsXFxuICAgICdcXFxcdTAxNTAnOiAnTycsXFxuICAgICdcXFxcdTAxRDEnOiAnTycsXFxuICAgICdcXFxcdTAyMEMnOiAnTycsXFxuICAgICdcXFxcdTAyMEUnOiAnTycsXFxuICAgICdcXFxcdTAxQTAnOiAnTycsXFxuICAgICdcXFxcdTFFREMnOiAnTycsXFxuICAgICdcXFxcdTFFREEnOiAnTycsXFxuICAgICdcXFxcdTFFRTAnOiAnTycsXFxuICAgICdcXFxcdTFFREUnOiAnTycsXFxuICAgICdcXFxcdTFFRTInOiAnTycsXFxuICAgICdcXFxcdTFFQ0MnOiAnTycsXFxuICAgICdcXFxcdTFFRDgnOiAnTycsXFxuICAgICdcXFxcdTAxRUEnOiAnTycsXFxuICAgICdcXFxcdTAxRUMnOiAnTycsXFxuICAgICdcXFxcdTAwRDgnOiAnTycsXFxuICAgICdcXFxcdTAxRkUnOiAnTycsXFxuICAgICdcXFxcdTAxODYnOiAnTycsXFxuICAgICdcXFxcdTAxOUYnOiAnTycsXFxuICAgICdcXFxcdUE3NEEnOiAnTycsXFxuICAgICdcXFxcdUE3NEMnOiAnTycsXFxuICAgICdcXFxcdTAxNTInOiAnT0UnLFxcbiAgICAnXFxcXHUwMUEyJzogJ09JJyxcXG4gICAgJ1xcXFx1QTc0RSc6ICdPTycsXFxuICAgICdcXFxcdTAyMjInOiAnT1UnLFxcbiAgICAnXFxcXHUyNEM1JzogJ1AnLFxcbiAgICAnXFxcXHVGRjMwJzogJ1AnLFxcbiAgICAnXFxcXHUxRTU0JzogJ1AnLFxcbiAgICAnXFxcXHUxRTU2JzogJ1AnLFxcbiAgICAnXFxcXHUwMUE0JzogJ1AnLFxcbiAgICAnXFxcXHUyQzYzJzogJ1AnLFxcbiAgICAnXFxcXHVBNzUwJzogJ1AnLFxcbiAgICAnXFxcXHVBNzUyJzogJ1AnLFxcbiAgICAnXFxcXHVBNzU0JzogJ1AnLFxcbiAgICAnXFxcXHUyNEM2JzogJ1EnLFxcbiAgICAnXFxcXHVGRjMxJzogJ1EnLFxcbiAgICAnXFxcXHVBNzU2JzogJ1EnLFxcbiAgICAnXFxcXHVBNzU4JzogJ1EnLFxcbiAgICAnXFxcXHUwMjRBJzogJ1EnLFxcbiAgICAnXFxcXHUyNEM3JzogJ1InLFxcbiAgICAnXFxcXHVGRjMyJzogJ1InLFxcbiAgICAnXFxcXHUwMTU0JzogJ1InLFxcbiAgICAnXFxcXHUxRTU4JzogJ1InLFxcbiAgICAnXFxcXHUwMTU4JzogJ1InLFxcbiAgICAnXFxcXHUwMjEwJzogJ1InLFxcbiAgICAnXFxcXHUwMjEyJzogJ1InLFxcbiAgICAnXFxcXHUxRTVBJzogJ1InLFxcbiAgICAnXFxcXHUxRTVDJzogJ1InLFxcbiAgICAnXFxcXHUwMTU2JzogJ1InLFxcbiAgICAnXFxcXHUxRTVFJzogJ1InLFxcbiAgICAnXFxcXHUwMjRDJzogJ1InLFxcbiAgICAnXFxcXHUyQzY0JzogJ1InLFxcbiAgICAnXFxcXHVBNzVBJzogJ1InLFxcbiAgICAnXFxcXHVBN0E2JzogJ1InLFxcbiAgICAnXFxcXHVBNzgyJzogJ1InLFxcbiAgICAnXFxcXHUyNEM4JzogJ1MnLFxcbiAgICAnXFxcXHVGRjMzJzogJ1MnLFxcbiAgICAnXFxcXHUxRTlFJzogJ1MnLFxcbiAgICAnXFxcXHUwMTVBJzogJ1MnLFxcbiAgICAnXFxcXHUxRTY0JzogJ1MnLFxcbiAgICAnXFxcXHUwMTVDJzogJ1MnLFxcbiAgICAnXFxcXHUxRTYwJzogJ1MnLFxcbiAgICAnXFxcXHUwMTYwJzogJ1MnLFxcbiAgICAnXFxcXHUxRTY2JzogJ1MnLFxcbiAgICAnXFxcXHUxRTYyJzogJ1MnLFxcbiAgICAnXFxcXHUxRTY4JzogJ1MnLFxcbiAgICAnXFxcXHUwMjE4JzogJ1MnLFxcbiAgICAnXFxcXHUwMTVFJzogJ1MnLFxcbiAgICAnXFxcXHUyQzdFJzogJ1MnLFxcbiAgICAnXFxcXHVBN0E4JzogJ1MnLFxcbiAgICAnXFxcXHVBNzg0JzogJ1MnLFxcbiAgICAnXFxcXHUyNEM5JzogJ1QnLFxcbiAgICAnXFxcXHVGRjM0JzogJ1QnLFxcbiAgICAnXFxcXHUxRTZBJzogJ1QnLFxcbiAgICAnXFxcXHUwMTY0JzogJ1QnLFxcbiAgICAnXFxcXHUxRTZDJzogJ1QnLFxcbiAgICAnXFxcXHUwMjFBJzogJ1QnLFxcbiAgICAnXFxcXHUwMTYyJzogJ1QnLFxcbiAgICAnXFxcXHUxRTcwJzogJ1QnLFxcbiAgICAnXFxcXHUxRTZFJzogJ1QnLFxcbiAgICAnXFxcXHUwMTY2JzogJ1QnLFxcbiAgICAnXFxcXHUwMUFDJzogJ1QnLFxcbiAgICAnXFxcXHUwMUFFJzogJ1QnLFxcbiAgICAnXFxcXHUwMjNFJzogJ1QnLFxcbiAgICAnXFxcXHVBNzg2JzogJ1QnLFxcbiAgICAnXFxcXHVBNzI4JzogJ1RaJyxcXG4gICAgJ1xcXFx1MjRDQSc6ICdVJyxcXG4gICAgJ1xcXFx1RkYzNSc6ICdVJyxcXG4gICAgJ1xcXFx1MDBEOSc6ICdVJyxcXG4gICAgJ1xcXFx1MDBEQSc6ICdVJyxcXG4gICAgJ1xcXFx1MDBEQic6ICdVJyxcXG4gICAgJ1xcXFx1MDE2OCc6ICdVJyxcXG4gICAgJ1xcXFx1MUU3OCc6ICdVJyxcXG4gICAgJ1xcXFx1MDE2QSc6ICdVJyxcXG4gICAgJ1xcXFx1MUU3QSc6ICdVJyxcXG4gICAgJ1xcXFx1MDE2Qyc6ICdVJyxcXG4gICAgJ1xcXFx1MDBEQyc6ICdVJyxcXG4gICAgJ1xcXFx1MDFEQic6ICdVJyxcXG4gICAgJ1xcXFx1MDFENyc6ICdVJyxcXG4gICAgJ1xcXFx1MDFENSc6ICdVJyxcXG4gICAgJ1xcXFx1MDFEOSc6ICdVJyxcXG4gICAgJ1xcXFx1MUVFNic6ICdVJyxcXG4gICAgJ1xcXFx1MDE2RSc6ICdVJyxcXG4gICAgJ1xcXFx1MDE3MCc6ICdVJyxcXG4gICAgJ1xcXFx1MDFEMyc6ICdVJyxcXG4gICAgJ1xcXFx1MDIxNCc6ICdVJyxcXG4gICAgJ1xcXFx1MDIxNic6ICdVJyxcXG4gICAgJ1xcXFx1MDFBRic6ICdVJyxcXG4gICAgJ1xcXFx1MUVFQSc6ICdVJyxcXG4gICAgJ1xcXFx1MUVFOCc6ICdVJyxcXG4gICAgJ1xcXFx1MUVFRSc6ICdVJyxcXG4gICAgJ1xcXFx1MUVFQyc6ICdVJyxcXG4gICAgJ1xcXFx1MUVGMCc6ICdVJyxcXG4gICAgJ1xcXFx1MUVFNCc6ICdVJyxcXG4gICAgJ1xcXFx1MUU3Mic6ICdVJyxcXG4gICAgJ1xcXFx1MDE3Mic6ICdVJyxcXG4gICAgJ1xcXFx1MUU3Nic6ICdVJyxcXG4gICAgJ1xcXFx1MUU3NCc6ICdVJyxcXG4gICAgJ1xcXFx1MDI0NCc6ICdVJyxcXG4gICAgJ1xcXFx1MjRDQic6ICdWJyxcXG4gICAgJ1xcXFx1RkYzNic6ICdWJyxcXG4gICAgJ1xcXFx1MUU3Qyc6ICdWJyxcXG4gICAgJ1xcXFx1MUU3RSc6ICdWJyxcXG4gICAgJ1xcXFx1MDFCMic6ICdWJyxcXG4gICAgJ1xcXFx1QTc1RSc6ICdWJyxcXG4gICAgJ1xcXFx1MDI0NSc6ICdWJyxcXG4gICAgJ1xcXFx1QTc2MCc6ICdWWScsXFxuICAgICdcXFxcdTI0Q0MnOiAnVycsXFxuICAgICdcXFxcdUZGMzcnOiAnVycsXFxuICAgICdcXFxcdTFFODAnOiAnVycsXFxuICAgICdcXFxcdTFFODInOiAnVycsXFxuICAgICdcXFxcdTAxNzQnOiAnVycsXFxuICAgICdcXFxcdTFFODYnOiAnVycsXFxuICAgICdcXFxcdTFFODQnOiAnVycsXFxuICAgICdcXFxcdTFFODgnOiAnVycsXFxuICAgICdcXFxcdTJDNzInOiAnVycsXFxuICAgICdcXFxcdTI0Q0QnOiAnWCcsXFxuICAgICdcXFxcdUZGMzgnOiAnWCcsXFxuICAgICdcXFxcdTFFOEEnOiAnWCcsXFxuICAgICdcXFxcdTFFOEMnOiAnWCcsXFxuICAgICdcXFxcdTI0Q0UnOiAnWScsXFxuICAgICdcXFxcdUZGMzknOiAnWScsXFxuICAgICdcXFxcdTFFRjInOiAnWScsXFxuICAgICdcXFxcdTAwREQnOiAnWScsXFxuICAgICdcXFxcdTAxNzYnOiAnWScsXFxuICAgICdcXFxcdTFFRjgnOiAnWScsXFxuICAgICdcXFxcdTAyMzInOiAnWScsXFxuICAgICdcXFxcdTFFOEUnOiAnWScsXFxuICAgICdcXFxcdTAxNzgnOiAnWScsXFxuICAgICdcXFxcdTFFRjYnOiAnWScsXFxuICAgICdcXFxcdTFFRjQnOiAnWScsXFxuICAgICdcXFxcdTAxQjMnOiAnWScsXFxuICAgICdcXFxcdTAyNEUnOiAnWScsXFxuICAgICdcXFxcdTFFRkUnOiAnWScsXFxuICAgICdcXFxcdTI0Q0YnOiAnWicsXFxuICAgICdcXFxcdUZGM0EnOiAnWicsXFxuICAgICdcXFxcdTAxNzknOiAnWicsXFxuICAgICdcXFxcdTFFOTAnOiAnWicsXFxuICAgICdcXFxcdTAxN0InOiAnWicsXFxuICAgICdcXFxcdTAxN0QnOiAnWicsXFxuICAgICdcXFxcdTFFOTInOiAnWicsXFxuICAgICdcXFxcdTFFOTQnOiAnWicsXFxuICAgICdcXFxcdTAxQjUnOiAnWicsXFxuICAgICdcXFxcdTAyMjQnOiAnWicsXFxuICAgICdcXFxcdTJDN0YnOiAnWicsXFxuICAgICdcXFxcdTJDNkInOiAnWicsXFxuICAgICdcXFxcdUE3NjInOiAnWicsXFxuICAgICdcXFxcdTI0RDAnOiAnYScsXFxuICAgICdcXFxcdUZGNDEnOiAnYScsXFxuICAgICdcXFxcdTFFOUEnOiAnYScsXFxuICAgICdcXFxcdTAwRTAnOiAnYScsXFxuICAgICdcXFxcdTAwRTEnOiAnYScsXFxuICAgICdcXFxcdTAwRTInOiAnYScsXFxuICAgICdcXFxcdTFFQTcnOiAnYScsXFxuICAgICdcXFxcdTFFQTUnOiAnYScsXFxuICAgICdcXFxcdTFFQUInOiAnYScsXFxuICAgICdcXFxcdTFFQTknOiAnYScsXFxuICAgICdcXFxcdTAwRTMnOiAnYScsXFxuICAgICdcXFxcdTAxMDEnOiAnYScsXFxuICAgICdcXFxcdTAxMDMnOiAnYScsXFxuICAgICdcXFxcdTFFQjEnOiAnYScsXFxuICAgICdcXFxcdTFFQUYnOiAnYScsXFxuICAgICdcXFxcdTFFQjUnOiAnYScsXFxuICAgICdcXFxcdTFFQjMnOiAnYScsXFxuICAgICdcXFxcdTAyMjcnOiAnYScsXFxuICAgICdcXFxcdTAxRTEnOiAnYScsXFxuICAgICdcXFxcdTAwRTQnOiAnYScsXFxuICAgICdcXFxcdTAxREYnOiAnYScsXFxuICAgICdcXFxcdTFFQTMnOiAnYScsXFxuICAgICdcXFxcdTAwRTUnOiAnYScsXFxuICAgICdcXFxcdTAxRkInOiAnYScsXFxuICAgICdcXFxcdTAxQ0UnOiAnYScsXFxuICAgICdcXFxcdTAyMDEnOiAnYScsXFxuICAgICdcXFxcdTAyMDMnOiAnYScsXFxuICAgICdcXFxcdTFFQTEnOiAnYScsXFxuICAgICdcXFxcdTFFQUQnOiAnYScsXFxuICAgICdcXFxcdTFFQjcnOiAnYScsXFxuICAgICdcXFxcdTFFMDEnOiAnYScsXFxuICAgICdcXFxcdTAxMDUnOiAnYScsXFxuICAgICdcXFxcdTJDNjUnOiAnYScsXFxuICAgICdcXFxcdTAyNTAnOiAnYScsXFxuICAgICdcXFxcdUE3MzMnOiAnYWEnLFxcbiAgICAnXFxcXHUwMEU2JzogJ2FlJyxcXG4gICAgJ1xcXFx1MDFGRCc6ICdhZScsXFxuICAgICdcXFxcdTAxRTMnOiAnYWUnLFxcbiAgICAnXFxcXHVBNzM1JzogJ2FvJyxcXG4gICAgJ1xcXFx1QTczNyc6ICdhdScsXFxuICAgICdcXFxcdUE3MzknOiAnYXYnLFxcbiAgICAnXFxcXHVBNzNCJzogJ2F2JyxcXG4gICAgJ1xcXFx1QTczRCc6ICdheScsXFxuICAgICdcXFxcdTI0RDEnOiAnYicsXFxuICAgICdcXFxcdUZGNDInOiAnYicsXFxuICAgICdcXFxcdTFFMDMnOiAnYicsXFxuICAgICdcXFxcdTFFMDUnOiAnYicsXFxuICAgICdcXFxcdTFFMDcnOiAnYicsXFxuICAgICdcXFxcdTAxODAnOiAnYicsXFxuICAgICdcXFxcdTAxODMnOiAnYicsXFxuICAgICdcXFxcdTAyNTMnOiAnYicsXFxuICAgICdcXFxcdTI0RDInOiAnYycsXFxuICAgICdcXFxcdUZGNDMnOiAnYycsXFxuICAgICdcXFxcdTAxMDcnOiAnYycsXFxuICAgICdcXFxcdTAxMDknOiAnYycsXFxuICAgICdcXFxcdTAxMEInOiAnYycsXFxuICAgICdcXFxcdTAxMEQnOiAnYycsXFxuICAgICdcXFxcdTAwRTcnOiAnYycsXFxuICAgICdcXFxcdTFFMDknOiAnYycsXFxuICAgICdcXFxcdTAxODgnOiAnYycsXFxuICAgICdcXFxcdTAyM0MnOiAnYycsXFxuICAgICdcXFxcdUE3M0YnOiAnYycsXFxuICAgICdcXFxcdTIxODQnOiAnYycsXFxuICAgICdcXFxcdTI0RDMnOiAnZCcsXFxuICAgICdcXFxcdUZGNDQnOiAnZCcsXFxuICAgICdcXFxcdTFFMEInOiAnZCcsXFxuICAgICdcXFxcdTAxMEYnOiAnZCcsXFxuICAgICdcXFxcdTFFMEQnOiAnZCcsXFxuICAgICdcXFxcdTFFMTEnOiAnZCcsXFxuICAgICdcXFxcdTFFMTMnOiAnZCcsXFxuICAgICdcXFxcdTFFMEYnOiAnZCcsXFxuICAgICdcXFxcdTAxMTEnOiAnZCcsXFxuICAgICdcXFxcdTAxOEMnOiAnZCcsXFxuICAgICdcXFxcdTAyNTYnOiAnZCcsXFxuICAgICdcXFxcdTAyNTcnOiAnZCcsXFxuICAgICdcXFxcdUE3N0EnOiAnZCcsXFxuICAgICdcXFxcdTAxRjMnOiAnZHonLFxcbiAgICAnXFxcXHUwMUM2JzogJ2R6JyxcXG4gICAgJ1xcXFx1MjRENCc6ICdlJyxcXG4gICAgJ1xcXFx1RkY0NSc6ICdlJyxcXG4gICAgJ1xcXFx1MDBFOCc6ICdlJyxcXG4gICAgJ1xcXFx1MDBFOSc6ICdlJyxcXG4gICAgJ1xcXFx1MDBFQSc6ICdlJyxcXG4gICAgJ1xcXFx1MUVDMSc6ICdlJyxcXG4gICAgJ1xcXFx1MUVCRic6ICdlJyxcXG4gICAgJ1xcXFx1MUVDNSc6ICdlJyxcXG4gICAgJ1xcXFx1MUVDMyc6ICdlJyxcXG4gICAgJ1xcXFx1MUVCRCc6ICdlJyxcXG4gICAgJ1xcXFx1MDExMyc6ICdlJyxcXG4gICAgJ1xcXFx1MUUxNSc6ICdlJyxcXG4gICAgJ1xcXFx1MUUxNyc6ICdlJyxcXG4gICAgJ1xcXFx1MDExNSc6ICdlJyxcXG4gICAgJ1xcXFx1MDExNyc6ICdlJyxcXG4gICAgJ1xcXFx1MDBFQic6ICdlJyxcXG4gICAgJ1xcXFx1MUVCQic6ICdlJyxcXG4gICAgJ1xcXFx1MDExQic6ICdlJyxcXG4gICAgJ1xcXFx1MDIwNSc6ICdlJyxcXG4gICAgJ1xcXFx1MDIwNyc6ICdlJyxcXG4gICAgJ1xcXFx1MUVCOSc6ICdlJyxcXG4gICAgJ1xcXFx1MUVDNyc6ICdlJyxcXG4gICAgJ1xcXFx1MDIyOSc6ICdlJyxcXG4gICAgJ1xcXFx1MUUxRCc6ICdlJyxcXG4gICAgJ1xcXFx1MDExOSc6ICdlJyxcXG4gICAgJ1xcXFx1MUUxOSc6ICdlJyxcXG4gICAgJ1xcXFx1MUUxQic6ICdlJyxcXG4gICAgJ1xcXFx1MDI0Nyc6ICdlJyxcXG4gICAgJ1xcXFx1MDI1Qic6ICdlJyxcXG4gICAgJ1xcXFx1MDFERCc6ICdlJyxcXG4gICAgJ1xcXFx1MjRENSc6ICdmJyxcXG4gICAgJ1xcXFx1RkY0Nic6ICdmJyxcXG4gICAgJ1xcXFx1MUUxRic6ICdmJyxcXG4gICAgJ1xcXFx1MDE5Mic6ICdmJyxcXG4gICAgJ1xcXFx1QTc3Qyc6ICdmJyxcXG4gICAgJ1xcXFx1MjRENic6ICdnJyxcXG4gICAgJ1xcXFx1RkY0Nyc6ICdnJyxcXG4gICAgJ1xcXFx1MDFGNSc6ICdnJyxcXG4gICAgJ1xcXFx1MDExRCc6ICdnJyxcXG4gICAgJ1xcXFx1MUUyMSc6ICdnJyxcXG4gICAgJ1xcXFx1MDExRic6ICdnJyxcXG4gICAgJ1xcXFx1MDEyMSc6ICdnJyxcXG4gICAgJ1xcXFx1MDFFNyc6ICdnJyxcXG4gICAgJ1xcXFx1MDEyMyc6ICdnJyxcXG4gICAgJ1xcXFx1MDFFNSc6ICdnJyxcXG4gICAgJ1xcXFx1MDI2MCc6ICdnJyxcXG4gICAgJ1xcXFx1QTdBMSc6ICdnJyxcXG4gICAgJ1xcXFx1MUQ3OSc6ICdnJyxcXG4gICAgJ1xcXFx1QTc3Ric6ICdnJyxcXG4gICAgJ1xcXFx1MjRENyc6ICdoJyxcXG4gICAgJ1xcXFx1RkY0OCc6ICdoJyxcXG4gICAgJ1xcXFx1MDEyNSc6ICdoJyxcXG4gICAgJ1xcXFx1MUUyMyc6ICdoJyxcXG4gICAgJ1xcXFx1MUUyNyc6ICdoJyxcXG4gICAgJ1xcXFx1MDIxRic6ICdoJyxcXG4gICAgJ1xcXFx1MUUyNSc6ICdoJyxcXG4gICAgJ1xcXFx1MUUyOSc6ICdoJyxcXG4gICAgJ1xcXFx1MUUyQic6ICdoJyxcXG4gICAgJ1xcXFx1MUU5Nic6ICdoJyxcXG4gICAgJ1xcXFx1MDEyNyc6ICdoJyxcXG4gICAgJ1xcXFx1MkM2OCc6ICdoJyxcXG4gICAgJ1xcXFx1MkM3Nic6ICdoJyxcXG4gICAgJ1xcXFx1MDI2NSc6ICdoJyxcXG4gICAgJ1xcXFx1MDE5NSc6ICdodicsXFxuICAgICdcXFxcdTI0RDgnOiAnaScsXFxuICAgICdcXFxcdUZGNDknOiAnaScsXFxuICAgICdcXFxcdTAwRUMnOiAnaScsXFxuICAgICdcXFxcdTAwRUQnOiAnaScsXFxuICAgICdcXFxcdTAwRUUnOiAnaScsXFxuICAgICdcXFxcdTAxMjknOiAnaScsXFxuICAgICdcXFxcdTAxMkInOiAnaScsXFxuICAgICdcXFxcdTAxMkQnOiAnaScsXFxuICAgICdcXFxcdTAwRUYnOiAnaScsXFxuICAgICdcXFxcdTFFMkYnOiAnaScsXFxuICAgICdcXFxcdTFFQzknOiAnaScsXFxuICAgICdcXFxcdTAxRDAnOiAnaScsXFxuICAgICdcXFxcdTAyMDknOiAnaScsXFxuICAgICdcXFxcdTAyMEInOiAnaScsXFxuICAgICdcXFxcdTFFQ0InOiAnaScsXFxuICAgICdcXFxcdTAxMkYnOiAnaScsXFxuICAgICdcXFxcdTFFMkQnOiAnaScsXFxuICAgICdcXFxcdTAyNjgnOiAnaScsXFxuICAgICdcXFxcdTAxMzEnOiAnaScsXFxuICAgICdcXFxcdTI0RDknOiAnaicsXFxuICAgICdcXFxcdUZGNEEnOiAnaicsXFxuICAgICdcXFxcdTAxMzUnOiAnaicsXFxuICAgICdcXFxcdTAxRjAnOiAnaicsXFxuICAgICdcXFxcdTAyNDknOiAnaicsXFxuICAgICdcXFxcdTI0REEnOiAnaycsXFxuICAgICdcXFxcdUZGNEInOiAnaycsXFxuICAgICdcXFxcdTFFMzEnOiAnaycsXFxuICAgICdcXFxcdTAxRTknOiAnaycsXFxuICAgICdcXFxcdTFFMzMnOiAnaycsXFxuICAgICdcXFxcdTAxMzcnOiAnaycsXFxuICAgICdcXFxcdTFFMzUnOiAnaycsXFxuICAgICdcXFxcdTAxOTknOiAnaycsXFxuICAgICdcXFxcdTJDNkEnOiAnaycsXFxuICAgICdcXFxcdUE3NDEnOiAnaycsXFxuICAgICdcXFxcdUE3NDMnOiAnaycsXFxuICAgICdcXFxcdUE3NDUnOiAnaycsXFxuICAgICdcXFxcdUE3QTMnOiAnaycsXFxuICAgICdcXFxcdTI0REInOiAnbCcsXFxuICAgICdcXFxcdUZGNEMnOiAnbCcsXFxuICAgICdcXFxcdTAxNDAnOiAnbCcsXFxuICAgICdcXFxcdTAxM0EnOiAnbCcsXFxuICAgICdcXFxcdTAxM0UnOiAnbCcsXFxuICAgICdcXFxcdTFFMzcnOiAnbCcsXFxuICAgICdcXFxcdTFFMzknOiAnbCcsXFxuICAgICdcXFxcdTAxM0MnOiAnbCcsXFxuICAgICdcXFxcdTFFM0QnOiAnbCcsXFxuICAgICdcXFxcdTFFM0InOiAnbCcsXFxuICAgICdcXFxcdTAxN0YnOiAnbCcsXFxuICAgICdcXFxcdTAxNDInOiAnbCcsXFxuICAgICdcXFxcdTAxOUEnOiAnbCcsXFxuICAgICdcXFxcdTAyNkInOiAnbCcsXFxuICAgICdcXFxcdTJDNjEnOiAnbCcsXFxuICAgICdcXFxcdUE3NDknOiAnbCcsXFxuICAgICdcXFxcdUE3ODEnOiAnbCcsXFxuICAgICdcXFxcdUE3NDcnOiAnbCcsXFxuICAgICdcXFxcdTAxQzknOiAnbGonLFxcbiAgICAnXFxcXHUyNERDJzogJ20nLFxcbiAgICAnXFxcXHVGRjREJzogJ20nLFxcbiAgICAnXFxcXHUxRTNGJzogJ20nLFxcbiAgICAnXFxcXHUxRTQxJzogJ20nLFxcbiAgICAnXFxcXHUxRTQzJzogJ20nLFxcbiAgICAnXFxcXHUwMjcxJzogJ20nLFxcbiAgICAnXFxcXHUwMjZGJzogJ20nLFxcbiAgICAnXFxcXHUyNEREJzogJ24nLFxcbiAgICAnXFxcXHVGRjRFJzogJ24nLFxcbiAgICAnXFxcXHUwMUY5JzogJ24nLFxcbiAgICAnXFxcXHUwMTQ0JzogJ24nLFxcbiAgICAnXFxcXHUwMEYxJzogJ24nLFxcbiAgICAnXFxcXHUxRTQ1JzogJ24nLFxcbiAgICAnXFxcXHUwMTQ4JzogJ24nLFxcbiAgICAnXFxcXHUxRTQ3JzogJ24nLFxcbiAgICAnXFxcXHUwMTQ2JzogJ24nLFxcbiAgICAnXFxcXHUxRTRCJzogJ24nLFxcbiAgICAnXFxcXHUxRTQ5JzogJ24nLFxcbiAgICAnXFxcXHUwMTlFJzogJ24nLFxcbiAgICAnXFxcXHUwMjcyJzogJ24nLFxcbiAgICAnXFxcXHUwMTQ5JzogJ24nLFxcbiAgICAnXFxcXHVBNzkxJzogJ24nLFxcbiAgICAnXFxcXHVBN0E1JzogJ24nLFxcbiAgICAnXFxcXHUwMUNDJzogJ25qJyxcXG4gICAgJ1xcXFx1MjRERSc6ICdvJyxcXG4gICAgJ1xcXFx1RkY0Ric6ICdvJyxcXG4gICAgJ1xcXFx1MDBGMic6ICdvJyxcXG4gICAgJ1xcXFx1MDBGMyc6ICdvJyxcXG4gICAgJ1xcXFx1MDBGNCc6ICdvJyxcXG4gICAgJ1xcXFx1MUVEMyc6ICdvJyxcXG4gICAgJ1xcXFx1MUVEMSc6ICdvJyxcXG4gICAgJ1xcXFx1MUVENyc6ICdvJyxcXG4gICAgJ1xcXFx1MUVENSc6ICdvJyxcXG4gICAgJ1xcXFx1MDBGNSc6ICdvJyxcXG4gICAgJ1xcXFx1MUU0RCc6ICdvJyxcXG4gICAgJ1xcXFx1MDIyRCc6ICdvJyxcXG4gICAgJ1xcXFx1MUU0Ric6ICdvJyxcXG4gICAgJ1xcXFx1MDE0RCc6ICdvJyxcXG4gICAgJ1xcXFx1MUU1MSc6ICdvJyxcXG4gICAgJ1xcXFx1MUU1Myc6ICdvJyxcXG4gICAgJ1xcXFx1MDE0Ric6ICdvJyxcXG4gICAgJ1xcXFx1MDIyRic6ICdvJyxcXG4gICAgJ1xcXFx1MDIzMSc6ICdvJyxcXG4gICAgJ1xcXFx1MDBGNic6ICdvJyxcXG4gICAgJ1xcXFx1MDIyQic6ICdvJyxcXG4gICAgJ1xcXFx1MUVDRic6ICdvJyxcXG4gICAgJ1xcXFx1MDE1MSc6ICdvJyxcXG4gICAgJ1xcXFx1MDFEMic6ICdvJyxcXG4gICAgJ1xcXFx1MDIwRCc6ICdvJyxcXG4gICAgJ1xcXFx1MDIwRic6ICdvJyxcXG4gICAgJ1xcXFx1MDFBMSc6ICdvJyxcXG4gICAgJ1xcXFx1MUVERCc6ICdvJyxcXG4gICAgJ1xcXFx1MUVEQic6ICdvJyxcXG4gICAgJ1xcXFx1MUVFMSc6ICdvJyxcXG4gICAgJ1xcXFx1MUVERic6ICdvJyxcXG4gICAgJ1xcXFx1MUVFMyc6ICdvJyxcXG4gICAgJ1xcXFx1MUVDRCc6ICdvJyxcXG4gICAgJ1xcXFx1MUVEOSc6ICdvJyxcXG4gICAgJ1xcXFx1MDFFQic6ICdvJyxcXG4gICAgJ1xcXFx1MDFFRCc6ICdvJyxcXG4gICAgJ1xcXFx1MDBGOCc6ICdvJyxcXG4gICAgJ1xcXFx1MDFGRic6ICdvJyxcXG4gICAgJ1xcXFx1MDI1NCc6ICdvJyxcXG4gICAgJ1xcXFx1QTc0Qic6ICdvJyxcXG4gICAgJ1xcXFx1QTc0RCc6ICdvJyxcXG4gICAgJ1xcXFx1MDI3NSc6ICdvJyxcXG4gICAgJ1xcXFx1MDE1Myc6ICdvZScsXFxuICAgICdcXFxcdTAxQTMnOiAnb2knLFxcbiAgICAnXFxcXHUwMjIzJzogJ291JyxcXG4gICAgJ1xcXFx1QTc0Ric6ICdvbycsXFxuICAgICdcXFxcdTI0REYnOiAncCcsXFxuICAgICdcXFxcdUZGNTAnOiAncCcsXFxuICAgICdcXFxcdTFFNTUnOiAncCcsXFxuICAgICdcXFxcdTFFNTcnOiAncCcsXFxuICAgICdcXFxcdTAxQTUnOiAncCcsXFxuICAgICdcXFxcdTFEN0QnOiAncCcsXFxuICAgICdcXFxcdUE3NTEnOiAncCcsXFxuICAgICdcXFxcdUE3NTMnOiAncCcsXFxuICAgICdcXFxcdUE3NTUnOiAncCcsXFxuICAgICdcXFxcdTI0RTAnOiAncScsXFxuICAgICdcXFxcdUZGNTEnOiAncScsXFxuICAgICdcXFxcdTAyNEInOiAncScsXFxuICAgICdcXFxcdUE3NTcnOiAncScsXFxuICAgICdcXFxcdUE3NTknOiAncScsXFxuICAgICdcXFxcdTI0RTEnOiAncicsXFxuICAgICdcXFxcdUZGNTInOiAncicsXFxuICAgICdcXFxcdTAxNTUnOiAncicsXFxuICAgICdcXFxcdTFFNTknOiAncicsXFxuICAgICdcXFxcdTAxNTknOiAncicsXFxuICAgICdcXFxcdTAyMTEnOiAncicsXFxuICAgICdcXFxcdTAyMTMnOiAncicsXFxuICAgICdcXFxcdTFFNUInOiAncicsXFxuICAgICdcXFxcdTFFNUQnOiAncicsXFxuICAgICdcXFxcdTAxNTcnOiAncicsXFxuICAgICdcXFxcdTFFNUYnOiAncicsXFxuICAgICdcXFxcdTAyNEQnOiAncicsXFxuICAgICdcXFxcdTAyN0QnOiAncicsXFxuICAgICdcXFxcdUE3NUInOiAncicsXFxuICAgICdcXFxcdUE3QTcnOiAncicsXFxuICAgICdcXFxcdUE3ODMnOiAncicsXFxuICAgICdcXFxcdTI0RTInOiAncycsXFxuICAgICdcXFxcdUZGNTMnOiAncycsXFxuICAgICdcXFxcdTAwREYnOiAncycsXFxuICAgICdcXFxcdTAxNUInOiAncycsXFxuICAgICdcXFxcdTFFNjUnOiAncycsXFxuICAgICdcXFxcdTAxNUQnOiAncycsXFxuICAgICdcXFxcdTFFNjEnOiAncycsXFxuICAgICdcXFxcdTAxNjEnOiAncycsXFxuICAgICdcXFxcdTFFNjcnOiAncycsXFxuICAgICdcXFxcdTFFNjMnOiAncycsXFxuICAgICdcXFxcdTFFNjknOiAncycsXFxuICAgICdcXFxcdTAyMTknOiAncycsXFxuICAgICdcXFxcdTAxNUYnOiAncycsXFxuICAgICdcXFxcdTAyM0YnOiAncycsXFxuICAgICdcXFxcdUE3QTknOiAncycsXFxuICAgICdcXFxcdUE3ODUnOiAncycsXFxuICAgICdcXFxcdTFFOUInOiAncycsXFxuICAgICdcXFxcdTI0RTMnOiAndCcsXFxuICAgICdcXFxcdUZGNTQnOiAndCcsXFxuICAgICdcXFxcdTFFNkInOiAndCcsXFxuICAgICdcXFxcdTFFOTcnOiAndCcsXFxuICAgICdcXFxcdTAxNjUnOiAndCcsXFxuICAgICdcXFxcdTFFNkQnOiAndCcsXFxuICAgICdcXFxcdTAyMUInOiAndCcsXFxuICAgICdcXFxcdTAxNjMnOiAndCcsXFxuICAgICdcXFxcdTFFNzEnOiAndCcsXFxuICAgICdcXFxcdTFFNkYnOiAndCcsXFxuICAgICdcXFxcdTAxNjcnOiAndCcsXFxuICAgICdcXFxcdTAxQUQnOiAndCcsXFxuICAgICdcXFxcdTAyODgnOiAndCcsXFxuICAgICdcXFxcdTJDNjYnOiAndCcsXFxuICAgICdcXFxcdUE3ODcnOiAndCcsXFxuICAgICdcXFxcdUE3MjknOiAndHonLFxcbiAgICAnXFxcXHUyNEU0JzogJ3UnLFxcbiAgICAnXFxcXHVGRjU1JzogJ3UnLFxcbiAgICAnXFxcXHUwMEY5JzogJ3UnLFxcbiAgICAnXFxcXHUwMEZBJzogJ3UnLFxcbiAgICAnXFxcXHUwMEZCJzogJ3UnLFxcbiAgICAnXFxcXHUwMTY5JzogJ3UnLFxcbiAgICAnXFxcXHUxRTc5JzogJ3UnLFxcbiAgICAnXFxcXHUwMTZCJzogJ3UnLFxcbiAgICAnXFxcXHUxRTdCJzogJ3UnLFxcbiAgICAnXFxcXHUwMTZEJzogJ3UnLFxcbiAgICAnXFxcXHUwMEZDJzogJ3UnLFxcbiAgICAnXFxcXHUwMURDJzogJ3UnLFxcbiAgICAnXFxcXHUwMUQ4JzogJ3UnLFxcbiAgICAnXFxcXHUwMUQ2JzogJ3UnLFxcbiAgICAnXFxcXHUwMURBJzogJ3UnLFxcbiAgICAnXFxcXHUxRUU3JzogJ3UnLFxcbiAgICAnXFxcXHUwMTZGJzogJ3UnLFxcbiAgICAnXFxcXHUwMTcxJzogJ3UnLFxcbiAgICAnXFxcXHUwMUQ0JzogJ3UnLFxcbiAgICAnXFxcXHUwMjE1JzogJ3UnLFxcbiAgICAnXFxcXHUwMjE3JzogJ3UnLFxcbiAgICAnXFxcXHUwMUIwJzogJ3UnLFxcbiAgICAnXFxcXHUxRUVCJzogJ3UnLFxcbiAgICAnXFxcXHUxRUU5JzogJ3UnLFxcbiAgICAnXFxcXHUxRUVGJzogJ3UnLFxcbiAgICAnXFxcXHUxRUVEJzogJ3UnLFxcbiAgICAnXFxcXHUxRUYxJzogJ3UnLFxcbiAgICAnXFxcXHUxRUU1JzogJ3UnLFxcbiAgICAnXFxcXHUxRTczJzogJ3UnLFxcbiAgICAnXFxcXHUwMTczJzogJ3UnLFxcbiAgICAnXFxcXHUxRTc3JzogJ3UnLFxcbiAgICAnXFxcXHUxRTc1JzogJ3UnLFxcbiAgICAnXFxcXHUwMjg5JzogJ3UnLFxcbiAgICAnXFxcXHUyNEU1JzogJ3YnLFxcbiAgICAnXFxcXHVGRjU2JzogJ3YnLFxcbiAgICAnXFxcXHUxRTdEJzogJ3YnLFxcbiAgICAnXFxcXHUxRTdGJzogJ3YnLFxcbiAgICAnXFxcXHUwMjhCJzogJ3YnLFxcbiAgICAnXFxcXHVBNzVGJzogJ3YnLFxcbiAgICAnXFxcXHUwMjhDJzogJ3YnLFxcbiAgICAnXFxcXHVBNzYxJzogJ3Z5JyxcXG4gICAgJ1xcXFx1MjRFNic6ICd3JyxcXG4gICAgJ1xcXFx1RkY1Nyc6ICd3JyxcXG4gICAgJ1xcXFx1MUU4MSc6ICd3JyxcXG4gICAgJ1xcXFx1MUU4Myc6ICd3JyxcXG4gICAgJ1xcXFx1MDE3NSc6ICd3JyxcXG4gICAgJ1xcXFx1MUU4Nyc6ICd3JyxcXG4gICAgJ1xcXFx1MUU4NSc6ICd3JyxcXG4gICAgJ1xcXFx1MUU5OCc6ICd3JyxcXG4gICAgJ1xcXFx1MUU4OSc6ICd3JyxcXG4gICAgJ1xcXFx1MkM3Myc6ICd3JyxcXG4gICAgJ1xcXFx1MjRFNyc6ICd4JyxcXG4gICAgJ1xcXFx1RkY1OCc6ICd4JyxcXG4gICAgJ1xcXFx1MUU4Qic6ICd4JyxcXG4gICAgJ1xcXFx1MUU4RCc6ICd4JyxcXG4gICAgJ1xcXFx1MjRFOCc6ICd5JyxcXG4gICAgJ1xcXFx1RkY1OSc6ICd5JyxcXG4gICAgJ1xcXFx1MUVGMyc6ICd5JyxcXG4gICAgJ1xcXFx1MDBGRCc6ICd5JyxcXG4gICAgJ1xcXFx1MDE3Nyc6ICd5JyxcXG4gICAgJ1xcXFx1MUVGOSc6ICd5JyxcXG4gICAgJ1xcXFx1MDIzMyc6ICd5JyxcXG4gICAgJ1xcXFx1MUU4Ric6ICd5JyxcXG4gICAgJ1xcXFx1MDBGRic6ICd5JyxcXG4gICAgJ1xcXFx1MUVGNyc6ICd5JyxcXG4gICAgJ1xcXFx1MUU5OSc6ICd5JyxcXG4gICAgJ1xcXFx1MUVGNSc6ICd5JyxcXG4gICAgJ1xcXFx1MDFCNCc6ICd5JyxcXG4gICAgJ1xcXFx1MDI0Ric6ICd5JyxcXG4gICAgJ1xcXFx1MUVGRic6ICd5JyxcXG4gICAgJ1xcXFx1MjRFOSc6ICd6JyxcXG4gICAgJ1xcXFx1RkY1QSc6ICd6JyxcXG4gICAgJ1xcXFx1MDE3QSc6ICd6JyxcXG4gICAgJ1xcXFx1MUU5MSc6ICd6JyxcXG4gICAgJ1xcXFx1MDE3Qyc6ICd6JyxcXG4gICAgJ1xcXFx1MDE3RSc6ICd6JyxcXG4gICAgJ1xcXFx1MUU5Myc6ICd6JyxcXG4gICAgJ1xcXFx1MUU5NSc6ICd6JyxcXG4gICAgJ1xcXFx1MDFCNic6ICd6JyxcXG4gICAgJ1xcXFx1MDIyNSc6ICd6JyxcXG4gICAgJ1xcXFx1MDI0MCc6ICd6JyxcXG4gICAgJ1xcXFx1MkM2Qyc6ICd6JyxcXG4gICAgJ1xcXFx1QTc2Myc6ICd6JyxcXG4gICAgJ1xcXFx1MDM4Nic6ICdcXFxcdTAzOTEnLFxcbiAgICAnXFxcXHUwMzg4JzogJ1xcXFx1MDM5NScsXFxuICAgICdcXFxcdTAzODknOiAnXFxcXHUwMzk3JyxcXG4gICAgJ1xcXFx1MDM4QSc6ICdcXFxcdTAzOTknLFxcbiAgICAnXFxcXHUwM0FBJzogJ1xcXFx1MDM5OScsXFxuICAgICdcXFxcdTAzOEMnOiAnXFxcXHUwMzlGJyxcXG4gICAgJ1xcXFx1MDM4RSc6ICdcXFxcdTAzQTUnLFxcbiAgICAnXFxcXHUwM0FCJzogJ1xcXFx1MDNBNScsXFxuICAgICdcXFxcdTAzOEYnOiAnXFxcXHUwM0E5JyxcXG4gICAgJ1xcXFx1MDNBQyc6ICdcXFxcdTAzQjEnLFxcbiAgICAnXFxcXHUwM0FEJzogJ1xcXFx1MDNCNScsXFxuICAgICdcXFxcdTAzQUUnOiAnXFxcXHUwM0I3JyxcXG4gICAgJ1xcXFx1MDNBRic6ICdcXFxcdTAzQjknLFxcbiAgICAnXFxcXHUwM0NBJzogJ1xcXFx1MDNCOScsXFxuICAgICdcXFxcdTAzOTAnOiAnXFxcXHUwM0I5JyxcXG4gICAgJ1xcXFx1MDNDQyc6ICdcXFxcdTAzQkYnLFxcbiAgICAnXFxcXHUwM0NEJzogJ1xcXFx1MDNDNScsXFxuICAgICdcXFxcdTAzQ0InOiAnXFxcXHUwM0M1JyxcXG4gICAgJ1xcXFx1MDNCMCc6ICdcXFxcdTAzQzUnLFxcbiAgICAnXFxcXHUwM0NFJzogJ1xcXFx1MDNDOScsXFxuICAgICdcXFxcdTAzQzInOiAnXFxcXHUwM0MzJyxcXG4gICAgJ1xcXFx1MjAxOSc6ICdcXFxcJydcXG4gIH07XFxuXFxuICByZXR1cm4gZGlhY3JpdGljcztcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9iYXNlJyxbXFxuICAnLi4vdXRpbHMnXFxuXSwgZnVuY3Rpb24gKFV0aWxzKSB7XFxuICBmdW5jdGlvbiBCYXNlQWRhcHRlciAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcXG4gICAgQmFzZUFkYXB0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XFxuICB9XFxuXFxuICBVdGlscy5FeHRlbmQoQmFzZUFkYXB0ZXIsIFV0aWxzLk9ic2VydmFibGUpO1xcblxcbiAgQmFzZUFkYXB0ZXIucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYGN1cnJlbnRgIG1ldGhvZCBtdXN0IGJlIGRlZmluZWQgaW4gY2hpbGQgY2xhc3Nlcy4nKTtcXG4gIH07XFxuXFxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgcXVlcnlgIG1ldGhvZCBtdXN0IGJlIGRlZmluZWQgaW4gY2hpbGQgY2xhc3Nlcy4nKTtcXG4gIH07XFxuXFxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChjb250YWluZXIsICRjb250YWluZXIpIHtcXG4gICAgLy8gQ2FuIGJlIGltcGxlbWVudGVkIGluIHN1YmNsYXNzZXNcXG4gIH07XFxuXFxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgLy8gQ2FuIGJlIGltcGxlbWVudGVkIGluIHN1YmNsYXNzZXNcXG4gIH07XFxuXFxuICBCYXNlQWRhcHRlci5wcm90b3R5cGUuZ2VuZXJhdGVSZXN1bHRJZCA9IGZ1bmN0aW9uIChjb250YWluZXIsIGRhdGEpIHtcXG4gICAgdmFyIGlkID0gY29udGFpbmVyLmlkICsgJy1yZXN1bHQtJztcXG5cXG4gICAgaWQgKz0gVXRpbHMuZ2VuZXJhdGVDaGFycyg0KTtcXG5cXG4gICAgaWYgKGRhdGEuaWQgIT0gbnVsbCkge1xcbiAgICAgIGlkICs9ICctJyArIGRhdGEuaWQudG9TdHJpbmcoKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICBpZCArPSAnLScgKyBVdGlscy5nZW5lcmF0ZUNoYXJzKDQpO1xcbiAgICB9XFxuICAgIHJldHVybiBpZDtcXG4gIH07XFxuXFxuICByZXR1cm4gQmFzZUFkYXB0ZXI7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvc2VsZWN0JyxbXFxuICAnLi9iYXNlJyxcXG4gICcuLi91dGlscycsXFxuICAnanF1ZXJ5J1xcbl0sIGZ1bmN0aW9uIChCYXNlQWRhcHRlciwgVXRpbHMsICQpIHtcXG4gIGZ1bmN0aW9uIFNlbGVjdEFkYXB0ZXIgKCRlbGVtZW50LCBvcHRpb25zKSB7XFxuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcXG5cXG4gICAgU2VsZWN0QWRhcHRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcXG4gIH1cXG5cXG4gIFV0aWxzLkV4dGVuZChTZWxlY3RBZGFwdGVyLCBCYXNlQWRhcHRlcik7XFxuXFxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XFxuICAgIHZhciBkYXRhID0gW107XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCc6c2VsZWN0ZWQnKS5lYWNoKGZ1bmN0aW9uICgpIHtcXG4gICAgICB2YXIgJG9wdGlvbiA9ICQodGhpcyk7XFxuXFxuICAgICAgdmFyIG9wdGlvbiA9IHNlbGYuaXRlbSgkb3B0aW9uKTtcXG5cXG4gICAgICBkYXRhLnB1c2gob3B0aW9uKTtcXG4gICAgfSk7XFxuXFxuICAgIGNhbGxiYWNrKGRhdGEpO1xcbiAgfTtcXG5cXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChkYXRhKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgZGF0YS5zZWxlY3RlZCA9IHRydWU7XFxuXFxuICAgIC8vIElmIGRhdGEuZWxlbWVudCBpcyBhIERPTSBub2RlLCB1c2UgaXQgaW5zdGVhZFxcbiAgICBpZiAoJChkYXRhLmVsZW1lbnQpLmlzKCdvcHRpb24nKSkge1xcbiAgICAgIGRhdGEuZWxlbWVudC5zZWxlY3RlZCA9IHRydWU7XFxuXFxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbnB1dCcpLnRyaWdnZXIoJ2NoYW5nZScpO1xcblxcbiAgICAgIHJldHVybjtcXG4gICAgfVxcblxcbiAgICBpZiAodGhpcy4kZWxlbWVudC5wcm9wKCdtdWx0aXBsZScpKSB7XFxuICAgICAgdGhpcy5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xcbiAgICAgICAgdmFyIHZhbCA9IFtdO1xcblxcbiAgICAgICAgZGF0YSA9IFtkYXRhXTtcXG4gICAgICAgIGRhdGEucHVzaC5hcHBseShkYXRhLCBjdXJyZW50RGF0YSk7XFxuXFxuICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRhdGEubGVuZ3RoOyBkKyspIHtcXG4gICAgICAgICAgdmFyIGlkID0gZGF0YVtkXS5pZDtcXG5cXG4gICAgICAgICAgaWYgKCQuaW5BcnJheShpZCwgdmFsKSA9PT0gLTEpIHtcXG4gICAgICAgICAgICB2YWwucHVzaChpZCk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHNlbGYuJGVsZW1lbnQudmFsKHZhbCk7XFxuICAgICAgICBzZWxmLiRlbGVtZW50LnRyaWdnZXIoJ2lucHV0JykudHJpZ2dlcignY2hhbmdlJyk7XFxuICAgICAgfSk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgdmFyIHZhbCA9IGRhdGEuaWQ7XFxuXFxuICAgICAgdGhpcy4kZWxlbWVudC52YWwodmFsKTtcXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2lucHV0JykudHJpZ2dlcignY2hhbmdlJyk7XFxuICAgIH1cXG4gIH07XFxuXFxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS51bnNlbGVjdCA9IGZ1bmN0aW9uIChkYXRhKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgaWYgKCF0aGlzLiRlbGVtZW50LnByb3AoJ211bHRpcGxlJykpIHtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgZGF0YS5zZWxlY3RlZCA9IGZhbHNlO1xcblxcbiAgICBpZiAoJChkYXRhLmVsZW1lbnQpLmlzKCdvcHRpb24nKSkge1xcbiAgICAgIGRhdGEuZWxlbWVudC5zZWxlY3RlZCA9IGZhbHNlO1xcblxcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaW5wdXQnKS50cmlnZ2VyKCdjaGFuZ2UnKTtcXG5cXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgdGhpcy5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xcbiAgICAgIHZhciB2YWwgPSBbXTtcXG5cXG4gICAgICBmb3IgKHZhciBkID0gMDsgZCA8IGN1cnJlbnREYXRhLmxlbmd0aDsgZCsrKSB7XFxuICAgICAgICB2YXIgaWQgPSBjdXJyZW50RGF0YVtkXS5pZDtcXG5cXG4gICAgICAgIGlmIChpZCAhPT0gZGF0YS5pZCAmJiAkLmluQXJyYXkoaWQsIHZhbCkgPT09IC0xKSB7XFxuICAgICAgICAgIHZhbC5wdXNoKGlkKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuXFxuICAgICAgc2VsZi4kZWxlbWVudC52YWwodmFsKTtcXG5cXG4gICAgICBzZWxmLiRlbGVtZW50LnRyaWdnZXIoJ2lucHV0JykudHJpZ2dlcignY2hhbmdlJyk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoY29udGFpbmVyLCAkY29udGFpbmVyKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XFxuXFxuICAgIGNvbnRhaW5lci5vbignc2VsZWN0JywgZnVuY3Rpb24gKHBhcmFtcykge1xcbiAgICAgIHNlbGYuc2VsZWN0KHBhcmFtcy5kYXRhKTtcXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbigndW5zZWxlY3QnLCBmdW5jdGlvbiAocGFyYW1zKSB7XFxuICAgICAgc2VsZi51bnNlbGVjdChwYXJhbXMuZGF0YSk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XFxuICAgIC8vIFJlbW92ZSBhbnl0aGluZyBhZGRlZCB0byBjaGlsZCBlbGVtZW50c1xcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJyonKS5lYWNoKGZ1bmN0aW9uICgpIHtcXG4gICAgICAvLyBSZW1vdmUgYW55IGN1c3RvbSBkYXRhIHNldCBieSBTZWxlY3QyXFxuICAgICAgVXRpbHMuUmVtb3ZlRGF0YSh0aGlzKTtcXG4gICAgfSk7XFxuICB9O1xcblxcbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykge1xcbiAgICB2YXIgZGF0YSA9IFtdO1xcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgIHZhciAkb3B0aW9ucyA9IHRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oKTtcXG5cXG4gICAgJG9wdGlvbnMuZWFjaChmdW5jdGlvbiAoKSB7XFxuICAgICAgdmFyICRvcHRpb24gPSAkKHRoaXMpO1xcblxcbiAgICAgIGlmICghJG9wdGlvbi5pcygnb3B0aW9uJykgJiYgISRvcHRpb24uaXMoJ29wdGdyb3VwJykpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIG9wdGlvbiA9IHNlbGYuaXRlbSgkb3B0aW9uKTtcXG5cXG4gICAgICB2YXIgbWF0Y2hlcyA9IHNlbGYubWF0Y2hlcyhwYXJhbXMsIG9wdGlvbik7XFxuXFxuICAgICAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHtcXG4gICAgICAgIGRhdGEucHVzaChtYXRjaGVzKTtcXG4gICAgICB9XFxuICAgIH0pO1xcblxcbiAgICBjYWxsYmFjayh7XFxuICAgICAgcmVzdWx0czogZGF0YVxcbiAgICB9KTtcXG4gIH07XFxuXFxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5hZGRPcHRpb25zID0gZnVuY3Rpb24gKCRvcHRpb25zKSB7XFxuICAgIFV0aWxzLmFwcGVuZE1hbnkodGhpcy4kZWxlbWVudCwgJG9wdGlvbnMpO1xcbiAgfTtcXG5cXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLm9wdGlvbiA9IGZ1bmN0aW9uIChkYXRhKSB7XFxuICAgIHZhciBvcHRpb247XFxuXFxuICAgIGlmIChkYXRhLmNoaWxkcmVuKSB7XFxuICAgICAgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0Z3JvdXAnKTtcXG4gICAgICBvcHRpb24ubGFiZWwgPSBkYXRhLnRleHQ7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XFxuXFxuICAgICAgaWYgKG9wdGlvbi50ZXh0Q29udGVudCAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBkYXRhLnRleHQ7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIG9wdGlvbi5pbm5lclRleHQgPSBkYXRhLnRleHQ7XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgIGlmIChkYXRhLmlkICE9PSB1bmRlZmluZWQpIHtcXG4gICAgICBvcHRpb24udmFsdWUgPSBkYXRhLmlkO1xcbiAgICB9XFxuXFxuICAgIGlmIChkYXRhLmRpc2FibGVkKSB7XFxuICAgICAgb3B0aW9uLmRpc2FibGVkID0gdHJ1ZTtcXG4gICAgfVxcblxcbiAgICBpZiAoZGF0YS5zZWxlY3RlZCkge1xcbiAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XFxuICAgIH1cXG5cXG4gICAgaWYgKGRhdGEudGl0bGUpIHtcXG4gICAgICBvcHRpb24udGl0bGUgPSBkYXRhLnRpdGxlO1xcbiAgICB9XFxuXFxuICAgIHZhciAkb3B0aW9uID0gJChvcHRpb24pO1xcblxcbiAgICB2YXIgbm9ybWFsaXplZERhdGEgPSB0aGlzLl9ub3JtYWxpemVJdGVtKGRhdGEpO1xcbiAgICBub3JtYWxpemVkRGF0YS5lbGVtZW50ID0gb3B0aW9uO1xcblxcbiAgICAvLyBPdmVycmlkZSB0aGUgb3B0aW9uJ3MgZGF0YSB3aXRoIHRoZSBjb21iaW5lZCBkYXRhXFxuICAgIFV0aWxzLlN0b3JlRGF0YShvcHRpb24sICdkYXRhJywgbm9ybWFsaXplZERhdGEpO1xcblxcbiAgICByZXR1cm4gJG9wdGlvbjtcXG4gIH07XFxuXFxuICBTZWxlY3RBZGFwdGVyLnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24gKCRvcHRpb24pIHtcXG4gICAgdmFyIGRhdGEgPSB7fTtcXG5cXG4gICAgZGF0YSA9IFV0aWxzLkdldERhdGEoJG9wdGlvblswXSwgJ2RhdGEnKTtcXG5cXG4gICAgaWYgKGRhdGEgIT0gbnVsbCkge1xcbiAgICAgIHJldHVybiBkYXRhO1xcbiAgICB9XFxuXFxuICAgIGlmICgkb3B0aW9uLmlzKCdvcHRpb24nKSkge1xcbiAgICAgIGRhdGEgPSB7XFxuICAgICAgICBpZDogJG9wdGlvbi52YWwoKSxcXG4gICAgICAgIHRleHQ6ICRvcHRpb24udGV4dCgpLFxcbiAgICAgICAgZGlzYWJsZWQ6ICRvcHRpb24ucHJvcCgnZGlzYWJsZWQnKSxcXG4gICAgICAgIHNlbGVjdGVkOiAkb3B0aW9uLnByb3AoJ3NlbGVjdGVkJyksXFxuICAgICAgICB0aXRsZTogJG9wdGlvbi5wcm9wKCd0aXRsZScpXFxuICAgICAgfTtcXG4gICAgfSBlbHNlIGlmICgkb3B0aW9uLmlzKCdvcHRncm91cCcpKSB7XFxuICAgICAgZGF0YSA9IHtcXG4gICAgICAgIHRleHQ6ICRvcHRpb24ucHJvcCgnbGFiZWwnKSxcXG4gICAgICAgIGNoaWxkcmVuOiBbXSxcXG4gICAgICAgIHRpdGxlOiAkb3B0aW9uLnByb3AoJ3RpdGxlJylcXG4gICAgICB9O1xcblxcbiAgICAgIHZhciAkY2hpbGRyZW4gPSAkb3B0aW9uLmNoaWxkcmVuKCdvcHRpb24nKTtcXG4gICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcXG5cXG4gICAgICBmb3IgKHZhciBjID0gMDsgYyA8ICRjaGlsZHJlbi5sZW5ndGg7IGMrKykge1xcbiAgICAgICAgdmFyICRjaGlsZCA9ICQoJGNoaWxkcmVuW2NdKTtcXG5cXG4gICAgICAgIHZhciBjaGlsZCA9IHRoaXMuaXRlbSgkY2hpbGQpO1xcblxcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XFxuICAgICAgfVxcblxcbiAgICAgIGRhdGEuY2hpbGRyZW4gPSBjaGlsZHJlbjtcXG4gICAgfVxcblxcbiAgICBkYXRhID0gdGhpcy5fbm9ybWFsaXplSXRlbShkYXRhKTtcXG4gICAgZGF0YS5lbGVtZW50ID0gJG9wdGlvblswXTtcXG5cXG4gICAgVXRpbHMuU3RvcmVEYXRhKCRvcHRpb25bMF0sICdkYXRhJywgZGF0YSk7XFxuXFxuICAgIHJldHVybiBkYXRhO1xcbiAgfTtcXG5cXG4gIFNlbGVjdEFkYXB0ZXIucHJvdG90eXBlLl9ub3JtYWxpemVJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcXG4gICAgaWYgKGl0ZW0gIT09IE9iamVjdChpdGVtKSkge1xcbiAgICAgIGl0ZW0gPSB7XFxuICAgICAgICBpZDogaXRlbSxcXG4gICAgICAgIHRleHQ6IGl0ZW1cXG4gICAgICB9O1xcbiAgICB9XFxuXFxuICAgIGl0ZW0gPSAkLmV4dGVuZCh7fSwge1xcbiAgICAgIHRleHQ6ICcnXFxuICAgIH0sIGl0ZW0pO1xcblxcbiAgICB2YXIgZGVmYXVsdHMgPSB7XFxuICAgICAgc2VsZWN0ZWQ6IGZhbHNlLFxcbiAgICAgIGRpc2FibGVkOiBmYWxzZVxcbiAgICB9O1xcblxcbiAgICBpZiAoaXRlbS5pZCAhPSBudWxsKSB7XFxuICAgICAgaXRlbS5pZCA9IGl0ZW0uaWQudG9TdHJpbmcoKTtcXG4gICAgfVxcblxcbiAgICBpZiAoaXRlbS50ZXh0ICE9IG51bGwpIHtcXG4gICAgICBpdGVtLnRleHQgPSBpdGVtLnRleHQudG9TdHJpbmcoKTtcXG4gICAgfVxcblxcbiAgICBpZiAoaXRlbS5fcmVzdWx0SWQgPT0gbnVsbCAmJiBpdGVtLmlkICYmIHRoaXMuY29udGFpbmVyICE9IG51bGwpIHtcXG4gICAgICBpdGVtLl9yZXN1bHRJZCA9IHRoaXMuZ2VuZXJhdGVSZXN1bHRJZCh0aGlzLmNvbnRhaW5lciwgaXRlbSk7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgaXRlbSk7XFxuICB9O1xcblxcbiAgU2VsZWN0QWRhcHRlci5wcm90b3R5cGUubWF0Y2hlcyA9IGZ1bmN0aW9uIChwYXJhbXMsIGRhdGEpIHtcXG4gICAgdmFyIG1hdGNoZXIgPSB0aGlzLm9wdGlvbnMuZ2V0KCdtYXRjaGVyJyk7XFxuXFxuICAgIHJldHVybiBtYXRjaGVyKHBhcmFtcywgZGF0YSk7XFxuICB9O1xcblxcbiAgcmV0dXJuIFNlbGVjdEFkYXB0ZXI7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvYXJyYXknLFtcXG4gICcuL3NlbGVjdCcsXFxuICAnLi4vdXRpbHMnLFxcbiAgJ2pxdWVyeSdcXG5dLCBmdW5jdGlvbiAoU2VsZWN0QWRhcHRlciwgVXRpbHMsICQpIHtcXG4gIGZ1bmN0aW9uIEFycmF5QWRhcHRlciAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcXG4gICAgdGhpcy5fZGF0YVRvQ29udmVydCA9IG9wdGlvbnMuZ2V0KCdkYXRhJykgfHwgW107XFxuXFxuICAgIEFycmF5QWRhcHRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XFxuICB9XFxuXFxuICBVdGlscy5FeHRlbmQoQXJyYXlBZGFwdGVyLCBTZWxlY3RBZGFwdGVyKTtcXG5cXG4gIEFycmF5QWRhcHRlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIChjb250YWluZXIsICRjb250YWluZXIpIHtcXG4gICAgQXJyYXlBZGFwdGVyLl9fc3VwZXJfXy5iaW5kLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcXG5cXG4gICAgdGhpcy5hZGRPcHRpb25zKHRoaXMuY29udmVydFRvT3B0aW9ucyh0aGlzLl9kYXRhVG9Db252ZXJ0KSk7XFxuICB9O1xcblxcbiAgQXJyYXlBZGFwdGVyLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoZGF0YSkge1xcbiAgICB2YXIgJG9wdGlvbiA9IHRoaXMuJGVsZW1lbnQuZmluZCgnb3B0aW9uJykuZmlsdGVyKGZ1bmN0aW9uIChpLCBlbG0pIHtcXG4gICAgICByZXR1cm4gZWxtLnZhbHVlID09IGRhdGEuaWQudG9TdHJpbmcoKTtcXG4gICAgfSk7XFxuXFxuICAgIGlmICgkb3B0aW9uLmxlbmd0aCA9PT0gMCkge1xcbiAgICAgICRvcHRpb24gPSB0aGlzLm9wdGlvbihkYXRhKTtcXG5cXG4gICAgICB0aGlzLmFkZE9wdGlvbnMoJG9wdGlvbik7XFxuICAgIH1cXG5cXG4gICAgQXJyYXlBZGFwdGVyLl9fc3VwZXJfXy5zZWxlY3QuY2FsbCh0aGlzLCBkYXRhKTtcXG4gIH07XFxuXFxuICBBcnJheUFkYXB0ZXIucHJvdG90eXBlLmNvbnZlcnRUb09wdGlvbnMgPSBmdW5jdGlvbiAoZGF0YSkge1xcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgIHZhciAkZXhpc3RpbmcgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ29wdGlvbicpO1xcbiAgICB2YXIgZXhpc3RpbmdJZHMgPSAkZXhpc3RpbmcubWFwKGZ1bmN0aW9uICgpIHtcXG4gICAgICByZXR1cm4gc2VsZi5pdGVtKCQodGhpcykpLmlkO1xcbiAgICB9KS5nZXQoKTtcXG5cXG4gICAgdmFyICRvcHRpb25zID0gW107XFxuXFxuICAgIC8vIEZpbHRlciBvdXQgYWxsIGl0ZW1zIGV4Y2VwdCBmb3IgdGhlIG9uZSBwYXNzZWQgaW4gdGhlIGFyZ3VtZW50XFxuICAgIGZ1bmN0aW9uIG9ubHlJdGVtIChpdGVtKSB7XFxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHJldHVybiAkKHRoaXMpLnZhbCgpID09IGl0ZW0uaWQ7XFxuICAgICAgfTtcXG4gICAgfVxcblxcbiAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRhdGEubGVuZ3RoOyBkKyspIHtcXG4gICAgICB2YXIgaXRlbSA9IHRoaXMuX25vcm1hbGl6ZUl0ZW0oZGF0YVtkXSk7XFxuXFxuICAgICAgLy8gU2tpcCBpdGVtcyB3aGljaCB3ZXJlIHByZS1sb2FkZWQsIG9ubHkgbWVyZ2UgdGhlIGRhdGFcXG4gICAgICBpZiAoJC5pbkFycmF5KGl0ZW0uaWQsIGV4aXN0aW5nSWRzKSA+PSAwKSB7XFxuICAgICAgICB2YXIgJGV4aXN0aW5nT3B0aW9uID0gJGV4aXN0aW5nLmZpbHRlcihvbmx5SXRlbShpdGVtKSk7XFxuXFxuICAgICAgICB2YXIgZXhpc3RpbmdEYXRhID0gdGhpcy5pdGVtKCRleGlzdGluZ09wdGlvbik7XFxuICAgICAgICB2YXIgbmV3RGF0YSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBpdGVtLCBleGlzdGluZ0RhdGEpO1xcblxcbiAgICAgICAgdmFyICRuZXdPcHRpb24gPSB0aGlzLm9wdGlvbihuZXdEYXRhKTtcXG5cXG4gICAgICAgICRleGlzdGluZ09wdGlvbi5yZXBsYWNlV2l0aCgkbmV3T3B0aW9uKTtcXG5cXG4gICAgICAgIGNvbnRpbnVlO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgJG9wdGlvbiA9IHRoaXMub3B0aW9uKGl0ZW0pO1xcblxcbiAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7XFxuICAgICAgICB2YXIgJGNoaWxkcmVuID0gdGhpcy5jb252ZXJ0VG9PcHRpb25zKGl0ZW0uY2hpbGRyZW4pO1xcblxcbiAgICAgICAgVXRpbHMuYXBwZW5kTWFueSgkb3B0aW9uLCAkY2hpbGRyZW4pO1xcbiAgICAgIH1cXG5cXG4gICAgICAkb3B0aW9ucy5wdXNoKCRvcHRpb24pO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiAkb3B0aW9ucztcXG4gIH07XFxuXFxuICByZXR1cm4gQXJyYXlBZGFwdGVyO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9kYXRhL2FqYXgnLFtcXG4gICcuL2FycmF5JyxcXG4gICcuLi91dGlscycsXFxuICAnanF1ZXJ5J1xcbl0sIGZ1bmN0aW9uIChBcnJheUFkYXB0ZXIsIFV0aWxzLCAkKSB7XFxuICBmdW5jdGlvbiBBamF4QWRhcHRlciAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcXG4gICAgdGhpcy5hamF4T3B0aW9ucyA9IHRoaXMuX2FwcGx5RGVmYXVsdHMob3B0aW9ucy5nZXQoJ2FqYXgnKSk7XFxuXFxuICAgIGlmICh0aGlzLmFqYXhPcHRpb25zLnByb2Nlc3NSZXN1bHRzICE9IG51bGwpIHtcXG4gICAgICB0aGlzLnByb2Nlc3NSZXN1bHRzID0gdGhpcy5hamF4T3B0aW9ucy5wcm9jZXNzUmVzdWx0cztcXG4gICAgfVxcblxcbiAgICBBamF4QWRhcHRlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XFxuICB9XFxuXFxuICBVdGlscy5FeHRlbmQoQWpheEFkYXB0ZXIsIEFycmF5QWRhcHRlcik7XFxuXFxuICBBamF4QWRhcHRlci5wcm90b3R5cGUuX2FwcGx5RGVmYXVsdHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xcbiAgICB2YXIgZGVmYXVsdHMgPSB7XFxuICAgICAgZGF0YTogZnVuY3Rpb24gKHBhcmFtcykge1xcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBwYXJhbXMsIHtcXG4gICAgICAgICAgcTogcGFyYW1zLnRlcm1cXG4gICAgICAgIH0pO1xcbiAgICAgIH0sXFxuICAgICAgdHJhbnNwb3J0OiBmdW5jdGlvbiAocGFyYW1zLCBzdWNjZXNzLCBmYWlsdXJlKSB7XFxuICAgICAgICB2YXIgJHJlcXVlc3QgPSAkLmFqYXgocGFyYW1zKTtcXG5cXG4gICAgICAgICRyZXF1ZXN0LnRoZW4oc3VjY2Vzcyk7XFxuICAgICAgICAkcmVxdWVzdC5mYWlsKGZhaWx1cmUpO1xcblxcbiAgICAgICAgcmV0dXJuICRyZXF1ZXN0O1xcbiAgICAgIH1cXG4gICAgfTtcXG5cXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucywgdHJ1ZSk7XFxuICB9O1xcblxcbiAgQWpheEFkYXB0ZXIucHJvdG90eXBlLnByb2Nlc3NSZXN1bHRzID0gZnVuY3Rpb24gKHJlc3VsdHMpIHtcXG4gICAgcmV0dXJuIHJlc3VsdHM7XFxuICB9O1xcblxcbiAgQWpheEFkYXB0ZXIucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHtcXG4gICAgdmFyIG1hdGNoZXMgPSBbXTtcXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcblxcbiAgICBpZiAodGhpcy5fcmVxdWVzdCAhPSBudWxsKSB7XFxuICAgICAgLy8gSlNPTlAgcmVxdWVzdHMgY2Fubm90IGFsd2F5cyBiZSBhYm9ydGVkXFxuICAgICAgaWYgKCQuaXNGdW5jdGlvbih0aGlzLl9yZXF1ZXN0LmFib3J0KSkge1xcbiAgICAgICAgdGhpcy5fcmVxdWVzdC5hYm9ydCgpO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcXG4gICAgfVxcblxcbiAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHtcXG4gICAgICB0eXBlOiAnR0VUJ1xcbiAgICB9LCB0aGlzLmFqYXhPcHRpb25zKTtcXG5cXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnVybCA9PT0gJ2Z1bmN0aW9uJykge1xcbiAgICAgIG9wdGlvbnMudXJsID0gb3B0aW9ucy51cmwuY2FsbCh0aGlzLiRlbGVtZW50LCBwYXJhbXMpO1xcbiAgICB9XFxuXFxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kYXRhID09PSAnZnVuY3Rpb24nKSB7XFxuICAgICAgb3B0aW9ucy5kYXRhID0gb3B0aW9ucy5kYXRhLmNhbGwodGhpcy4kZWxlbWVudCwgcGFyYW1zKTtcXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiByZXF1ZXN0ICgpIHtcXG4gICAgICB2YXIgJHJlcXVlc3QgPSBvcHRpb25zLnRyYW5zcG9ydChvcHRpb25zLCBmdW5jdGlvbiAoZGF0YSkge1xcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBzZWxmLnByb2Nlc3NSZXN1bHRzKGRhdGEsIHBhcmFtcyk7XFxuXFxuICAgICAgICBpZiAoc2VsZi5vcHRpb25zLmdldCgnZGVidWcnKSAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XFxuICAgICAgICAgIC8vIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSByZXNwb25zZSBpbmNsdWRlZCBhIGByZXN1bHRzYCBrZXkuXFxuICAgICAgICAgIGlmICghcmVzdWx0cyB8fCAhcmVzdWx0cy5yZXN1bHRzIHx8ICEkLmlzQXJyYXkocmVzdWx0cy5yZXN1bHRzKSkge1xcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXFxuICAgICAgICAgICAgICAnU2VsZWN0MjogVGhlIEFKQVggcmVzdWx0cyBkaWQgbm90IHJldHVybiBhbiBhcnJheSBpbiB0aGUgJyArXFxuICAgICAgICAgICAgICAnYHJlc3VsdHNgIGtleSBvZiB0aGUgcmVzcG9uc2UuJ1xcbiAgICAgICAgICAgICk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdHMpO1xcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gZGV0ZWN0IGlmIGEgcmVxdWVzdCB3YXMgYWJvcnRlZFxcbiAgICAgICAgLy8gT25seSB3b3JrcyBpZiB0aGUgdHJhbnNwb3J0IGV4cG9zZXMgYSBzdGF0dXMgcHJvcGVydHlcXG4gICAgICAgIGlmICgnc3RhdHVzJyBpbiAkcmVxdWVzdCAmJlxcbiAgICAgICAgICAgICgkcmVxdWVzdC5zdGF0dXMgPT09IDAgfHwgJHJlcXVlc3Quc3RhdHVzID09PSAnMCcpKSB7XFxuICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czptZXNzYWdlJywge1xcbiAgICAgICAgICBtZXNzYWdlOiAnZXJyb3JMb2FkaW5nJ1xcbiAgICAgICAgfSk7XFxuICAgICAgfSk7XFxuXFxuICAgICAgc2VsZi5fcmVxdWVzdCA9ICRyZXF1ZXN0O1xcbiAgICB9XFxuXFxuICAgIGlmICh0aGlzLmFqYXhPcHRpb25zLmRlbGF5ICYmIHBhcmFtcy50ZXJtICE9IG51bGwpIHtcXG4gICAgICBpZiAodGhpcy5fcXVlcnlUaW1lb3V0KSB7XFxuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3F1ZXJ5VGltZW91dCk7XFxuICAgICAgfVxcblxcbiAgICAgIHRoaXMuX3F1ZXJ5VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KHJlcXVlc3QsIHRoaXMuYWpheE9wdGlvbnMuZGVsYXkpO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIHJlcXVlc3QoKTtcXG4gICAgfVxcbiAgfTtcXG5cXG4gIHJldHVybiBBamF4QWRhcHRlcjtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS90YWdzJyxbXFxuICAnanF1ZXJ5J1xcbl0sIGZ1bmN0aW9uICgkKSB7XFxuICBmdW5jdGlvbiBUYWdzIChkZWNvcmF0ZWQsICRlbGVtZW50LCBvcHRpb25zKSB7XFxuICAgIHZhciB0YWdzID0gb3B0aW9ucy5nZXQoJ3RhZ3MnKTtcXG5cXG4gICAgdmFyIGNyZWF0ZVRhZyA9IG9wdGlvbnMuZ2V0KCdjcmVhdGVUYWcnKTtcXG5cXG4gICAgaWYgKGNyZWF0ZVRhZyAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgdGhpcy5jcmVhdGVUYWcgPSBjcmVhdGVUYWc7XFxuICAgIH1cXG5cXG4gICAgdmFyIGluc2VydFRhZyA9IG9wdGlvbnMuZ2V0KCdpbnNlcnRUYWcnKTtcXG5cXG4gICAgaWYgKGluc2VydFRhZyAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICB0aGlzLmluc2VydFRhZyA9IGluc2VydFRhZztcXG4gICAgfVxcblxcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XFxuXFxuICAgIGlmICgkLmlzQXJyYXkodGFncykpIHtcXG4gICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IHRhZ3MubGVuZ3RoOyB0KyspIHtcXG4gICAgICAgIHZhciB0YWcgPSB0YWdzW3RdO1xcbiAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLl9ub3JtYWxpemVJdGVtKHRhZyk7XFxuXFxuICAgICAgICB2YXIgJG9wdGlvbiA9IHRoaXMub3B0aW9uKGl0ZW0pO1xcblxcbiAgICAgICAgdGhpcy4kZWxlbWVudC5hcHBlbmQoJG9wdGlvbik7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuXFxuICBUYWdzLnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBhcmFtcywgY2FsbGJhY2spIHtcXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcblxcbiAgICB0aGlzLl9yZW1vdmVPbGRUYWdzKCk7XFxuXFxuICAgIGlmIChwYXJhbXMudGVybSA9PSBudWxsIHx8IHBhcmFtcy5wYWdlICE9IG51bGwpIHtcXG4gICAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBwYXJhbXMsIGNhbGxiYWNrKTtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgZnVuY3Rpb24gd3JhcHBlciAob2JqLCBjaGlsZCkge1xcbiAgICAgIHZhciBkYXRhID0gb2JqLnJlc3VsdHM7XFxuXFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICB2YXIgb3B0aW9uID0gZGF0YVtpXTtcXG5cXG4gICAgICAgIHZhciBjaGVja0NoaWxkcmVuID0gKFxcbiAgICAgICAgICBvcHRpb24uY2hpbGRyZW4gIT0gbnVsbCAmJlxcbiAgICAgICAgICAhd3JhcHBlcih7XFxuICAgICAgICAgICAgcmVzdWx0czogb3B0aW9uLmNoaWxkcmVuXFxuICAgICAgICAgIH0sIHRydWUpXFxuICAgICAgICApO1xcblxcbiAgICAgICAgdmFyIG9wdGlvblRleHQgPSAob3B0aW9uLnRleHQgfHwgJycpLnRvVXBwZXJDYXNlKCk7XFxuICAgICAgICB2YXIgcGFyYW1zVGVybSA9IChwYXJhbXMudGVybSB8fCAnJykudG9VcHBlckNhc2UoKTtcXG5cXG4gICAgICAgIHZhciBjaGVja1RleHQgPSBvcHRpb25UZXh0ID09PSBwYXJhbXNUZXJtO1xcblxcbiAgICAgICAgaWYgKGNoZWNrVGV4dCB8fCBjaGVja0NoaWxkcmVuKSB7XFxuICAgICAgICAgIGlmIChjaGlsZCkge1xcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBvYmouZGF0YSA9IGRhdGE7XFxuICAgICAgICAgIGNhbGxiYWNrKG9iaik7XFxuXFxuICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuXFxuICAgICAgaWYgKGNoaWxkKSB7XFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgICB9XFxuXFxuICAgICAgdmFyIHRhZyA9IHNlbGYuY3JlYXRlVGFnKHBhcmFtcyk7XFxuXFxuICAgICAgaWYgKHRhZyAhPSBudWxsKSB7XFxuICAgICAgICB2YXIgJG9wdGlvbiA9IHNlbGYub3B0aW9uKHRhZyk7XFxuICAgICAgICAkb3B0aW9uLmF0dHIoJ2RhdGEtc2VsZWN0Mi10YWcnLCB0cnVlKTtcXG5cXG4gICAgICAgIHNlbGYuYWRkT3B0aW9ucyhbJG9wdGlvbl0pO1xcblxcbiAgICAgICAgc2VsZi5pbnNlcnRUYWcoZGF0YSwgdGFnKTtcXG4gICAgICB9XFxuXFxuICAgICAgb2JqLnJlc3VsdHMgPSBkYXRhO1xcblxcbiAgICAgIGNhbGxiYWNrKG9iaik7XFxuICAgIH1cXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zLCB3cmFwcGVyKTtcXG4gIH07XFxuXFxuICBUYWdzLnByb3RvdHlwZS5jcmVhdGVUYWcgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwYXJhbXMpIHtcXG4gICAgdmFyIHRlcm0gPSAkLnRyaW0ocGFyYW1zLnRlcm0pO1xcblxcbiAgICBpZiAodGVybSA9PT0gJycpIHtcXG4gICAgICByZXR1cm4gbnVsbDtcXG4gICAgfVxcblxcbiAgICByZXR1cm4ge1xcbiAgICAgIGlkOiB0ZXJtLFxcbiAgICAgIHRleHQ6IHRlcm1cXG4gICAgfTtcXG4gIH07XFxuXFxuICBUYWdzLnByb3RvdHlwZS5pbnNlcnRUYWcgPSBmdW5jdGlvbiAoXywgZGF0YSwgdGFnKSB7XFxuICAgIGRhdGEudW5zaGlmdCh0YWcpO1xcbiAgfTtcXG5cXG4gIFRhZ3MucHJvdG90eXBlLl9yZW1vdmVPbGRUYWdzID0gZnVuY3Rpb24gKF8pIHtcXG4gICAgdmFyICRvcHRpb25zID0gdGhpcy4kZWxlbWVudC5maW5kKCdvcHRpb25bZGF0YS1zZWxlY3QyLXRhZ10nKTtcXG5cXG4gICAgJG9wdGlvbnMuZWFjaChmdW5jdGlvbiAoKSB7XFxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuXFxuICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcXG4gICAgfSk7XFxuICB9O1xcblxcbiAgcmV0dXJuIFRhZ3M7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvdG9rZW5pemVyJyxbXFxuICAnanF1ZXJ5J1xcbl0sIGZ1bmN0aW9uICgkKSB7XFxuICBmdW5jdGlvbiBUb2tlbml6ZXIgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcXG4gICAgdmFyIHRva2VuaXplciA9IG9wdGlvbnMuZ2V0KCd0b2tlbml6ZXInKTtcXG5cXG4gICAgaWYgKHRva2VuaXplciAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgdGhpcy50b2tlbml6ZXIgPSB0b2tlbml6ZXI7XFxuICAgIH1cXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMpO1xcbiAgfVxcblxcbiAgVG9rZW5pemVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XFxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XFxuXFxuICAgIHRoaXMuJHNlYXJjaCA9ICBjb250YWluZXIuZHJvcGRvd24uJHNlYXJjaCB8fCBjb250YWluZXIuc2VsZWN0aW9uLiRzZWFyY2ggfHxcXG4gICAgICAkY29udGFpbmVyLmZpbmQoJy5zZWxlY3QyLXNlYXJjaF9fZmllbGQnKTtcXG4gIH07XFxuXFxuICBUb2tlbml6ZXIucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zLCBjYWxsYmFjaykge1xcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFuZFNlbGVjdCAoZGF0YSkge1xcbiAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgZGF0YSBvYmplY3Qgc28gd2UgY2FuIHVzZSBpdCBmb3IgY2hlY2tzXFxuICAgICAgdmFyIGl0ZW0gPSBzZWxmLl9ub3JtYWxpemVJdGVtKGRhdGEpO1xcblxcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBkYXRhIG9iamVjdCBhbHJlYWR5IGV4aXN0cyBhcyBhIHRhZ1xcbiAgICAgIC8vIFNlbGVjdCBpdCBpZiBpdCBkb2Vzbid0XFxuICAgICAgdmFyICRleGlzdGluZ09wdGlvbnMgPSBzZWxmLiRlbGVtZW50LmZpbmQoJ29wdGlvbicpLmZpbHRlcihmdW5jdGlvbiAoKSB7XFxuICAgICAgICByZXR1cm4gJCh0aGlzKS52YWwoKSA9PT0gaXRlbS5pZDtcXG4gICAgICB9KTtcXG5cXG4gICAgICAvLyBJZiBhbiBleGlzdGluZyBvcHRpb24gd2Fzbid0IGZvdW5kIGZvciBpdCwgY3JlYXRlIHRoZSBvcHRpb25cXG4gICAgICBpZiAoISRleGlzdGluZ09wdGlvbnMubGVuZ3RoKSB7XFxuICAgICAgICB2YXIgJG9wdGlvbiA9IHNlbGYub3B0aW9uKGl0ZW0pO1xcbiAgICAgICAgJG9wdGlvbi5hdHRyKCdkYXRhLXNlbGVjdDItdGFnJywgdHJ1ZSk7XFxuXFxuICAgICAgICBzZWxmLl9yZW1vdmVPbGRUYWdzKCk7XFxuICAgICAgICBzZWxmLmFkZE9wdGlvbnMoWyRvcHRpb25dKTtcXG4gICAgICB9XFxuXFxuICAgICAgLy8gU2VsZWN0IHRoZSBpdGVtLCBub3cgdGhhdCB3ZSBrbm93IHRoZXJlIGlzIGFuIG9wdGlvbiBmb3IgaXRcXG4gICAgICBzZWxlY3QoaXRlbSk7XFxuICAgIH1cXG5cXG4gICAgZnVuY3Rpb24gc2VsZWN0IChkYXRhKSB7XFxuICAgICAgc2VsZi50cmlnZ2VyKCdzZWxlY3QnLCB7XFxuICAgICAgICBkYXRhOiBkYXRhXFxuICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgcGFyYW1zLnRlcm0gPSBwYXJhbXMudGVybSB8fCAnJztcXG5cXG4gICAgdmFyIHRva2VuRGF0YSA9IHRoaXMudG9rZW5pemVyKHBhcmFtcywgdGhpcy5vcHRpb25zLCBjcmVhdGVBbmRTZWxlY3QpO1xcblxcbiAgICBpZiAodG9rZW5EYXRhLnRlcm0gIT09IHBhcmFtcy50ZXJtKSB7XFxuICAgICAgLy8gUmVwbGFjZSB0aGUgc2VhcmNoIHRlcm0gaWYgd2UgaGF2ZSB0aGUgc2VhcmNoIGJveFxcbiAgICAgIGlmICh0aGlzLiRzZWFyY2gubGVuZ3RoKSB7XFxuICAgICAgICB0aGlzLiRzZWFyY2gudmFsKHRva2VuRGF0YS50ZXJtKTtcXG4gICAgICAgIHRoaXMuJHNlYXJjaC50cmlnZ2VyKCdmb2N1cycpO1xcbiAgICAgIH1cXG5cXG4gICAgICBwYXJhbXMudGVybSA9IHRva2VuRGF0YS50ZXJtO1xcbiAgICB9XFxuXFxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIHBhcmFtcywgY2FsbGJhY2spO1xcbiAgfTtcXG5cXG4gIFRva2VuaXplci5wcm90b3R5cGUudG9rZW5pemVyID0gZnVuY3Rpb24gKF8sIHBhcmFtcywgb3B0aW9ucywgY2FsbGJhY2spIHtcXG4gICAgdmFyIHNlcGFyYXRvcnMgPSBvcHRpb25zLmdldCgndG9rZW5TZXBhcmF0b3JzJykgfHwgW107XFxuICAgIHZhciB0ZXJtID0gcGFyYW1zLnRlcm07XFxuICAgIHZhciBpID0gMDtcXG5cXG4gICAgdmFyIGNyZWF0ZVRhZyA9IHRoaXMuY3JlYXRlVGFnIHx8IGZ1bmN0aW9uIChwYXJhbXMpIHtcXG4gICAgICByZXR1cm4ge1xcbiAgICAgICAgaWQ6IHBhcmFtcy50ZXJtLFxcbiAgICAgICAgdGV4dDogcGFyYW1zLnRlcm1cXG4gICAgICB9O1xcbiAgICB9O1xcblxcbiAgICB3aGlsZSAoaSA8IHRlcm0ubGVuZ3RoKSB7XFxuICAgICAgdmFyIHRlcm1DaGFyID0gdGVybVtpXTtcXG5cXG4gICAgICBpZiAoJC5pbkFycmF5KHRlcm1DaGFyLCBzZXBhcmF0b3JzKSA9PT0gLTEpIHtcXG4gICAgICAgIGkrKztcXG5cXG4gICAgICAgIGNvbnRpbnVlO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgcGFydCA9IHRlcm0uc3Vic3RyKDAsIGkpO1xcbiAgICAgIHZhciBwYXJ0UGFyYW1zID0gJC5leHRlbmQoe30sIHBhcmFtcywge1xcbiAgICAgICAgdGVybTogcGFydFxcbiAgICAgIH0pO1xcblxcbiAgICAgIHZhciBkYXRhID0gY3JlYXRlVGFnKHBhcnRQYXJhbXMpO1xcblxcbiAgICAgIGlmIChkYXRhID09IG51bGwpIHtcXG4gICAgICAgIGkrKztcXG4gICAgICAgIGNvbnRpbnVlO1xcbiAgICAgIH1cXG5cXG4gICAgICBjYWxsYmFjayhkYXRhKTtcXG5cXG4gICAgICAvLyBSZXNldCB0aGUgdGVybSB0byBub3QgaW5jbHVkZSB0aGUgdG9rZW5pemVkIHBvcnRpb25cXG4gICAgICB0ZXJtID0gdGVybS5zdWJzdHIoaSArIDEpIHx8ICcnO1xcbiAgICAgIGkgPSAwO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiB7XFxuICAgICAgdGVybTogdGVybVxcbiAgICB9O1xcbiAgfTtcXG5cXG4gIHJldHVybiBUb2tlbml6ZXI7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2RhdGEvbWluaW11bUlucHV0TGVuZ3RoJyxbXFxuXFxuXSwgZnVuY3Rpb24gKCkge1xcbiAgZnVuY3Rpb24gTWluaW11bUlucHV0TGVuZ3RoIChkZWNvcmF0ZWQsICRlLCBvcHRpb25zKSB7XFxuICAgIHRoaXMubWluaW11bUlucHV0TGVuZ3RoID0gb3B0aW9ucy5nZXQoJ21pbmltdW1JbnB1dExlbmd0aCcpO1xcblxcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZSwgb3B0aW9ucyk7XFxuICB9XFxuXFxuICBNaW5pbXVtSW5wdXRMZW5ndGgucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zLCBjYWxsYmFjaykge1xcbiAgICBwYXJhbXMudGVybSA9IHBhcmFtcy50ZXJtIHx8ICcnO1xcblxcbiAgICBpZiAocGFyYW1zLnRlcm0ubGVuZ3RoIDwgdGhpcy5taW5pbXVtSW5wdXRMZW5ndGgpIHtcXG4gICAgICB0aGlzLnRyaWdnZXIoJ3Jlc3VsdHM6bWVzc2FnZScsIHtcXG4gICAgICAgIG1lc3NhZ2U6ICdpbnB1dFRvb1Nob3J0JyxcXG4gICAgICAgIGFyZ3M6IHtcXG4gICAgICAgICAgbWluaW11bTogdGhpcy5taW5pbXVtSW5wdXRMZW5ndGgsXFxuICAgICAgICAgIGlucHV0OiBwYXJhbXMudGVybSxcXG4gICAgICAgICAgcGFyYW1zOiBwYXJhbXNcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG5cXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zLCBjYWxsYmFjayk7XFxuICB9O1xcblxcbiAgcmV0dXJuIE1pbmltdW1JbnB1dExlbmd0aDtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9tYXhpbXVtSW5wdXRMZW5ndGgnLFtcXG5cXG5dLCBmdW5jdGlvbiAoKSB7XFxuICBmdW5jdGlvbiBNYXhpbXVtSW5wdXRMZW5ndGggKGRlY29yYXRlZCwgJGUsIG9wdGlvbnMpIHtcXG4gICAgdGhpcy5tYXhpbXVtSW5wdXRMZW5ndGggPSBvcHRpb25zLmdldCgnbWF4aW11bUlucHV0TGVuZ3RoJyk7XFxuXFxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlLCBvcHRpb25zKTtcXG4gIH1cXG5cXG4gIE1heGltdW1JbnB1dExlbmd0aC5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBwYXJhbXMsIGNhbGxiYWNrKSB7XFxuICAgIHBhcmFtcy50ZXJtID0gcGFyYW1zLnRlcm0gfHwgJyc7XFxuXFxuICAgIGlmICh0aGlzLm1heGltdW1JbnB1dExlbmd0aCA+IDAgJiZcXG4gICAgICAgIHBhcmFtcy50ZXJtLmxlbmd0aCA+IHRoaXMubWF4aW11bUlucHV0TGVuZ3RoKSB7XFxuICAgICAgdGhpcy50cmlnZ2VyKCdyZXN1bHRzOm1lc3NhZ2UnLCB7XFxuICAgICAgICBtZXNzYWdlOiAnaW5wdXRUb29Mb25nJyxcXG4gICAgICAgIGFyZ3M6IHtcXG4gICAgICAgICAgbWF4aW11bTogdGhpcy5tYXhpbXVtSW5wdXRMZW5ndGgsXFxuICAgICAgICAgIGlucHV0OiBwYXJhbXMudGVybSxcXG4gICAgICAgICAgcGFyYW1zOiBwYXJhbXNcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG5cXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgcGFyYW1zLCBjYWxsYmFjayk7XFxuICB9O1xcblxcbiAgcmV0dXJuIE1heGltdW1JbnB1dExlbmd0aDtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZGF0YS9tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoJyxbXFxuXFxuXSwgZnVuY3Rpb24gKCl7XFxuICBmdW5jdGlvbiBNYXhpbXVtU2VsZWN0aW9uTGVuZ3RoIChkZWNvcmF0ZWQsICRlLCBvcHRpb25zKSB7XFxuICAgIHRoaXMubWF4aW11bVNlbGVjdGlvbkxlbmd0aCA9IG9wdGlvbnMuZ2V0KCdtYXhpbXVtU2VsZWN0aW9uTGVuZ3RoJyk7XFxuXFxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlLCBvcHRpb25zKTtcXG4gIH1cXG5cXG4gIE1heGltdW1TZWxlY3Rpb25MZW5ndGgucHJvdG90eXBlLmJpbmQgPVxcbiAgICBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcXG5cXG4gICAgICBjb250YWluZXIub24oJ3NlbGVjdCcsIGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHNlbGYuX2NoZWNrSWZNYXhpbXVtU2VsZWN0ZWQoKTtcXG4gICAgICB9KTtcXG4gIH07XFxuXFxuICBNYXhpbXVtU2VsZWN0aW9uTGVuZ3RoLnByb3RvdHlwZS5xdWVyeSA9XFxuICAgIGZ1bmN0aW9uIChkZWNvcmF0ZWQsIHBhcmFtcywgY2FsbGJhY2spIHtcXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgICAgdGhpcy5fY2hlY2tJZk1heGltdW1TZWxlY3RlZChmdW5jdGlvbiAoKSB7XFxuICAgICAgICBkZWNvcmF0ZWQuY2FsbChzZWxmLCBwYXJhbXMsIGNhbGxiYWNrKTtcXG4gICAgICB9KTtcXG4gIH07XFxuXFxuICBNYXhpbXVtU2VsZWN0aW9uTGVuZ3RoLnByb3RvdHlwZS5fY2hlY2tJZk1heGltdW1TZWxlY3RlZCA9XFxuICAgIGZ1bmN0aW9uIChfLCBzdWNjZXNzQ2FsbGJhY2spIHtcXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgICAgdGhpcy5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xcbiAgICAgICAgdmFyIGNvdW50ID0gY3VycmVudERhdGEgIT0gbnVsbCA/IGN1cnJlbnREYXRhLmxlbmd0aCA6IDA7XFxuICAgICAgICBpZiAoc2VsZi5tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoID4gMCAmJlxcbiAgICAgICAgICBjb3VudCA+PSBzZWxmLm1heGltdW1TZWxlY3Rpb25MZW5ndGgpIHtcXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOm1lc3NhZ2UnLCB7XFxuICAgICAgICAgICAgbWVzc2FnZTogJ21heGltdW1TZWxlY3RlZCcsXFxuICAgICAgICAgICAgYXJnczoge1xcbiAgICAgICAgICAgICAgbWF4aW11bTogc2VsZi5tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9KTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgaWYgKHN1Y2Nlc3NDYWxsYmFjaykge1xcbiAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2soKTtcXG4gICAgICAgIH1cXG4gICAgICB9KTtcXG4gIH07XFxuXFxuICByZXR1cm4gTWF4aW11bVNlbGVjdGlvbkxlbmd0aDtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24nLFtcXG4gICdqcXVlcnknLFxcbiAgJy4vdXRpbHMnXFxuXSwgZnVuY3Rpb24gKCQsIFV0aWxzKSB7XFxuICBmdW5jdGlvbiBEcm9wZG93biAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcXG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xcblxcbiAgICBEcm9wZG93bi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcXG4gIH1cXG5cXG4gIFV0aWxzLkV4dGVuZChEcm9wZG93biwgVXRpbHMuT2JzZXJ2YWJsZSk7XFxuXFxuICBEcm9wZG93bi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgJGRyb3Bkb3duID0gJChcXG4gICAgICAnPHNwYW4gY2xhc3M9XFxcInNlbGVjdDItZHJvcGRvd25cXFwiPicgK1xcbiAgICAgICAgJzxzcGFuIGNsYXNzPVxcXCJzZWxlY3QyLXJlc3VsdHNcXFwiPjwvc3Bhbj4nICtcXG4gICAgICAnPC9zcGFuPidcXG4gICAgKTtcXG5cXG4gICAgJGRyb3Bkb3duLmF0dHIoJ2RpcicsIHRoaXMub3B0aW9ucy5nZXQoJ2RpcicpKTtcXG5cXG4gICAgdGhpcy4kZHJvcGRvd24gPSAkZHJvcGRvd247XFxuXFxuICAgIHJldHVybiAkZHJvcGRvd247XFxuICB9O1xcblxcbiAgRHJvcGRvd24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XFxuICAgIC8vIFNob3VsZCBiZSBpbXBsZW1lbnRlZCBpbiBzdWJjbGFzc2VzXFxuICB9O1xcblxcbiAgRHJvcGRvd24ucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKCRkcm9wZG93biwgJGNvbnRhaW5lcikge1xcbiAgICAvLyBTaG91bGQgYmUgaW1wbGVtZW50ZWQgaW4gc3ViY2xhc3Nlc1xcbiAgfTtcXG5cXG4gIERyb3Bkb3duLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xcbiAgICAvLyBSZW1vdmUgdGhlIGRyb3Bkb3duIGZyb20gdGhlIERPTVxcbiAgICB0aGlzLiRkcm9wZG93bi5yZW1vdmUoKTtcXG4gIH07XFxuXFxuICByZXR1cm4gRHJvcGRvd247XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL3NlYXJjaCcsW1xcbiAgJ2pxdWVyeScsXFxuICAnLi4vdXRpbHMnXFxuXSwgZnVuY3Rpb24gKCQsIFV0aWxzKSB7XFxuICBmdW5jdGlvbiBTZWFyY2ggKCkgeyB9XFxuXFxuICBTZWFyY2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcXG4gICAgdmFyICRyZW5kZXJlZCA9IGRlY29yYXRlZC5jYWxsKHRoaXMpO1xcblxcbiAgICB2YXIgJHNlYXJjaCA9ICQoXFxuICAgICAgJzxzcGFuIGNsYXNzPVxcXCJzZWxlY3QyLXNlYXJjaCBzZWxlY3QyLXNlYXJjaC0tZHJvcGRvd25cXFwiPicgK1xcbiAgICAgICAgJzxpbnB1dCBjbGFzcz1cXFwic2VsZWN0Mi1zZWFyY2hfX2ZpZWxkXFxcIiB0eXBlPVxcXCJzZWFyY2hcXFwiIHRhYmluZGV4PVxcXCItMVxcXCInICtcXG4gICAgICAgICcgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiIGF1dG9jb3JyZWN0PVxcXCJvZmZcXFwiIGF1dG9jYXBpdGFsaXplPVxcXCJub25lXFxcIicgK1xcbiAgICAgICAgJyBzcGVsbGNoZWNrPVxcXCJmYWxzZVxcXCIgcm9sZT1cXFwic2VhcmNoYm94XFxcIiBhcmlhLWF1dG9jb21wbGV0ZT1cXFwibGlzdFxcXCIgLz4nICtcXG4gICAgICAnPC9zcGFuPidcXG4gICAgKTtcXG5cXG4gICAgdGhpcy4kc2VhcmNoQ29udGFpbmVyID0gJHNlYXJjaDtcXG4gICAgdGhpcy4kc2VhcmNoID0gJHNlYXJjaC5maW5kKCdpbnB1dCcpO1xcblxcbiAgICAkcmVuZGVyZWQucHJlcGVuZCgkc2VhcmNoKTtcXG5cXG4gICAgcmV0dXJuICRyZW5kZXJlZDtcXG4gIH07XFxuXFxuICBTZWFyY2gucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcblxcbiAgICB2YXIgcmVzdWx0c0lkID0gY29udGFpbmVyLmlkICsgJy1yZXN1bHRzJztcXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcXG5cXG4gICAgdGhpcy4kc2VhcmNoLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgIHNlbGYudHJpZ2dlcigna2V5cHJlc3MnLCBldnQpO1xcblxcbiAgICAgIHNlbGYuX2tleVVwUHJldmVudGVkID0gZXZ0LmlzRGVmYXVsdFByZXZlbnRlZCgpO1xcbiAgICB9KTtcXG5cXG4gICAgLy8gV29ya2Fyb3VuZCBmb3IgYnJvd3NlcnMgd2hpY2ggZG8gbm90IHN1cHBvcnQgdGhlIGBpbnB1dGAgZXZlbnRcXG4gICAgLy8gVGhpcyB3aWxsIHByZXZlbnQgZG91YmxlLXRyaWdnZXJpbmcgb2YgZXZlbnRzIGZvciBicm93c2VycyB3aGljaCBzdXBwb3J0XFxuICAgIC8vIGJvdGggdGhlIGBrZXl1cGAgYW5kIGBpbnB1dGAgZXZlbnRzLlxcbiAgICB0aGlzLiRzZWFyY2gub24oJ2lucHV0JywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgIC8vIFVuYmluZCB0aGUgZHVwbGljYXRlZCBga2V5dXBgIGV2ZW50XFxuICAgICAgJCh0aGlzKS5vZmYoJ2tleXVwJyk7XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLiRzZWFyY2gub24oJ2tleXVwIGlucHV0JywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgIHNlbGYuaGFuZGxlU2VhcmNoKGV2dCk7XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ29wZW4nLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgc2VsZi4kc2VhcmNoLmF0dHIoJ3RhYmluZGV4JywgMCk7XFxuICAgICAgc2VsZi4kc2VhcmNoLmF0dHIoJ2FyaWEtY29udHJvbHMnLCByZXN1bHRzSWQpO1xcblxcbiAgICAgIHNlbGYuJHNlYXJjaC50cmlnZ2VyKCdmb2N1cycpO1xcblxcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIHNlbGYuJHNlYXJjaC50cmlnZ2VyKCdmb2N1cycpO1xcbiAgICAgIH0sIDApO1xcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcXG4gICAgICBzZWxmLiRzZWFyY2guYXR0cigndGFiaW5kZXgnLCAtMSk7XFxuICAgICAgc2VsZi4kc2VhcmNoLnJlbW92ZUF0dHIoJ2FyaWEtY29udHJvbHMnKTtcXG4gICAgICBzZWxmLiRzZWFyY2gucmVtb3ZlQXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50Jyk7XFxuXFxuICAgICAgc2VsZi4kc2VhcmNoLnZhbCgnJyk7XFxuICAgICAgc2VsZi4kc2VhcmNoLnRyaWdnZXIoJ2JsdXInKTtcXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbignZm9jdXMnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgaWYgKCFjb250YWluZXIuaXNPcGVuKCkpIHtcXG4gICAgICAgIHNlbGYuJHNlYXJjaC50cmlnZ2VyKCdmb2N1cycpO1xcbiAgICAgIH1cXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czphbGwnLCBmdW5jdGlvbiAocGFyYW1zKSB7XFxuICAgICAgaWYgKHBhcmFtcy5xdWVyeS50ZXJtID09IG51bGwgfHwgcGFyYW1zLnF1ZXJ5LnRlcm0gPT09ICcnKSB7XFxuICAgICAgICB2YXIgc2hvd1NlYXJjaCA9IHNlbGYuc2hvd1NlYXJjaChwYXJhbXMpO1xcblxcbiAgICAgICAgaWYgKHNob3dTZWFyY2gpIHtcXG4gICAgICAgICAgc2VsZi4kc2VhcmNoQ29udGFpbmVyLnJlbW92ZUNsYXNzKCdzZWxlY3QyLXNlYXJjaC0taGlkZScpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgc2VsZi4kc2VhcmNoQ29udGFpbmVyLmFkZENsYXNzKCdzZWxlY3QyLXNlYXJjaC0taGlkZScpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czpmb2N1cycsIGZ1bmN0aW9uIChwYXJhbXMpIHtcXG4gICAgICBpZiAocGFyYW1zLmRhdGEuX3Jlc3VsdElkKSB7XFxuICAgICAgICBzZWxmLiRzZWFyY2guYXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgcGFyYW1zLmRhdGEuX3Jlc3VsdElkKTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgc2VsZi4kc2VhcmNoLnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xcbiAgICAgIH1cXG4gICAgfSk7XFxuICB9O1xcblxcbiAgU2VhcmNoLnByb3RvdHlwZS5oYW5kbGVTZWFyY2ggPSBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgIGlmICghdGhpcy5fa2V5VXBQcmV2ZW50ZWQpIHtcXG4gICAgICB2YXIgaW5wdXQgPSB0aGlzLiRzZWFyY2gudmFsKCk7XFxuXFxuICAgICAgdGhpcy50cmlnZ2VyKCdxdWVyeScsIHtcXG4gICAgICAgIHRlcm06IGlucHV0XFxuICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgdGhpcy5fa2V5VXBQcmV2ZW50ZWQgPSBmYWxzZTtcXG4gIH07XFxuXFxuICBTZWFyY2gucHJvdG90eXBlLnNob3dTZWFyY2ggPSBmdW5jdGlvbiAoXywgcGFyYW1zKSB7XFxuICAgIHJldHVybiB0cnVlO1xcbiAgfTtcXG5cXG4gIHJldHVybiBTZWFyY2g7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL2hpZGVQbGFjZWhvbGRlcicsW1xcblxcbl0sIGZ1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIEhpZGVQbGFjZWhvbGRlciAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucywgZGF0YUFkYXB0ZXIpIHtcXG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMubm9ybWFsaXplUGxhY2Vob2xkZXIob3B0aW9ucy5nZXQoJ3BsYWNlaG9sZGVyJykpO1xcblxcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucywgZGF0YUFkYXB0ZXIpO1xcbiAgfVxcblxcbiAgSGlkZVBsYWNlaG9sZGVyLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBkYXRhKSB7XFxuICAgIGRhdGEucmVzdWx0cyA9IHRoaXMucmVtb3ZlUGxhY2Vob2xkZXIoZGF0YS5yZXN1bHRzKTtcXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgZGF0YSk7XFxuICB9O1xcblxcbiAgSGlkZVBsYWNlaG9sZGVyLnByb3RvdHlwZS5ub3JtYWxpemVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIChfLCBwbGFjZWhvbGRlcikge1xcbiAgICBpZiAodHlwZW9mIHBsYWNlaG9sZGVyID09PSAnc3RyaW5nJykge1xcbiAgICAgIHBsYWNlaG9sZGVyID0ge1xcbiAgICAgICAgaWQ6ICcnLFxcbiAgICAgICAgdGV4dDogcGxhY2Vob2xkZXJcXG4gICAgICB9O1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBwbGFjZWhvbGRlcjtcXG4gIH07XFxuXFxuICBIaWRlUGxhY2Vob2xkZXIucHJvdG90eXBlLnJlbW92ZVBsYWNlaG9sZGVyID0gZnVuY3Rpb24gKF8sIGRhdGEpIHtcXG4gICAgdmFyIG1vZGlmaWVkRGF0YSA9IGRhdGEuc2xpY2UoMCk7XFxuXFxuICAgIGZvciAodmFyIGQgPSBkYXRhLmxlbmd0aCAtIDE7IGQgPj0gMDsgZC0tKSB7XFxuICAgICAgdmFyIGl0ZW0gPSBkYXRhW2RdO1xcblxcbiAgICAgIGlmICh0aGlzLnBsYWNlaG9sZGVyLmlkID09PSBpdGVtLmlkKSB7XFxuICAgICAgICBtb2RpZmllZERhdGEuc3BsaWNlKGQsIDEpO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICByZXR1cm4gbW9kaWZpZWREYXRhO1xcbiAgfTtcXG5cXG4gIHJldHVybiBIaWRlUGxhY2Vob2xkZXI7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL2luZmluaXRlU2Nyb2xsJyxbXFxuICAnanF1ZXJ5J1xcbl0sIGZ1bmN0aW9uICgkKSB7XFxuICBmdW5jdGlvbiBJbmZpbml0ZVNjcm9sbCAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucywgZGF0YUFkYXB0ZXIpIHtcXG4gICAgdGhpcy5sYXN0UGFyYW1zID0ge307XFxuXFxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsICRlbGVtZW50LCBvcHRpb25zLCBkYXRhQWRhcHRlcik7XFxuXFxuICAgIHRoaXMuJGxvYWRpbmdNb3JlID0gdGhpcy5jcmVhdGVMb2FkaW5nTW9yZSgpO1xcbiAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcXG4gIH1cXG5cXG4gIEluZmluaXRlU2Nyb2xsLnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBkYXRhKSB7XFxuICAgIHRoaXMuJGxvYWRpbmdNb3JlLnJlbW92ZSgpO1xcbiAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgZGF0YSk7XFxuXFxuICAgIGlmICh0aGlzLnNob3dMb2FkaW5nTW9yZShkYXRhKSkge1xcbiAgICAgIHRoaXMuJHJlc3VsdHMuYXBwZW5kKHRoaXMuJGxvYWRpbmdNb3JlKTtcXG4gICAgICB0aGlzLmxvYWRNb3JlSWZOZWVkZWQoKTtcXG4gICAgfVxcbiAgfTtcXG5cXG4gIEluZmluaXRlU2Nyb2xsLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdxdWVyeScsIGZ1bmN0aW9uIChwYXJhbXMpIHtcXG4gICAgICBzZWxmLmxhc3RQYXJhbXMgPSBwYXJhbXM7XFxuICAgICAgc2VsZi5sb2FkaW5nID0gdHJ1ZTtcXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbigncXVlcnk6YXBwZW5kJywgZnVuY3Rpb24gKHBhcmFtcykge1xcbiAgICAgIHNlbGYubGFzdFBhcmFtcyA9IHBhcmFtcztcXG4gICAgICBzZWxmLmxvYWRpbmcgPSB0cnVlO1xcbiAgICB9KTtcXG5cXG4gICAgdGhpcy4kcmVzdWx0cy5vbignc2Nyb2xsJywgdGhpcy5sb2FkTW9yZUlmTmVlZGVkLmJpbmQodGhpcykpO1xcbiAgfTtcXG5cXG4gIEluZmluaXRlU2Nyb2xsLnByb3RvdHlwZS5sb2FkTW9yZUlmTmVlZGVkID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgaXNMb2FkTW9yZVZpc2libGUgPSAkLmNvbnRhaW5zKFxcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcXG4gICAgICB0aGlzLiRsb2FkaW5nTW9yZVswXVxcbiAgICApO1xcblxcbiAgICBpZiAodGhpcy5sb2FkaW5nIHx8ICFpc0xvYWRNb3JlVmlzaWJsZSkge1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcblxcbiAgICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMuJHJlc3VsdHMub2Zmc2V0KCkudG9wICtcXG4gICAgICB0aGlzLiRyZXN1bHRzLm91dGVySGVpZ2h0KGZhbHNlKTtcXG4gICAgdmFyIGxvYWRpbmdNb3JlT2Zmc2V0ID0gdGhpcy4kbG9hZGluZ01vcmUub2Zmc2V0KCkudG9wICtcXG4gICAgICB0aGlzLiRsb2FkaW5nTW9yZS5vdXRlckhlaWdodChmYWxzZSk7XFxuXFxuICAgIGlmIChjdXJyZW50T2Zmc2V0ICsgNTAgPj0gbG9hZGluZ01vcmVPZmZzZXQpIHtcXG4gICAgICB0aGlzLmxvYWRNb3JlKCk7XFxuICAgIH1cXG4gIH07XFxuXFxuICBJbmZpbml0ZVNjcm9sbC5wcm90b3R5cGUubG9hZE1vcmUgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XFxuXFxuICAgIHZhciBwYXJhbXMgPSAkLmV4dGVuZCh7fSwge3BhZ2U6IDF9LCB0aGlzLmxhc3RQYXJhbXMpO1xcblxcbiAgICBwYXJhbXMucGFnZSsrO1xcblxcbiAgICB0aGlzLnRyaWdnZXIoJ3F1ZXJ5OmFwcGVuZCcsIHBhcmFtcyk7XFxuICB9O1xcblxcbiAgSW5maW5pdGVTY3JvbGwucHJvdG90eXBlLnNob3dMb2FkaW5nTW9yZSA9IGZ1bmN0aW9uIChfLCBkYXRhKSB7XFxuICAgIHJldHVybiBkYXRhLnBhZ2luYXRpb24gJiYgZGF0YS5wYWdpbmF0aW9uLm1vcmU7XFxuICB9O1xcblxcbiAgSW5maW5pdGVTY3JvbGwucHJvdG90eXBlLmNyZWF0ZUxvYWRpbmdNb3JlID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgJG9wdGlvbiA9ICQoXFxuICAgICAgJzxsaSAnICtcXG4gICAgICAnY2xhc3M9XFxcInNlbGVjdDItcmVzdWx0c19fb3B0aW9uIHNlbGVjdDItcmVzdWx0c19fb3B0aW9uLS1sb2FkLW1vcmVcXFwiJyArXFxuICAgICAgJ3JvbGU9XFxcIm9wdGlvblxcXCIgYXJpYS1kaXNhYmxlZD1cXFwidHJ1ZVxcXCI+PC9saT4nXFxuICAgICk7XFxuXFxuICAgIHZhciBtZXNzYWdlID0gdGhpcy5vcHRpb25zLmdldCgndHJhbnNsYXRpb25zJykuZ2V0KCdsb2FkaW5nTW9yZScpO1xcblxcbiAgICAkb3B0aW9uLmh0bWwobWVzc2FnZSh0aGlzLmxhc3RQYXJhbXMpKTtcXG5cXG4gICAgcmV0dXJuICRvcHRpb247XFxuICB9O1xcblxcbiAgcmV0dXJuIEluZmluaXRlU2Nyb2xsO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9kcm9wZG93bi9hdHRhY2hCb2R5JyxbXFxuICAnanF1ZXJ5JyxcXG4gICcuLi91dGlscydcXG5dLCBmdW5jdGlvbiAoJCwgVXRpbHMpIHtcXG4gIGZ1bmN0aW9uIEF0dGFjaEJvZHkgKGRlY29yYXRlZCwgJGVsZW1lbnQsIG9wdGlvbnMpIHtcXG4gICAgdGhpcy4kZHJvcGRvd25QYXJlbnQgPSAkKG9wdGlvbnMuZ2V0KCdkcm9wZG93blBhcmVudCcpIHx8IGRvY3VtZW50LmJvZHkpO1xcblxcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XFxuICB9XFxuXFxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdvcGVuJywgZnVuY3Rpb24gKCkge1xcbiAgICAgIHNlbGYuX3Nob3dEcm9wZG93bigpO1xcbiAgICAgIHNlbGYuX2F0dGFjaFBvc2l0aW9uaW5nSGFuZGxlcihjb250YWluZXIpO1xcblxcbiAgICAgIC8vIE11c3QgYmluZCBhZnRlciB0aGUgcmVzdWx0cyBoYW5kbGVycyB0byBlbnN1cmUgY29ycmVjdCBzaXppbmdcXG4gICAgICBzZWxmLl9iaW5kQ29udGFpbmVyUmVzdWx0SGFuZGxlcnMoY29udGFpbmVyKTtcXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgc2VsZi5faGlkZURyb3Bkb3duKCk7XFxuICAgICAgc2VsZi5fZGV0YWNoUG9zaXRpb25pbmdIYW5kbGVyKGNvbnRhaW5lcik7XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5vbignbW91c2Vkb3duJywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcXG4gICAgfSk7XFxuICB9O1xcblxcbiAgQXR0YWNoQm9keS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcyk7XFxuXFxuICAgIHRoaXMuJGRyb3Bkb3duQ29udGFpbmVyLnJlbW92ZSgpO1xcbiAgfTtcXG5cXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLnBvc2l0aW9uID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgJGRyb3Bkb3duLCAkY29udGFpbmVyKSB7XFxuICAgIC8vIENsb25lIGFsbCBvZiB0aGUgY29udGFpbmVyIGNsYXNzZXNcXG4gICAgJGRyb3Bkb3duLmF0dHIoJ2NsYXNzJywgJGNvbnRhaW5lci5hdHRyKCdjbGFzcycpKTtcXG5cXG4gICAgJGRyb3Bkb3duLnJlbW92ZUNsYXNzKCdzZWxlY3QyJyk7XFxuICAgICRkcm9wZG93bi5hZGRDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLW9wZW4nKTtcXG5cXG4gICAgJGRyb3Bkb3duLmNzcyh7XFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXFxuICAgICAgdG9wOiAtOTk5OTk5XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xcbiAgfTtcXG5cXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcXG4gICAgdmFyICRjb250YWluZXIgPSAkKCc8c3Bhbj48L3NwYW4+Jyk7XFxuXFxuICAgIHZhciAkZHJvcGRvd24gPSBkZWNvcmF0ZWQuY2FsbCh0aGlzKTtcXG4gICAgJGNvbnRhaW5lci5hcHBlbmQoJGRyb3Bkb3duKTtcXG5cXG4gICAgdGhpcy4kZHJvcGRvd25Db250YWluZXIgPSAkY29udGFpbmVyO1xcblxcbiAgICByZXR1cm4gJGNvbnRhaW5lcjtcXG4gIH07XFxuXFxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5faGlkZURyb3Bkb3duID0gZnVuY3Rpb24gKGRlY29yYXRlZCkge1xcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5kZXRhY2goKTtcXG4gIH07XFxuXFxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fYmluZENvbnRhaW5lclJlc3VsdEhhbmRsZXJzID1cXG4gICAgICBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIpIHtcXG5cXG4gICAgLy8gVGhlc2Ugc2hvdWxkIG9ubHkgYmUgYm91bmQgb25jZVxcbiAgICBpZiAodGhpcy5fY29udGFpbmVyUmVzdWx0c0hhbmRsZXJzQm91bmQpIHtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcblxcbiAgICBjb250YWluZXIub24oJ3Jlc3VsdHM6YWxsJywgZnVuY3Rpb24gKCkge1xcbiAgICAgIHNlbGYuX3Bvc2l0aW9uRHJvcGRvd24oKTtcXG4gICAgICBzZWxmLl9yZXNpemVEcm9wZG93bigpO1xcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdyZXN1bHRzOmFwcGVuZCcsIGZ1bmN0aW9uICgpIHtcXG4gICAgICBzZWxmLl9wb3NpdGlvbkRyb3Bkb3duKCk7XFxuICAgICAgc2VsZi5fcmVzaXplRHJvcGRvd24oKTtcXG4gICAgfSk7XFxuXFxuICAgIGNvbnRhaW5lci5vbigncmVzdWx0czptZXNzYWdlJywgZnVuY3Rpb24gKCkge1xcbiAgICAgIHNlbGYuX3Bvc2l0aW9uRHJvcGRvd24oKTtcXG4gICAgICBzZWxmLl9yZXNpemVEcm9wZG93bigpO1xcbiAgICB9KTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgc2VsZi5fcG9zaXRpb25Ecm9wZG93bigpO1xcbiAgICAgIHNlbGYuX3Jlc2l6ZURyb3Bkb3duKCk7XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ3Vuc2VsZWN0JywgZnVuY3Rpb24gKCkge1xcbiAgICAgIHNlbGYuX3Bvc2l0aW9uRHJvcGRvd24oKTtcXG4gICAgICBzZWxmLl9yZXNpemVEcm9wZG93bigpO1xcbiAgICB9KTtcXG5cXG4gICAgdGhpcy5fY29udGFpbmVyUmVzdWx0c0hhbmRsZXJzQm91bmQgPSB0cnVlO1xcbiAgfTtcXG5cXG4gIEF0dGFjaEJvZHkucHJvdG90eXBlLl9hdHRhY2hQb3NpdGlvbmluZ0hhbmRsZXIgPVxcbiAgICAgIGZ1bmN0aW9uIChkZWNvcmF0ZWQsIGNvbnRhaW5lcikge1xcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgIHZhciBzY3JvbGxFdmVudCA9ICdzY3JvbGwuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xcbiAgICB2YXIgcmVzaXplRXZlbnQgPSAncmVzaXplLnNlbGVjdDIuJyArIGNvbnRhaW5lci5pZDtcXG4gICAgdmFyIG9yaWVudGF0aW9uRXZlbnQgPSAnb3JpZW50YXRpb25jaGFuZ2Uuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xcblxcbiAgICB2YXIgJHdhdGNoZXJzID0gdGhpcy4kY29udGFpbmVyLnBhcmVudHMoKS5maWx0ZXIoVXRpbHMuaGFzU2Nyb2xsKTtcXG4gICAgJHdhdGNoZXJzLmVhY2goZnVuY3Rpb24gKCkge1xcbiAgICAgIFV0aWxzLlN0b3JlRGF0YSh0aGlzLCAnc2VsZWN0Mi1zY3JvbGwtcG9zaXRpb24nLCB7XFxuICAgICAgICB4OiAkKHRoaXMpLnNjcm9sbExlZnQoKSxcXG4gICAgICAgIHk6ICQodGhpcykuc2Nyb2xsVG9wKClcXG4gICAgICB9KTtcXG4gICAgfSk7XFxuXFxuICAgICR3YXRjaGVycy5vbihzY3JvbGxFdmVudCwgZnVuY3Rpb24gKGV2KSB7XFxuICAgICAgdmFyIHBvc2l0aW9uID0gVXRpbHMuR2V0RGF0YSh0aGlzLCAnc2VsZWN0Mi1zY3JvbGwtcG9zaXRpb24nKTtcXG4gICAgICAkKHRoaXMpLnNjcm9sbFRvcChwb3NpdGlvbi55KTtcXG4gICAgfSk7XFxuXFxuICAgICQod2luZG93KS5vbihzY3JvbGxFdmVudCArICcgJyArIHJlc2l6ZUV2ZW50ICsgJyAnICsgb3JpZW50YXRpb25FdmVudCxcXG4gICAgICBmdW5jdGlvbiAoZSkge1xcbiAgICAgIHNlbGYuX3Bvc2l0aW9uRHJvcGRvd24oKTtcXG4gICAgICBzZWxmLl9yZXNpemVEcm9wZG93bigpO1xcbiAgICB9KTtcXG4gIH07XFxuXFxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fZGV0YWNoUG9zaXRpb25pbmdIYW5kbGVyID1cXG4gICAgICBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIpIHtcXG4gICAgdmFyIHNjcm9sbEV2ZW50ID0gJ3Njcm9sbC5zZWxlY3QyLicgKyBjb250YWluZXIuaWQ7XFxuICAgIHZhciByZXNpemVFdmVudCA9ICdyZXNpemUuc2VsZWN0Mi4nICsgY29udGFpbmVyLmlkO1xcbiAgICB2YXIgb3JpZW50YXRpb25FdmVudCA9ICdvcmllbnRhdGlvbmNoYW5nZS5zZWxlY3QyLicgKyBjb250YWluZXIuaWQ7XFxuXFxuICAgIHZhciAkd2F0Y2hlcnMgPSB0aGlzLiRjb250YWluZXIucGFyZW50cygpLmZpbHRlcihVdGlscy5oYXNTY3JvbGwpO1xcbiAgICAkd2F0Y2hlcnMub2ZmKHNjcm9sbEV2ZW50KTtcXG5cXG4gICAgJCh3aW5kb3cpLm9mZihzY3JvbGxFdmVudCArICcgJyArIHJlc2l6ZUV2ZW50ICsgJyAnICsgb3JpZW50YXRpb25FdmVudCk7XFxuICB9O1xcblxcbiAgQXR0YWNoQm9keS5wcm90b3R5cGUuX3Bvc2l0aW9uRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XFxuICAgIHZhciAkd2luZG93ID0gJCh3aW5kb3cpO1xcblxcbiAgICB2YXIgaXNDdXJyZW50bHlBYm92ZSA9IHRoaXMuJGRyb3Bkb3duLmhhc0NsYXNzKCdzZWxlY3QyLWRyb3Bkb3duLS1hYm92ZScpO1xcbiAgICB2YXIgaXNDdXJyZW50bHlCZWxvdyA9IHRoaXMuJGRyb3Bkb3duLmhhc0NsYXNzKCdzZWxlY3QyLWRyb3Bkb3duLS1iZWxvdycpO1xcblxcbiAgICB2YXIgbmV3RGlyZWN0aW9uID0gbnVsbDtcXG5cXG4gICAgdmFyIG9mZnNldCA9IHRoaXMuJGNvbnRhaW5lci5vZmZzZXQoKTtcXG5cXG4gICAgb2Zmc2V0LmJvdHRvbSA9IG9mZnNldC50b3AgKyB0aGlzLiRjb250YWluZXIub3V0ZXJIZWlnaHQoZmFsc2UpO1xcblxcbiAgICB2YXIgY29udGFpbmVyID0ge1xcbiAgICAgIGhlaWdodDogdGhpcy4kY29udGFpbmVyLm91dGVySGVpZ2h0KGZhbHNlKVxcbiAgICB9O1xcblxcbiAgICBjb250YWluZXIudG9wID0gb2Zmc2V0LnRvcDtcXG4gICAgY29udGFpbmVyLmJvdHRvbSA9IG9mZnNldC50b3AgKyBjb250YWluZXIuaGVpZ2h0O1xcblxcbiAgICB2YXIgZHJvcGRvd24gPSB7XFxuICAgICAgaGVpZ2h0OiB0aGlzLiRkcm9wZG93bi5vdXRlckhlaWdodChmYWxzZSlcXG4gICAgfTtcXG5cXG4gICAgdmFyIHZpZXdwb3J0ID0ge1xcbiAgICAgIHRvcDogJHdpbmRvdy5zY3JvbGxUb3AoKSxcXG4gICAgICBib3R0b206ICR3aW5kb3cuc2Nyb2xsVG9wKCkgKyAkd2luZG93LmhlaWdodCgpXFxuICAgIH07XFxuXFxuICAgIHZhciBlbm91Z2hSb29tQWJvdmUgPSB2aWV3cG9ydC50b3AgPCAob2Zmc2V0LnRvcCAtIGRyb3Bkb3duLmhlaWdodCk7XFxuICAgIHZhciBlbm91Z2hSb29tQmVsb3cgPSB2aWV3cG9ydC5ib3R0b20gPiAob2Zmc2V0LmJvdHRvbSArIGRyb3Bkb3duLmhlaWdodCk7XFxuXFxuICAgIHZhciBjc3MgPSB7XFxuICAgICAgbGVmdDogb2Zmc2V0LmxlZnQsXFxuICAgICAgdG9wOiBjb250YWluZXIuYm90dG9tXFxuICAgIH07XFxuXFxuICAgIC8vIERldGVybWluZSB3aGF0IHRoZSBwYXJlbnQgZWxlbWVudCBpcyB0byB1c2UgZm9yIGNhbGN1bGF0aW5nIHRoZSBvZmZzZXRcXG4gICAgdmFyICRvZmZzZXRQYXJlbnQgPSB0aGlzLiRkcm9wZG93blBhcmVudDtcXG5cXG4gICAgLy8gRm9yIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50cywgd2UgbmVlZCB0byBnZXQgdGhlIGVsZW1lbnRcXG4gICAgLy8gdGhhdCBpcyBkZXRlcm1pbmluZyB0aGUgb2Zmc2V0XFxuICAgIGlmICgkb2Zmc2V0UGFyZW50LmNzcygncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcXG4gICAgICAkb2Zmc2V0UGFyZW50ID0gJG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQoKTtcXG4gICAgfVxcblxcbiAgICB2YXIgcGFyZW50T2Zmc2V0ID0ge1xcbiAgICAgIHRvcDogMCxcXG4gICAgICBsZWZ0OiAwXFxuICAgIH07XFxuXFxuICAgIGlmIChcXG4gICAgICAkLmNvbnRhaW5zKGRvY3VtZW50LmJvZHksICRvZmZzZXRQYXJlbnRbMF0pIHx8XFxuICAgICAgJG9mZnNldFBhcmVudFswXS5pc0Nvbm5lY3RlZFxcbiAgICAgICkge1xcbiAgICAgIHBhcmVudE9mZnNldCA9ICRvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XFxuICAgIH1cXG5cXG4gICAgY3NzLnRvcCAtPSBwYXJlbnRPZmZzZXQudG9wO1xcbiAgICBjc3MubGVmdCAtPSBwYXJlbnRPZmZzZXQubGVmdDtcXG5cXG4gICAgaWYgKCFpc0N1cnJlbnRseUFib3ZlICYmICFpc0N1cnJlbnRseUJlbG93KSB7XFxuICAgICAgbmV3RGlyZWN0aW9uID0gJ2JlbG93JztcXG4gICAgfVxcblxcbiAgICBpZiAoIWVub3VnaFJvb21CZWxvdyAmJiBlbm91Z2hSb29tQWJvdmUgJiYgIWlzQ3VycmVudGx5QWJvdmUpIHtcXG4gICAgICBuZXdEaXJlY3Rpb24gPSAnYWJvdmUnO1xcbiAgICB9IGVsc2UgaWYgKCFlbm91Z2hSb29tQWJvdmUgJiYgZW5vdWdoUm9vbUJlbG93ICYmIGlzQ3VycmVudGx5QWJvdmUpIHtcXG4gICAgICBuZXdEaXJlY3Rpb24gPSAnYmVsb3cnO1xcbiAgICB9XFxuXFxuICAgIGlmIChuZXdEaXJlY3Rpb24gPT0gJ2Fib3ZlJyB8fFxcbiAgICAgIChpc0N1cnJlbnRseUFib3ZlICYmIG5ld0RpcmVjdGlvbiAhPT0gJ2JlbG93JykpIHtcXG4gICAgICBjc3MudG9wID0gY29udGFpbmVyLnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBkcm9wZG93bi5oZWlnaHQ7XFxuICAgIH1cXG5cXG4gICAgaWYgKG5ld0RpcmVjdGlvbiAhPSBudWxsKSB7XFxuICAgICAgdGhpcy4kZHJvcGRvd25cXG4gICAgICAgIC5yZW1vdmVDbGFzcygnc2VsZWN0Mi1kcm9wZG93bi0tYmVsb3cgc2VsZWN0Mi1kcm9wZG93bi0tYWJvdmUnKVxcbiAgICAgICAgLmFkZENsYXNzKCdzZWxlY3QyLWRyb3Bkb3duLS0nICsgbmV3RGlyZWN0aW9uKTtcXG4gICAgICB0aGlzLiRjb250YWluZXJcXG4gICAgICAgIC5yZW1vdmVDbGFzcygnc2VsZWN0Mi1jb250YWluZXItLWJlbG93IHNlbGVjdDItY29udGFpbmVyLS1hYm92ZScpXFxuICAgICAgICAuYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS0nICsgbmV3RGlyZWN0aW9uKTtcXG4gICAgfVxcblxcbiAgICB0aGlzLiRkcm9wZG93bkNvbnRhaW5lci5jc3MoY3NzKTtcXG4gIH07XFxuXFxuICBBdHRhY2hCb2R5LnByb3RvdHlwZS5fcmVzaXplRHJvcGRvd24gPSBmdW5jdGlvbiAoKSB7XFxuICAgIHZhciBjc3MgPSB7XFxuICAgICAgd2lkdGg6IHRoaXMuJGNvbnRhaW5lci5vdXRlcldpZHRoKGZhbHNlKSArICdweCdcXG4gICAgfTtcXG5cXG4gICAgaWYgKHRoaXMub3B0aW9ucy5nZXQoJ2Ryb3Bkb3duQXV0b1dpZHRoJykpIHtcXG4gICAgICBjc3MubWluV2lkdGggPSBjc3Mud2lkdGg7XFxuICAgICAgY3NzLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcXG4gICAgICBjc3Mud2lkdGggPSAnYXV0byc7XFxuICAgIH1cXG5cXG4gICAgdGhpcy4kZHJvcGRvd24uY3NzKGNzcyk7XFxuICB9O1xcblxcbiAgQXR0YWNoQm9keS5wcm90b3R5cGUuX3Nob3dEcm9wZG93biA9IGZ1bmN0aW9uIChkZWNvcmF0ZWQpIHtcXG4gICAgdGhpcy4kZHJvcGRvd25Db250YWluZXIuYXBwZW5kVG8odGhpcy4kZHJvcGRvd25QYXJlbnQpO1xcblxcbiAgICB0aGlzLl9wb3NpdGlvbkRyb3Bkb3duKCk7XFxuICAgIHRoaXMuX3Jlc2l6ZURyb3Bkb3duKCk7XFxuICB9O1xcblxcbiAgcmV0dXJuIEF0dGFjaEJvZHk7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL21pbmltdW1SZXN1bHRzRm9yU2VhcmNoJyxbXFxuXFxuXSwgZnVuY3Rpb24gKCkge1xcbiAgZnVuY3Rpb24gY291bnRSZXN1bHRzIChkYXRhKSB7XFxuICAgIHZhciBjb3VudCA9IDA7XFxuXFxuICAgIGZvciAodmFyIGQgPSAwOyBkIDwgZGF0YS5sZW5ndGg7IGQrKykge1xcbiAgICAgIHZhciBpdGVtID0gZGF0YVtkXTtcXG5cXG4gICAgICBpZiAoaXRlbS5jaGlsZHJlbikge1xcbiAgICAgICAgY291bnQgKz0gY291bnRSZXN1bHRzKGl0ZW0uY2hpbGRyZW4pO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBjb3VudCsrO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICByZXR1cm4gY291bnQ7XFxuICB9XFxuXFxuICBmdW5jdGlvbiBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaCAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucywgZGF0YUFkYXB0ZXIpIHtcXG4gICAgdGhpcy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCA9IG9wdGlvbnMuZ2V0KCdtaW5pbXVtUmVzdWx0c0ZvclNlYXJjaCcpO1xcblxcbiAgICBpZiAodGhpcy5taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCA8IDApIHtcXG4gICAgICB0aGlzLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoID0gSW5maW5pdHk7XFxuICAgIH1cXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMsIGRhdGFBZGFwdGVyKTtcXG4gIH1cXG5cXG4gIE1pbmltdW1SZXN1bHRzRm9yU2VhcmNoLnByb3RvdHlwZS5zaG93U2VhcmNoID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgcGFyYW1zKSB7XFxuICAgIGlmIChjb3VudFJlc3VsdHMocGFyYW1zLmRhdGEucmVzdWx0cykgPCB0aGlzLm1pbmltdW1SZXN1bHRzRm9yU2VhcmNoKSB7XFxuICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBwYXJhbXMpO1xcbiAgfTtcXG5cXG4gIHJldHVybiBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaDtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vc2VsZWN0T25DbG9zZScsW1xcbiAgJy4uL3V0aWxzJ1xcbl0sIGZ1bmN0aW9uIChVdGlscykge1xcbiAgZnVuY3Rpb24gU2VsZWN0T25DbG9zZSAoKSB7IH1cXG5cXG4gIFNlbGVjdE9uQ2xvc2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcblxcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCBjb250YWluZXIsICRjb250YWluZXIpO1xcblxcbiAgICBjb250YWluZXIub24oJ2Nsb3NlJywgZnVuY3Rpb24gKHBhcmFtcykge1xcbiAgICAgIHNlbGYuX2hhbmRsZVNlbGVjdE9uQ2xvc2UocGFyYW1zKTtcXG4gICAgfSk7XFxuICB9O1xcblxcbiAgU2VsZWN0T25DbG9zZS5wcm90b3R5cGUuX2hhbmRsZVNlbGVjdE9uQ2xvc2UgPSBmdW5jdGlvbiAoXywgcGFyYW1zKSB7XFxuICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLm9yaWdpbmFsU2VsZWN0MkV2ZW50ICE9IG51bGwpIHtcXG4gICAgICB2YXIgZXZlbnQgPSBwYXJhbXMub3JpZ2luYWxTZWxlY3QyRXZlbnQ7XFxuXFxuICAgICAgLy8gRG9uJ3Qgc2VsZWN0IGFuIGl0ZW0gaWYgdGhlIGNsb3NlIGV2ZW50IHdhcyB0cmlnZ2VyZWQgZnJvbSBhIHNlbGVjdCBvclxcbiAgICAgIC8vIHVuc2VsZWN0IGV2ZW50XFxuICAgICAgaWYgKGV2ZW50Ll90eXBlID09PSAnc2VsZWN0JyB8fCBldmVudC5fdHlwZSA9PT0gJ3Vuc2VsZWN0Jykge1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICB2YXIgJGhpZ2hsaWdodGVkUmVzdWx0cyA9IHRoaXMuZ2V0SGlnaGxpZ2h0ZWRSZXN1bHRzKCk7XFxuXFxuICAgIC8vIE9ubHkgc2VsZWN0IGhpZ2hsaWdodGVkIHJlc3VsdHNcXG4gICAgaWYgKCRoaWdobGlnaHRlZFJlc3VsdHMubGVuZ3RoIDwgMSkge1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcblxcbiAgICB2YXIgZGF0YSA9IFV0aWxzLkdldERhdGEoJGhpZ2hsaWdodGVkUmVzdWx0c1swXSwgJ2RhdGEnKTtcXG5cXG4gICAgLy8gRG9uJ3QgcmUtc2VsZWN0IGFscmVhZHkgc2VsZWN0ZWQgcmVzdWx0ZVxcbiAgICBpZiAoXFxuICAgICAgKGRhdGEuZWxlbWVudCAhPSBudWxsICYmIGRhdGEuZWxlbWVudC5zZWxlY3RlZCkgfHxcXG4gICAgICAoZGF0YS5lbGVtZW50ID09IG51bGwgJiYgZGF0YS5zZWxlY3RlZClcXG4gICAgKSB7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuXFxuICAgIHRoaXMudHJpZ2dlcignc2VsZWN0Jywge1xcbiAgICAgICAgZGF0YTogZGF0YVxcbiAgICB9KTtcXG4gIH07XFxuXFxuICByZXR1cm4gU2VsZWN0T25DbG9zZTtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvZHJvcGRvd24vY2xvc2VPblNlbGVjdCcsW1xcblxcbl0sIGZ1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIENsb3NlT25TZWxlY3QgKCkgeyB9XFxuXFxuICBDbG9zZU9uU2VsZWN0LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcXG5cXG4gICAgY29udGFpbmVyLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgc2VsZi5fc2VsZWN0VHJpZ2dlcmVkKGV2dCk7XFxuICAgIH0pO1xcblxcbiAgICBjb250YWluZXIub24oJ3Vuc2VsZWN0JywgZnVuY3Rpb24gKGV2dCkge1xcbiAgICAgIHNlbGYuX3NlbGVjdFRyaWdnZXJlZChldnQpO1xcbiAgICB9KTtcXG4gIH07XFxuXFxuICBDbG9zZU9uU2VsZWN0LnByb3RvdHlwZS5fc2VsZWN0VHJpZ2dlcmVkID0gZnVuY3Rpb24gKF8sIGV2dCkge1xcbiAgICB2YXIgb3JpZ2luYWxFdmVudCA9IGV2dC5vcmlnaW5hbEV2ZW50O1xcblxcbiAgICAvLyBEb24ndCBjbG9zZSBpZiB0aGUgY29udHJvbCBrZXkgaXMgYmVpbmcgaGVsZFxcbiAgICBpZiAob3JpZ2luYWxFdmVudCAmJiAob3JpZ2luYWxFdmVudC5jdHJsS2V5IHx8IG9yaWdpbmFsRXZlbnQubWV0YUtleSkpIHtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgdGhpcy50cmlnZ2VyKCdjbG9zZScsIHtcXG4gICAgICBvcmlnaW5hbEV2ZW50OiBvcmlnaW5hbEV2ZW50LFxcbiAgICAgIG9yaWdpbmFsU2VsZWN0MkV2ZW50OiBldnRcXG4gICAgfSk7XFxuICB9O1xcblxcbiAgcmV0dXJuIENsb3NlT25TZWxlY3Q7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2kxOG4vZW4nLFtdLGZ1bmN0aW9uICgpIHtcXG4gIC8vIEVuZ2xpc2hcXG4gIHJldHVybiB7XFxuICAgIGVycm9yTG9hZGluZzogZnVuY3Rpb24gKCkge1xcbiAgICAgIHJldHVybiAnVGhlIHJlc3VsdHMgY291bGQgbm90IGJlIGxvYWRlZC4nO1xcbiAgICB9LFxcbiAgICBpbnB1dFRvb0xvbmc6IGZ1bmN0aW9uIChhcmdzKSB7XFxuICAgICAgdmFyIG92ZXJDaGFycyA9IGFyZ3MuaW5wdXQubGVuZ3RoIC0gYXJncy5tYXhpbXVtO1xcblxcbiAgICAgIHZhciBtZXNzYWdlID0gJ1BsZWFzZSBkZWxldGUgJyArIG92ZXJDaGFycyArICcgY2hhcmFjdGVyJztcXG5cXG4gICAgICBpZiAob3ZlckNoYXJzICE9IDEpIHtcXG4gICAgICAgIG1lc3NhZ2UgKz0gJ3MnO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbWVzc2FnZTtcXG4gICAgfSxcXG4gICAgaW5wdXRUb29TaG9ydDogZnVuY3Rpb24gKGFyZ3MpIHtcXG4gICAgICB2YXIgcmVtYWluaW5nQ2hhcnMgPSBhcmdzLm1pbmltdW0gLSBhcmdzLmlucHV0Lmxlbmd0aDtcXG5cXG4gICAgICB2YXIgbWVzc2FnZSA9ICdQbGVhc2UgZW50ZXIgJyArIHJlbWFpbmluZ0NoYXJzICsgJyBvciBtb3JlIGNoYXJhY3RlcnMnO1xcblxcbiAgICAgIHJldHVybiBtZXNzYWdlO1xcbiAgICB9LFxcbiAgICBsb2FkaW5nTW9yZTogZnVuY3Rpb24gKCkge1xcbiAgICAgIHJldHVybiAnTG9hZGluZyBtb3JlIHJlc3VsdHPigKYnO1xcbiAgICB9LFxcbiAgICBtYXhpbXVtU2VsZWN0ZWQ6IGZ1bmN0aW9uIChhcmdzKSB7XFxuICAgICAgdmFyIG1lc3NhZ2UgPSAnWW91IGNhbiBvbmx5IHNlbGVjdCAnICsgYXJncy5tYXhpbXVtICsgJyBpdGVtJztcXG5cXG4gICAgICBpZiAoYXJncy5tYXhpbXVtICE9IDEpIHtcXG4gICAgICAgIG1lc3NhZ2UgKz0gJ3MnO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbWVzc2FnZTtcXG4gICAgfSxcXG4gICAgbm9SZXN1bHRzOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgcmV0dXJuICdObyByZXN1bHRzIGZvdW5kJztcXG4gICAgfSxcXG4gICAgc2VhcmNoaW5nOiBmdW5jdGlvbiAoKSB7XFxuICAgICAgcmV0dXJuICdTZWFyY2hpbmfigKYnO1xcbiAgICB9LFxcbiAgICByZW1vdmVBbGxJdGVtczogZnVuY3Rpb24gKCkge1xcbiAgICAgIHJldHVybiAnUmVtb3ZlIGFsbCBpdGVtcyc7XFxuICAgIH1cXG4gIH07XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2RlZmF1bHRzJyxbXFxuICAnanF1ZXJ5JyxcXG4gICdyZXF1aXJlJyxcXG5cXG4gICcuL3Jlc3VsdHMnLFxcblxcbiAgJy4vc2VsZWN0aW9uL3NpbmdsZScsXFxuICAnLi9zZWxlY3Rpb24vbXVsdGlwbGUnLFxcbiAgJy4vc2VsZWN0aW9uL3BsYWNlaG9sZGVyJyxcXG4gICcuL3NlbGVjdGlvbi9hbGxvd0NsZWFyJyxcXG4gICcuL3NlbGVjdGlvbi9zZWFyY2gnLFxcbiAgJy4vc2VsZWN0aW9uL2V2ZW50UmVsYXknLFxcblxcbiAgJy4vdXRpbHMnLFxcbiAgJy4vdHJhbnNsYXRpb24nLFxcbiAgJy4vZGlhY3JpdGljcycsXFxuXFxuICAnLi9kYXRhL3NlbGVjdCcsXFxuICAnLi9kYXRhL2FycmF5JyxcXG4gICcuL2RhdGEvYWpheCcsXFxuICAnLi9kYXRhL3RhZ3MnLFxcbiAgJy4vZGF0YS90b2tlbml6ZXInLFxcbiAgJy4vZGF0YS9taW5pbXVtSW5wdXRMZW5ndGgnLFxcbiAgJy4vZGF0YS9tYXhpbXVtSW5wdXRMZW5ndGgnLFxcbiAgJy4vZGF0YS9tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoJyxcXG5cXG4gICcuL2Ryb3Bkb3duJyxcXG4gICcuL2Ryb3Bkb3duL3NlYXJjaCcsXFxuICAnLi9kcm9wZG93bi9oaWRlUGxhY2Vob2xkZXInLFxcbiAgJy4vZHJvcGRvd24vaW5maW5pdGVTY3JvbGwnLFxcbiAgJy4vZHJvcGRvd24vYXR0YWNoQm9keScsXFxuICAnLi9kcm9wZG93bi9taW5pbXVtUmVzdWx0c0ZvclNlYXJjaCcsXFxuICAnLi9kcm9wZG93bi9zZWxlY3RPbkNsb3NlJyxcXG4gICcuL2Ryb3Bkb3duL2Nsb3NlT25TZWxlY3QnLFxcblxcbiAgJy4vaTE4bi9lbidcXG5dLCBmdW5jdGlvbiAoJCwgcmVxdWlyZSxcXG5cXG4gICAgICAgICAgICAgUmVzdWx0c0xpc3QsXFxuXFxuICAgICAgICAgICAgIFNpbmdsZVNlbGVjdGlvbiwgTXVsdGlwbGVTZWxlY3Rpb24sIFBsYWNlaG9sZGVyLCBBbGxvd0NsZWFyLFxcbiAgICAgICAgICAgICBTZWxlY3Rpb25TZWFyY2gsIEV2ZW50UmVsYXksXFxuXFxuICAgICAgICAgICAgIFV0aWxzLCBUcmFuc2xhdGlvbiwgRElBQ1JJVElDUyxcXG5cXG4gICAgICAgICAgICAgU2VsZWN0RGF0YSwgQXJyYXlEYXRhLCBBamF4RGF0YSwgVGFncywgVG9rZW5pemVyLFxcbiAgICAgICAgICAgICBNaW5pbXVtSW5wdXRMZW5ndGgsIE1heGltdW1JbnB1dExlbmd0aCwgTWF4aW11bVNlbGVjdGlvbkxlbmd0aCxcXG5cXG4gICAgICAgICAgICAgRHJvcGRvd24sIERyb3Bkb3duU2VhcmNoLCBIaWRlUGxhY2Vob2xkZXIsIEluZmluaXRlU2Nyb2xsLFxcbiAgICAgICAgICAgICBBdHRhY2hCb2R5LCBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaCwgU2VsZWN0T25DbG9zZSwgQ2xvc2VPblNlbGVjdCxcXG5cXG4gICAgICAgICAgICAgRW5nbGlzaFRyYW5zbGF0aW9uKSB7XFxuICBmdW5jdGlvbiBEZWZhdWx0cyAoKSB7XFxuICAgIHRoaXMucmVzZXQoKTtcXG4gIH1cXG5cXG4gIERlZmF1bHRzLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XFxuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyk7XFxuXFxuICAgIGlmIChvcHRpb25zLmRhdGFBZGFwdGVyID09IG51bGwpIHtcXG4gICAgICBpZiAob3B0aW9ucy5hamF4ICE9IG51bGwpIHtcXG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBBamF4RGF0YTtcXG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZGF0YSAhPSBudWxsKSB7XFxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gQXJyYXlEYXRhO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gU2VsZWN0RGF0YTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKG9wdGlvbnMubWluaW11bUlucHV0TGVuZ3RoID4gMCkge1xcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxcbiAgICAgICAgICBNaW5pbXVtSW5wdXRMZW5ndGhcXG4gICAgICAgICk7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChvcHRpb25zLm1heGltdW1JbnB1dExlbmd0aCA+IDApIHtcXG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcXG4gICAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlcixcXG4gICAgICAgICAgTWF4aW11bUlucHV0TGVuZ3RoXFxuICAgICAgICApO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAob3B0aW9ucy5tYXhpbXVtU2VsZWN0aW9uTGVuZ3RoID4gMCkge1xcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxcbiAgICAgICAgICBNYXhpbXVtU2VsZWN0aW9uTGVuZ3RoXFxuICAgICAgICApO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAob3B0aW9ucy50YWdzKSB7XFxuICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUob3B0aW9ucy5kYXRhQWRhcHRlciwgVGFncyk7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChvcHRpb25zLnRva2VuU2VwYXJhdG9ycyAhPSBudWxsIHx8IG9wdGlvbnMudG9rZW5pemVyICE9IG51bGwpIHtcXG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcXG4gICAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlcixcXG4gICAgICAgICAgVG9rZW5pemVyXFxuICAgICAgICApO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAob3B0aW9ucy5xdWVyeSAhPSBudWxsKSB7XFxuICAgICAgICB2YXIgUXVlcnkgPSByZXF1aXJlKG9wdGlvbnMuYW1kQmFzZSArICdjb21wYXQvcXVlcnknKTtcXG5cXG4gICAgICAgIG9wdGlvbnMuZGF0YUFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcXG4gICAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlcixcXG4gICAgICAgICAgUXVlcnlcXG4gICAgICAgICk7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChvcHRpb25zLmluaXRTZWxlY3Rpb24gIT0gbnVsbCkge1xcbiAgICAgICAgdmFyIEluaXRTZWxlY3Rpb24gPSByZXF1aXJlKG9wdGlvbnMuYW1kQmFzZSArICdjb21wYXQvaW5pdFNlbGVjdGlvbicpO1xcblxcbiAgICAgICAgb3B0aW9ucy5kYXRhQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxcbiAgICAgICAgICBvcHRpb25zLmRhdGFBZGFwdGVyLFxcbiAgICAgICAgICBJbml0U2VsZWN0aW9uXFxuICAgICAgICApO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICBpZiAob3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9PSBudWxsKSB7XFxuICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9IFJlc3VsdHNMaXN0O1xcblxcbiAgICAgIGlmIChvcHRpb25zLmFqYXggIT0gbnVsbCkge1xcbiAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxcbiAgICAgICAgICBvcHRpb25zLnJlc3VsdHNBZGFwdGVyLFxcbiAgICAgICAgICBJbmZpbml0ZVNjcm9sbFxcbiAgICAgICAgKTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKG9wdGlvbnMucGxhY2Vob2xkZXIgIT0gbnVsbCkge1xcbiAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxcbiAgICAgICAgICBvcHRpb25zLnJlc3VsdHNBZGFwdGVyLFxcbiAgICAgICAgICBIaWRlUGxhY2Vob2xkZXJcXG4gICAgICAgICk7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChvcHRpb25zLnNlbGVjdE9uQ2xvc2UpIHtcXG4gICAgICAgIG9wdGlvbnMucmVzdWx0c0FkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcXG4gICAgICAgICAgb3B0aW9ucy5yZXN1bHRzQWRhcHRlcixcXG4gICAgICAgICAgU2VsZWN0T25DbG9zZVxcbiAgICAgICAgKTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgaWYgKG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyID09IG51bGwpIHtcXG4gICAgICBpZiAob3B0aW9ucy5tdWx0aXBsZSkge1xcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBEcm9wZG93bjtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgdmFyIFNlYXJjaGFibGVEcm9wZG93biA9IFV0aWxzLkRlY29yYXRlKERyb3Bkb3duLCBEcm9wZG93blNlYXJjaCk7XFxuXFxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9IFNlYXJjaGFibGVEcm9wZG93bjtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKG9wdGlvbnMubWluaW11bVJlc3VsdHNGb3JTZWFyY2ggIT09IDApIHtcXG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXFxuICAgICAgICAgIG9wdGlvbnMuZHJvcGRvd25BZGFwdGVyLFxcbiAgICAgICAgICBNaW5pbXVtUmVzdWx0c0ZvclNlYXJjaFxcbiAgICAgICAgKTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKG9wdGlvbnMuY2xvc2VPblNlbGVjdCkge1xcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcXG4gICAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIsXFxuICAgICAgICAgIENsb3NlT25TZWxlY3RcXG4gICAgICAgICk7XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChcXG4gICAgICAgIG9wdGlvbnMuZHJvcGRvd25Dc3NDbGFzcyAhPSBudWxsIHx8XFxuICAgICAgICBvcHRpb25zLmRyb3Bkb3duQ3NzICE9IG51bGwgfHxcXG4gICAgICAgIG9wdGlvbnMuYWRhcHREcm9wZG93bkNzc0NsYXNzICE9IG51bGxcXG4gICAgICApIHtcXG4gICAgICAgIHZhciBEcm9wZG93bkNTUyA9IHJlcXVpcmUob3B0aW9ucy5hbWRCYXNlICsgJ2NvbXBhdC9kcm9wZG93bkNzcycpO1xcblxcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcXG4gICAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIsXFxuICAgICAgICAgIERyb3Bkb3duQ1NTXFxuICAgICAgICApO1xcbiAgICAgIH1cXG5cXG4gICAgICBvcHRpb25zLmRyb3Bkb3duQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxcbiAgICAgICAgb3B0aW9ucy5kcm9wZG93bkFkYXB0ZXIsXFxuICAgICAgICBBdHRhY2hCb2R5XFxuICAgICAgKTtcXG4gICAgfVxcblxcbiAgICBpZiAob3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID09IG51bGwpIHtcXG4gICAgICBpZiAob3B0aW9ucy5tdWx0aXBsZSkge1xcbiAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gTXVsdGlwbGVTZWxlY3Rpb247XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9IFNpbmdsZVNlbGVjdGlvbjtcXG4gICAgICB9XFxuXFxuICAgICAgLy8gQWRkIHRoZSBwbGFjZWhvbGRlciBtaXhpbiBpZiBhIHBsYWNlaG9sZGVyIHdhcyBzcGVjaWZpZWRcXG4gICAgICBpZiAob3B0aW9ucy5wbGFjZWhvbGRlciAhPSBudWxsKSB7XFxuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIgPSBVdGlscy5EZWNvcmF0ZShcXG4gICAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyLFxcbiAgICAgICAgICBQbGFjZWhvbGRlclxcbiAgICAgICAgKTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKG9wdGlvbnMuYWxsb3dDbGVhcikge1xcbiAgICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXFxuICAgICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlcixcXG4gICAgICAgICAgQWxsb3dDbGVhclxcbiAgICAgICAgKTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKG9wdGlvbnMubXVsdGlwbGUpIHtcXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxcbiAgICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIsXFxuICAgICAgICAgIFNlbGVjdGlvblNlYXJjaFxcbiAgICAgICAgKTtcXG4gICAgICB9XFxuXFxuICAgICAgaWYgKFxcbiAgICAgICAgb3B0aW9ucy5jb250YWluZXJDc3NDbGFzcyAhPSBudWxsIHx8XFxuICAgICAgICBvcHRpb25zLmNvbnRhaW5lckNzcyAhPSBudWxsIHx8XFxuICAgICAgICBvcHRpb25zLmFkYXB0Q29udGFpbmVyQ3NzQ2xhc3MgIT0gbnVsbFxcbiAgICAgICkge1xcbiAgICAgICAgdmFyIENvbnRhaW5lckNTUyA9IHJlcXVpcmUob3B0aW9ucy5hbWRCYXNlICsgJ2NvbXBhdC9jb250YWluZXJDc3MnKTtcXG5cXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uQWRhcHRlciA9IFV0aWxzLkRlY29yYXRlKFxcbiAgICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIsXFxuICAgICAgICAgIENvbnRhaW5lckNTU1xcbiAgICAgICAgKTtcXG4gICAgICB9XFxuXFxuICAgICAgb3B0aW9ucy5zZWxlY3Rpb25BZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXFxuICAgICAgICBvcHRpb25zLnNlbGVjdGlvbkFkYXB0ZXIsXFxuICAgICAgICBFdmVudFJlbGF5XFxuICAgICAgKTtcXG4gICAgfVxcblxcbiAgICAvLyBJZiB0aGUgZGVmYXVsdHMgd2VyZSBub3QgcHJldmlvdXNseSBhcHBsaWVkIGZyb20gYW4gZWxlbWVudCwgaXQgaXNcXG4gICAgLy8gcG9zc2libGUgZm9yIHRoZSBsYW5ndWFnZSBvcHRpb24gdG8gaGF2ZSBub3QgYmVlbiByZXNvbHZlZFxcbiAgICBvcHRpb25zLmxhbmd1YWdlID0gdGhpcy5fcmVzb2x2ZUxhbmd1YWdlKG9wdGlvbnMubGFuZ3VhZ2UpO1xcblxcbiAgICAvLyBBbHdheXMgZmFsbCBiYWNrIHRvIEVuZ2xpc2ggc2luY2UgaXQgd2lsbCBhbHdheXMgYmUgY29tcGxldGVcXG4gICAgb3B0aW9ucy5sYW5ndWFnZS5wdXNoKCdlbicpO1xcblxcbiAgICB2YXIgdW5pcXVlTGFuZ3VhZ2VzID0gW107XFxuXFxuICAgIGZvciAodmFyIGwgPSAwOyBsIDwgb3B0aW9ucy5sYW5ndWFnZS5sZW5ndGg7IGwrKykge1xcbiAgICAgIHZhciBsYW5ndWFnZSA9IG9wdGlvbnMubGFuZ3VhZ2VbbF07XFxuXFxuICAgICAgaWYgKHVuaXF1ZUxhbmd1YWdlcy5pbmRleE9mKGxhbmd1YWdlKSA9PT0gLTEpIHtcXG4gICAgICAgIHVuaXF1ZUxhbmd1YWdlcy5wdXNoKGxhbmd1YWdlKTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgb3B0aW9ucy5sYW5ndWFnZSA9IHVuaXF1ZUxhbmd1YWdlcztcXG5cXG4gICAgb3B0aW9ucy50cmFuc2xhdGlvbnMgPSB0aGlzLl9wcm9jZXNzVHJhbnNsYXRpb25zKFxcbiAgICAgIG9wdGlvbnMubGFuZ3VhZ2UsXFxuICAgICAgb3B0aW9ucy5kZWJ1Z1xcbiAgICApO1xcblxcbiAgICByZXR1cm4gb3B0aW9ucztcXG4gIH07XFxuXFxuICBEZWZhdWx0cy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XFxuICAgIGZ1bmN0aW9uIHN0cmlwRGlhY3JpdGljcyAodGV4dCkge1xcbiAgICAgIC8vIFVzZWQgJ3VuaSByYW5nZSArIG5hbWVkIGZ1bmN0aW9uJyBmcm9tIGh0dHA6Ly9qc3BlcmYuY29tL2RpYWNyaXRpY3MvMThcXG4gICAgICBmdW5jdGlvbiBtYXRjaChhKSB7XFxuICAgICAgICByZXR1cm4gRElBQ1JJVElDU1thXSB8fCBhO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9bXlxcXFx1MDAwMC1cXFxcdTAwN0VdL2csIG1hdGNoKTtcXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiBtYXRjaGVyIChwYXJhbXMsIGRhdGEpIHtcXG4gICAgICAvLyBBbHdheXMgcmV0dXJuIHRoZSBvYmplY3QgaWYgdGhlcmUgaXMgbm90aGluZyB0byBjb21wYXJlXFxuICAgICAgaWYgKCQudHJpbShwYXJhbXMudGVybSkgPT09ICcnKSB7XFxuICAgICAgICByZXR1cm4gZGF0YTtcXG4gICAgICB9XFxuXFxuICAgICAgLy8gRG8gYSByZWN1cnNpdmUgY2hlY2sgZm9yIG9wdGlvbnMgd2l0aCBjaGlsZHJlblxcbiAgICAgIGlmIChkYXRhLmNoaWxkcmVuICYmIGRhdGEuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xcbiAgICAgICAgLy8gQ2xvbmUgdGhlIGRhdGEgb2JqZWN0IGlmIHRoZXJlIGFyZSBjaGlsZHJlblxcbiAgICAgICAgLy8gVGhpcyBpcyByZXF1aXJlZCBhcyB3ZSBtb2RpZnkgdGhlIG9iamVjdCB0byByZW1vdmUgYW55IG5vbi1tYXRjaGVzXFxuICAgICAgICB2YXIgbWF0Y2ggPSAkLmV4dGVuZCh0cnVlLCB7fSwgZGF0YSk7XFxuXFxuICAgICAgICAvLyBDaGVjayBlYWNoIGNoaWxkIG9mIHRoZSBvcHRpb25cXG4gICAgICAgIGZvciAodmFyIGMgPSBkYXRhLmNoaWxkcmVuLmxlbmd0aCAtIDE7IGMgPj0gMDsgYy0tKSB7XFxuICAgICAgICAgIHZhciBjaGlsZCA9IGRhdGEuY2hpbGRyZW5bY107XFxuXFxuICAgICAgICAgIHZhciBtYXRjaGVzID0gbWF0Y2hlcihwYXJhbXMsIGNoaWxkKTtcXG5cXG4gICAgICAgICAgLy8gSWYgdGhlcmUgd2Fzbid0IGEgbWF0Y2gsIHJlbW92ZSB0aGUgb2JqZWN0IGluIHRoZSBhcnJheVxcbiAgICAgICAgICBpZiAobWF0Y2hlcyA9PSBudWxsKSB7XFxuICAgICAgICAgICAgbWF0Y2guY2hpbGRyZW4uc3BsaWNlKGMsIDEpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICAvLyBJZiBhbnkgY2hpbGRyZW4gbWF0Y2hlZCwgcmV0dXJuIHRoZSBuZXcgb2JqZWN0XFxuICAgICAgICBpZiAobWF0Y2guY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAvLyBJZiB0aGVyZSB3ZXJlIG5vIG1hdGNoaW5nIGNoaWxkcmVuLCBjaGVjayBqdXN0IHRoZSBwbGFpbiBvYmplY3RcXG4gICAgICAgIHJldHVybiBtYXRjaGVyKHBhcmFtcywgbWF0Y2gpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgb3JpZ2luYWwgPSBzdHJpcERpYWNyaXRpY3MoZGF0YS50ZXh0KS50b1VwcGVyQ2FzZSgpO1xcbiAgICAgIHZhciB0ZXJtID0gc3RyaXBEaWFjcml0aWNzKHBhcmFtcy50ZXJtKS50b1VwcGVyQ2FzZSgpO1xcblxcbiAgICAgIC8vIENoZWNrIGlmIHRoZSB0ZXh0IGNvbnRhaW5zIHRoZSB0ZXJtXFxuICAgICAgaWYgKG9yaWdpbmFsLmluZGV4T2YodGVybSkgPiAtMSkge1xcbiAgICAgICAgcmV0dXJuIGRhdGE7XFxuICAgICAgfVxcblxcbiAgICAgIC8vIElmIGl0IGRvZXNuJ3QgY29udGFpbiB0aGUgdGVybSwgZG9uJ3QgcmV0dXJuIGFueXRoaW5nXFxuICAgICAgcmV0dXJuIG51bGw7XFxuICAgIH1cXG5cXG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcXG4gICAgICBhbWRCYXNlOiAnLi8nLFxcbiAgICAgIGFtZExhbmd1YWdlQmFzZTogJy4vaTE4bi8nLFxcbiAgICAgIGNsb3NlT25TZWxlY3Q6IHRydWUsXFxuICAgICAgZGVidWc6IGZhbHNlLFxcbiAgICAgIGRyb3Bkb3duQXV0b1dpZHRoOiBmYWxzZSxcXG4gICAgICBlc2NhcGVNYXJrdXA6IFV0aWxzLmVzY2FwZU1hcmt1cCxcXG4gICAgICBsYW5ndWFnZToge30sXFxuICAgICAgbWF0Y2hlcjogbWF0Y2hlcixcXG4gICAgICBtaW5pbXVtSW5wdXRMZW5ndGg6IDAsXFxuICAgICAgbWF4aW11bUlucHV0TGVuZ3RoOiAwLFxcbiAgICAgIG1heGltdW1TZWxlY3Rpb25MZW5ndGg6IDAsXFxuICAgICAgbWluaW11bVJlc3VsdHNGb3JTZWFyY2g6IDAsXFxuICAgICAgc2VsZWN0T25DbG9zZTogZmFsc2UsXFxuICAgICAgc2Nyb2xsQWZ0ZXJTZWxlY3Q6IGZhbHNlLFxcbiAgICAgIHNvcnRlcjogZnVuY3Rpb24gKGRhdGEpIHtcXG4gICAgICAgIHJldHVybiBkYXRhO1xcbiAgICAgIH0sXFxuICAgICAgdGVtcGxhdGVSZXN1bHQ6IGZ1bmN0aW9uIChyZXN1bHQpIHtcXG4gICAgICAgIHJldHVybiByZXN1bHQudGV4dDtcXG4gICAgICB9LFxcbiAgICAgIHRlbXBsYXRlU2VsZWN0aW9uOiBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XFxuICAgICAgICByZXR1cm4gc2VsZWN0aW9uLnRleHQ7XFxuICAgICAgfSxcXG4gICAgICB0aGVtZTogJ2RlZmF1bHQnLFxcbiAgICAgIHdpZHRoOiAncmVzb2x2ZSdcXG4gICAgfTtcXG4gIH07XFxuXFxuICBEZWZhdWx0cy5wcm90b3R5cGUuYXBwbHlGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIChvcHRpb25zLCAkZWxlbWVudCkge1xcbiAgICB2YXIgb3B0aW9uTGFuZ3VhZ2UgPSBvcHRpb25zLmxhbmd1YWdlO1xcbiAgICB2YXIgZGVmYXVsdExhbmd1YWdlID0gdGhpcy5kZWZhdWx0cy5sYW5ndWFnZTtcXG4gICAgdmFyIGVsZW1lbnRMYW5ndWFnZSA9ICRlbGVtZW50LnByb3AoJ2xhbmcnKTtcXG4gICAgdmFyIHBhcmVudExhbmd1YWdlID0gJGVsZW1lbnQuY2xvc2VzdCgnW2xhbmddJykucHJvcCgnbGFuZycpO1xcblxcbiAgICB2YXIgbGFuZ3VhZ2VzID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5jYWxsKFxcbiAgICAgIHRoaXMuX3Jlc29sdmVMYW5ndWFnZShlbGVtZW50TGFuZ3VhZ2UpLFxcbiAgICAgIHRoaXMuX3Jlc29sdmVMYW5ndWFnZShvcHRpb25MYW5ndWFnZSksXFxuICAgICAgdGhpcy5fcmVzb2x2ZUxhbmd1YWdlKGRlZmF1bHRMYW5ndWFnZSksXFxuICAgICAgdGhpcy5fcmVzb2x2ZUxhbmd1YWdlKHBhcmVudExhbmd1YWdlKVxcbiAgICApO1xcblxcbiAgICBvcHRpb25zLmxhbmd1YWdlID0gbGFuZ3VhZ2VzO1xcblxcbiAgICByZXR1cm4gb3B0aW9ucztcXG4gIH07XFxuXFxuICBEZWZhdWx0cy5wcm90b3R5cGUuX3Jlc29sdmVMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5ndWFnZSkge1xcbiAgICBpZiAoIWxhbmd1YWdlKSB7XFxuICAgICAgcmV0dXJuIFtdO1xcbiAgICB9XFxuXFxuICAgIGlmICgkLmlzRW1wdHlPYmplY3QobGFuZ3VhZ2UpKSB7XFxuICAgICAgcmV0dXJuIFtdO1xcbiAgICB9XFxuXFxuICAgIGlmICgkLmlzUGxhaW5PYmplY3QobGFuZ3VhZ2UpKSB7XFxuICAgICAgcmV0dXJuIFtsYW5ndWFnZV07XFxuICAgIH1cXG5cXG4gICAgdmFyIGxhbmd1YWdlcztcXG5cXG4gICAgaWYgKCEkLmlzQXJyYXkobGFuZ3VhZ2UpKSB7XFxuICAgICAgbGFuZ3VhZ2VzID0gW2xhbmd1YWdlXTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICBsYW5ndWFnZXMgPSBsYW5ndWFnZTtcXG4gICAgfVxcblxcbiAgICB2YXIgcmVzb2x2ZWRMYW5ndWFnZXMgPSBbXTtcXG5cXG4gICAgZm9yICh2YXIgbCA9IDA7IGwgPCBsYW5ndWFnZXMubGVuZ3RoOyBsKyspIHtcXG4gICAgICByZXNvbHZlZExhbmd1YWdlcy5wdXNoKGxhbmd1YWdlc1tsXSk7XFxuXFxuICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZXNbbF0gPT09ICdzdHJpbmcnICYmIGxhbmd1YWdlc1tsXS5pbmRleE9mKCctJykgPiAwKSB7XFxuICAgICAgICAvLyBFeHRyYWN0IHRoZSByZWdpb24gaW5mb3JtYXRpb24gaWYgaXQgaXMgaW5jbHVkZWRcXG4gICAgICAgIHZhciBsYW5ndWFnZVBhcnRzID0gbGFuZ3VhZ2VzW2xdLnNwbGl0KCctJyk7XFxuICAgICAgICB2YXIgYmFzZUxhbmd1YWdlID0gbGFuZ3VhZ2VQYXJ0c1swXTtcXG5cXG4gICAgICAgIHJlc29sdmVkTGFuZ3VhZ2VzLnB1c2goYmFzZUxhbmd1YWdlKTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIHJlc29sdmVkTGFuZ3VhZ2VzO1xcbiAgfTtcXG5cXG4gIERlZmF1bHRzLnByb3RvdHlwZS5fcHJvY2Vzc1RyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uIChsYW5ndWFnZXMsIGRlYnVnKSB7XFxuICAgIHZhciB0cmFuc2xhdGlvbnMgPSBuZXcgVHJhbnNsYXRpb24oKTtcXG5cXG4gICAgZm9yICh2YXIgbCA9IDA7IGwgPCBsYW5ndWFnZXMubGVuZ3RoOyBsKyspIHtcXG4gICAgICB2YXIgbGFuZ3VhZ2VEYXRhID0gbmV3IFRyYW5zbGF0aW9uKCk7XFxuXFxuICAgICAgdmFyIGxhbmd1YWdlID0gbGFuZ3VhZ2VzW2xdO1xcblxcbiAgICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2UgPT09ICdzdHJpbmcnKSB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAvLyBUcnkgdG8gbG9hZCBpdCB3aXRoIHRoZSBvcmlnaW5hbCBuYW1lXFxuICAgICAgICAgIGxhbmd1YWdlRGF0YSA9IFRyYW5zbGF0aW9uLmxvYWRQYXRoKGxhbmd1YWdlKTtcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAvLyBJZiB3ZSBjb3VsZG4ndCBsb2FkIGl0LCBjaGVjayBpZiBpdCB3YXNuJ3QgdGhlIGZ1bGwgcGF0aFxcbiAgICAgICAgICAgIGxhbmd1YWdlID0gdGhpcy5kZWZhdWx0cy5hbWRMYW5ndWFnZUJhc2UgKyBsYW5ndWFnZTtcXG4gICAgICAgICAgICBsYW5ndWFnZURhdGEgPSBUcmFuc2xhdGlvbi5sb2FkUGF0aChsYW5ndWFnZSk7XFxuICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XFxuICAgICAgICAgICAgLy8gVGhlIHRyYW5zbGF0aW9uIGNvdWxkIG5vdCBiZSBsb2FkZWQgYXQgYWxsLiBTb21ldGltZXMgdGhpcyBpc1xcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugb2YgYSBjb25maWd1cmF0aW9uIHByb2JsZW0sIG90aGVyIHRpbWVzIHRoaXMgY2FuIGJlXFxuICAgICAgICAgICAgLy8gYmVjYXVzZSBvZiBob3cgU2VsZWN0MiBoZWxwcyBsb2FkIGFsbCBwb3NzaWJsZSB0cmFuc2xhdGlvbiBmaWxlc1xcbiAgICAgICAgICAgIGlmIChkZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcXG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcXG4gICAgICAgICAgICAgICAgJ1NlbGVjdDI6IFRoZSBsYW5ndWFnZSBmaWxlIGZvciBcXFwiJyArIGxhbmd1YWdlICsgJ1xcXCIgY291bGQgJyArXFxuICAgICAgICAgICAgICAgICdub3QgYmUgYXV0b21hdGljYWxseSBsb2FkZWQuIEEgZmFsbGJhY2sgd2lsbCBiZSB1c2VkIGluc3RlYWQuJ1xcbiAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9IGVsc2UgaWYgKCQuaXNQbGFpbk9iamVjdChsYW5ndWFnZSkpIHtcXG4gICAgICAgIGxhbmd1YWdlRGF0YSA9IG5ldyBUcmFuc2xhdGlvbihsYW5ndWFnZSk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIGxhbmd1YWdlRGF0YSA9IGxhbmd1YWdlO1xcbiAgICAgIH1cXG5cXG4gICAgICB0cmFuc2xhdGlvbnMuZXh0ZW5kKGxhbmd1YWdlRGF0YSk7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIHRyYW5zbGF0aW9ucztcXG4gIH07XFxuXFxuICBEZWZhdWx0cy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcXG4gICAgdmFyIGNhbWVsS2V5ID0gJC5jYW1lbENhc2Uoa2V5KTtcXG5cXG4gICAgdmFyIGRhdGEgPSB7fTtcXG4gICAgZGF0YVtjYW1lbEtleV0gPSB2YWx1ZTtcXG5cXG4gICAgdmFyIGNvbnZlcnRlZERhdGEgPSBVdGlscy5fY29udmVydERhdGEoZGF0YSk7XFxuXFxuICAgICQuZXh0ZW5kKHRydWUsIHRoaXMuZGVmYXVsdHMsIGNvbnZlcnRlZERhdGEpO1xcbiAgfTtcXG5cXG4gIHZhciBkZWZhdWx0cyA9IG5ldyBEZWZhdWx0cygpO1xcblxcbiAgcmV0dXJuIGRlZmF1bHRzO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9vcHRpb25zJyxbXFxuICAncmVxdWlyZScsXFxuICAnanF1ZXJ5JyxcXG4gICcuL2RlZmF1bHRzJyxcXG4gICcuL3V0aWxzJ1xcbl0sIGZ1bmN0aW9uIChyZXF1aXJlLCAkLCBEZWZhdWx0cywgVXRpbHMpIHtcXG4gIGZ1bmN0aW9uIE9wdGlvbnMgKG9wdGlvbnMsICRlbGVtZW50KSB7XFxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XFxuXFxuICAgIGlmICgkZWxlbWVudCAhPSBudWxsKSB7XFxuICAgICAgdGhpcy5mcm9tRWxlbWVudCgkZWxlbWVudCk7XFxuICAgIH1cXG5cXG4gICAgaWYgKCRlbGVtZW50ICE9IG51bGwpIHtcXG4gICAgICB0aGlzLm9wdGlvbnMgPSBEZWZhdWx0cy5hcHBseUZyb21FbGVtZW50KHRoaXMub3B0aW9ucywgJGVsZW1lbnQpO1xcbiAgICB9XFxuXFxuICAgIHRoaXMub3B0aW9ucyA9IERlZmF1bHRzLmFwcGx5KHRoaXMub3B0aW9ucyk7XFxuXFxuICAgIGlmICgkZWxlbWVudCAmJiAkZWxlbWVudC5pcygnaW5wdXQnKSkge1xcbiAgICAgIHZhciBJbnB1dENvbXBhdCA9IHJlcXVpcmUodGhpcy5nZXQoJ2FtZEJhc2UnKSArICdjb21wYXQvaW5wdXREYXRhJyk7XFxuXFxuICAgICAgdGhpcy5vcHRpb25zLmRhdGFBZGFwdGVyID0gVXRpbHMuRGVjb3JhdGUoXFxuICAgICAgICB0aGlzLm9wdGlvbnMuZGF0YUFkYXB0ZXIsXFxuICAgICAgICBJbnB1dENvbXBhdFxcbiAgICAgICk7XFxuICAgIH1cXG4gIH1cXG5cXG4gIE9wdGlvbnMucHJvdG90eXBlLmZyb21FbGVtZW50ID0gZnVuY3Rpb24gKCRlKSB7XFxuICAgIHZhciBleGNsdWRlZERhdGEgPSBbJ3NlbGVjdDInXTtcXG5cXG4gICAgaWYgKHRoaXMub3B0aW9ucy5tdWx0aXBsZSA9PSBudWxsKSB7XFxuICAgICAgdGhpcy5vcHRpb25zLm11bHRpcGxlID0gJGUucHJvcCgnbXVsdGlwbGUnKTtcXG4gICAgfVxcblxcbiAgICBpZiAodGhpcy5vcHRpb25zLmRpc2FibGVkID09IG51bGwpIHtcXG4gICAgICB0aGlzLm9wdGlvbnMuZGlzYWJsZWQgPSAkZS5wcm9wKCdkaXNhYmxlZCcpO1xcbiAgICB9XFxuXFxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGlyID09IG51bGwpIHtcXG4gICAgICBpZiAoJGUucHJvcCgnZGlyJykpIHtcXG4gICAgICAgIHRoaXMub3B0aW9ucy5kaXIgPSAkZS5wcm9wKCdkaXInKTtcXG4gICAgICB9IGVsc2UgaWYgKCRlLmNsb3Nlc3QoJ1tkaXJdJykucHJvcCgnZGlyJykpIHtcXG4gICAgICAgIHRoaXMub3B0aW9ucy5kaXIgPSAkZS5jbG9zZXN0KCdbZGlyXScpLnByb3AoJ2RpcicpO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICB0aGlzLm9wdGlvbnMuZGlyID0gJ2x0cic7XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgICRlLnByb3AoJ2Rpc2FibGVkJywgdGhpcy5vcHRpb25zLmRpc2FibGVkKTtcXG4gICAgJGUucHJvcCgnbXVsdGlwbGUnLCB0aGlzLm9wdGlvbnMubXVsdGlwbGUpO1xcblxcbiAgICBpZiAoVXRpbHMuR2V0RGF0YSgkZVswXSwgJ3NlbGVjdDJUYWdzJykpIHtcXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xcbiAgICAgICAgY29uc29sZS53YXJuKFxcbiAgICAgICAgICAnU2VsZWN0MjogVGhlIGBkYXRhLXNlbGVjdDItdGFnc2AgYXR0cmlidXRlIGhhcyBiZWVuIGNoYW5nZWQgdG8gJyArXFxuICAgICAgICAgICd1c2UgdGhlIGBkYXRhLWRhdGFgIGFuZCBgZGF0YS10YWdzPVxcXCJ0cnVlXFxcImAgYXR0cmlidXRlcyBhbmQgd2lsbCBiZSAnICtcXG4gICAgICAgICAgJ3JlbW92ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFNlbGVjdDIuJ1xcbiAgICAgICAgKTtcXG4gICAgICB9XFxuXFxuICAgICAgVXRpbHMuU3RvcmVEYXRhKCRlWzBdLCAnZGF0YScsIFV0aWxzLkdldERhdGEoJGVbMF0sICdzZWxlY3QyVGFncycpKTtcXG4gICAgICBVdGlscy5TdG9yZURhdGEoJGVbMF0sICd0YWdzJywgdHJ1ZSk7XFxuICAgIH1cXG5cXG4gICAgaWYgKFV0aWxzLkdldERhdGEoJGVbMF0sICdhamF4VXJsJykpIHtcXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xcbiAgICAgICAgY29uc29sZS53YXJuKFxcbiAgICAgICAgICAnU2VsZWN0MjogVGhlIGBkYXRhLWFqYXgtdXJsYCBhdHRyaWJ1dGUgaGFzIGJlZW4gY2hhbmdlZCB0byAnICtcXG4gICAgICAgICAgJ2BkYXRhLWFqYXgtLXVybGAgYW5kIHN1cHBvcnQgZm9yIHRoZSBvbGQgYXR0cmlidXRlIHdpbGwgYmUgcmVtb3ZlZCcgK1xcbiAgICAgICAgICAnIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBTZWxlY3QyLidcXG4gICAgICAgICk7XFxuICAgICAgfVxcblxcbiAgICAgICRlLmF0dHIoJ2FqYXgtLXVybCcsIFV0aWxzLkdldERhdGEoJGVbMF0sICdhamF4VXJsJykpO1xcbiAgICAgIFV0aWxzLlN0b3JlRGF0YSgkZVswXSwgJ2FqYXgtVXJsJywgVXRpbHMuR2V0RGF0YSgkZVswXSwgJ2FqYXhVcmwnKSk7XFxuICAgIH1cXG5cXG4gICAgdmFyIGRhdGFzZXQgPSB7fTtcXG5cXG4gICAgZnVuY3Rpb24gdXBwZXJDYXNlTGV0dGVyKF8sIGxldHRlcikge1xcbiAgICAgIHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcXG4gICAgfVxcblxcbiAgICAvLyBQcmUtbG9hZCBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgd2hpY2ggYXJlIHByZWZpeGVkIHdpdGggYGRhdGEtYFxcbiAgICBmb3IgKHZhciBhdHRyID0gMDsgYXR0ciA8ICRlWzBdLmF0dHJpYnV0ZXMubGVuZ3RoOyBhdHRyKyspIHtcXG4gICAgICB2YXIgYXR0cmlidXRlTmFtZSA9ICRlWzBdLmF0dHJpYnV0ZXNbYXR0cl0ubmFtZTtcXG4gICAgICB2YXIgcHJlZml4ID0gJ2RhdGEtJztcXG5cXG4gICAgICBpZiAoYXR0cmlidXRlTmFtZS5zdWJzdHIoMCwgcHJlZml4Lmxlbmd0aCkgPT0gcHJlZml4KSB7XFxuICAgICAgICAvLyBHZXQgdGhlIGNvbnRlbnRzIG9mIHRoZSBhdHRyaWJ1dGUgYWZ0ZXIgYGRhdGEtYFxcbiAgICAgICAgdmFyIGRhdGFOYW1lID0gYXR0cmlidXRlTmFtZS5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCk7XFxuXFxuICAgICAgICAvLyBHZXQgdGhlIGRhdGEgY29udGVudHMgZnJvbSB0aGUgY29uc2lzdGVudCBzb3VyY2VcXG4gICAgICAgIC8vIFRoaXMgaXMgbW9yZSB0aGFuIGxpa2VseSB0aGUgalF1ZXJ5IGRhdGEgaGVscGVyXFxuICAgICAgICB2YXIgZGF0YVZhbHVlID0gVXRpbHMuR2V0RGF0YSgkZVswXSwgZGF0YU5hbWUpO1xcblxcbiAgICAgICAgLy8gY2FtZWxDYXNlIHRoZSBhdHRyaWJ1dGUgbmFtZSB0byBtYXRjaCB0aGUgc3BlY1xcbiAgICAgICAgdmFyIGNhbWVsRGF0YU5hbWUgPSBkYXRhTmFtZS5yZXBsYWNlKC8tKFthLXpdKS9nLCB1cHBlckNhc2VMZXR0ZXIpO1xcblxcbiAgICAgICAgLy8gU3RvcmUgdGhlIGRhdGEgYXR0cmlidXRlIGNvbnRlbnRzIGludG8gdGhlIGRhdGFzZXQgc2luY2VcXG4gICAgICAgIGRhdGFzZXRbY2FtZWxEYXRhTmFtZV0gPSBkYXRhVmFsdWU7XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgIC8vIFByZWZlciB0aGUgZWxlbWVudCdzIGBkYXRhc2V0YCBhdHRyaWJ1dGUgaWYgaXQgZXhpc3RzXFxuICAgIC8vIGpRdWVyeSAxLnggZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSBkYXRhIGF0dHJpYnV0ZXMgd2l0aCBtdWx0aXBsZSBkYXNoZXNcXG4gICAgaWYgKCQuZm4uanF1ZXJ5ICYmICQuZm4uanF1ZXJ5LnN1YnN0cigwLCAyKSA9PSAnMS4nICYmICRlWzBdLmRhdGFzZXQpIHtcXG4gICAgICBkYXRhc2V0ID0gJC5leHRlbmQodHJ1ZSwge30sICRlWzBdLmRhdGFzZXQsIGRhdGFzZXQpO1xcbiAgICB9XFxuXFxuICAgIC8vIFByZWZlciBvdXIgaW50ZXJuYWwgZGF0YSBjYWNoZSBpZiBpdCBleGlzdHNcXG4gICAgdmFyIGRhdGEgPSAkLmV4dGVuZCh0cnVlLCB7fSwgVXRpbHMuR2V0RGF0YSgkZVswXSksIGRhdGFzZXQpO1xcblxcbiAgICBkYXRhID0gVXRpbHMuX2NvbnZlcnREYXRhKGRhdGEpO1xcblxcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xcbiAgICAgIGlmICgkLmluQXJyYXkoa2V5LCBleGNsdWRlZERhdGEpID4gLTEpIHtcXG4gICAgICAgIGNvbnRpbnVlO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KHRoaXMub3B0aW9uc1trZXldKSkge1xcbiAgICAgICAgJC5leHRlbmQodGhpcy5vcHRpb25zW2tleV0sIGRhdGFba2V5XSk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gZGF0YVtrZXldO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICByZXR1cm4gdGhpcztcXG4gIH07XFxuXFxuICBPcHRpb25zLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XFxuICAgIHJldHVybiB0aGlzLm9wdGlvbnNba2V5XTtcXG4gIH07XFxuXFxuICBPcHRpb25zLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWwpIHtcXG4gICAgdGhpcy5vcHRpb25zW2tleV0gPSB2YWw7XFxuICB9O1xcblxcbiAgcmV0dXJuIE9wdGlvbnM7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2NvcmUnLFtcXG4gICdqcXVlcnknLFxcbiAgJy4vb3B0aW9ucycsXFxuICAnLi91dGlscycsXFxuICAnLi9rZXlzJ1xcbl0sIGZ1bmN0aW9uICgkLCBPcHRpb25zLCBVdGlscywgS0VZUykge1xcbiAgdmFyIFNlbGVjdDIgPSBmdW5jdGlvbiAoJGVsZW1lbnQsIG9wdGlvbnMpIHtcXG4gICAgaWYgKFV0aWxzLkdldERhdGEoJGVsZW1lbnRbMF0sICdzZWxlY3QyJykgIT0gbnVsbCkge1xcbiAgICAgIFV0aWxzLkdldERhdGEoJGVsZW1lbnRbMF0sICdzZWxlY3QyJykuZGVzdHJveSgpO1xcbiAgICB9XFxuXFxuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcXG5cXG4gICAgdGhpcy5pZCA9IHRoaXMuX2dlbmVyYXRlSWQoJGVsZW1lbnQpO1xcblxcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcXG5cXG4gICAgdGhpcy5vcHRpb25zID0gbmV3IE9wdGlvbnMob3B0aW9ucywgJGVsZW1lbnQpO1xcblxcbiAgICBTZWxlY3QyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xcblxcbiAgICAvLyBTZXQgdXAgdGhlIHRhYmluZGV4XFxuXFxuICAgIHZhciB0YWJpbmRleCA9ICRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykgfHwgMDtcXG4gICAgVXRpbHMuU3RvcmVEYXRhKCRlbGVtZW50WzBdLCAnb2xkLXRhYmluZGV4JywgdGFiaW5kZXgpO1xcbiAgICAkZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsICctMScpO1xcblxcbiAgICAvLyBTZXQgdXAgY29udGFpbmVycyBhbmQgYWRhcHRlcnNcXG5cXG4gICAgdmFyIERhdGFBZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgnZGF0YUFkYXB0ZXInKTtcXG4gICAgdGhpcy5kYXRhQWRhcHRlciA9IG5ldyBEYXRhQWRhcHRlcigkZWxlbWVudCwgdGhpcy5vcHRpb25zKTtcXG5cXG4gICAgdmFyICRjb250YWluZXIgPSB0aGlzLnJlbmRlcigpO1xcblxcbiAgICB0aGlzLl9wbGFjZUNvbnRhaW5lcigkY29udGFpbmVyKTtcXG5cXG4gICAgdmFyIFNlbGVjdGlvbkFkYXB0ZXIgPSB0aGlzLm9wdGlvbnMuZ2V0KCdzZWxlY3Rpb25BZGFwdGVyJyk7XFxuICAgIHRoaXMuc2VsZWN0aW9uID0gbmV3IFNlbGVjdGlvbkFkYXB0ZXIoJGVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XFxuICAgIHRoaXMuJHNlbGVjdGlvbiA9IHRoaXMuc2VsZWN0aW9uLnJlbmRlcigpO1xcblxcbiAgICB0aGlzLnNlbGVjdGlvbi5wb3NpdGlvbih0aGlzLiRzZWxlY3Rpb24sICRjb250YWluZXIpO1xcblxcbiAgICB2YXIgRHJvcGRvd25BZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgnZHJvcGRvd25BZGFwdGVyJyk7XFxuICAgIHRoaXMuZHJvcGRvd24gPSBuZXcgRHJvcGRvd25BZGFwdGVyKCRlbGVtZW50LCB0aGlzLm9wdGlvbnMpO1xcbiAgICB0aGlzLiRkcm9wZG93biA9IHRoaXMuZHJvcGRvd24ucmVuZGVyKCk7XFxuXFxuICAgIHRoaXMuZHJvcGRvd24ucG9zaXRpb24odGhpcy4kZHJvcGRvd24sICRjb250YWluZXIpO1xcblxcbiAgICB2YXIgUmVzdWx0c0FkYXB0ZXIgPSB0aGlzLm9wdGlvbnMuZ2V0KCdyZXN1bHRzQWRhcHRlcicpO1xcbiAgICB0aGlzLnJlc3VsdHMgPSBuZXcgUmVzdWx0c0FkYXB0ZXIoJGVsZW1lbnQsIHRoaXMub3B0aW9ucywgdGhpcy5kYXRhQWRhcHRlcik7XFxuICAgIHRoaXMuJHJlc3VsdHMgPSB0aGlzLnJlc3VsdHMucmVuZGVyKCk7XFxuXFxuICAgIHRoaXMucmVzdWx0cy5wb3NpdGlvbih0aGlzLiRyZXN1bHRzLCB0aGlzLiRkcm9wZG93bik7XFxuXFxuICAgIC8vIEJpbmQgZXZlbnRzXFxuXFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgLy8gQmluZCB0aGUgY29udGFpbmVyIHRvIGFsbCBvZiB0aGUgYWRhcHRlcnNcXG4gICAgdGhpcy5fYmluZEFkYXB0ZXJzKCk7XFxuXFxuICAgIC8vIFJlZ2lzdGVyIGFueSBET00gZXZlbnQgaGFuZGxlcnNcXG4gICAgdGhpcy5fcmVnaXN0ZXJEb21FdmVudHMoKTtcXG5cXG4gICAgLy8gUmVnaXN0ZXIgYW55IGludGVybmFsIGV2ZW50IGhhbmRsZXJzXFxuICAgIHRoaXMuX3JlZ2lzdGVyRGF0YUV2ZW50cygpO1xcbiAgICB0aGlzLl9yZWdpc3RlclNlbGVjdGlvbkV2ZW50cygpO1xcbiAgICB0aGlzLl9yZWdpc3RlckRyb3Bkb3duRXZlbnRzKCk7XFxuICAgIHRoaXMuX3JlZ2lzdGVyUmVzdWx0c0V2ZW50cygpO1xcbiAgICB0aGlzLl9yZWdpc3RlckV2ZW50cygpO1xcblxcbiAgICAvLyBTZXQgdGhlIGluaXRpYWwgc3RhdGVcXG4gICAgdGhpcy5kYXRhQWRhcHRlci5jdXJyZW50KGZ1bmN0aW9uIChpbml0aWFsRGF0YSkge1xcbiAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0aW9uOnVwZGF0ZScsIHtcXG4gICAgICAgIGRhdGE6IGluaXRpYWxEYXRhXFxuICAgICAgfSk7XFxuICAgIH0pO1xcblxcbiAgICAvLyBIaWRlIHRoZSBvcmlnaW5hbCBzZWxlY3RcXG4gICAgJGVsZW1lbnQuYWRkQ2xhc3MoJ3NlbGVjdDItaGlkZGVuLWFjY2Vzc2libGUnKTtcXG4gICAgJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xcblxcbiAgICAvLyBTeW5jaHJvbml6ZSBhbnkgbW9uaXRvcmVkIGF0dHJpYnV0ZXNcXG4gICAgdGhpcy5fc3luY0F0dHJpYnV0ZXMoKTtcXG5cXG4gICAgVXRpbHMuU3RvcmVEYXRhKCRlbGVtZW50WzBdLCAnc2VsZWN0MicsIHRoaXMpO1xcblxcbiAgICAvLyBFbnN1cmUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCAkZWxlbWVudC5kYXRhKCdzZWxlY3QyJykuXFxuICAgICRlbGVtZW50LmRhdGEoJ3NlbGVjdDInLCB0aGlzKTtcXG4gIH07XFxuXFxuICBVdGlscy5FeHRlbmQoU2VsZWN0MiwgVXRpbHMuT2JzZXJ2YWJsZSk7XFxuXFxuICBTZWxlY3QyLnByb3RvdHlwZS5fZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uICgkZWxlbWVudCkge1xcbiAgICB2YXIgaWQgPSAnJztcXG5cXG4gICAgaWYgKCRlbGVtZW50LmF0dHIoJ2lkJykgIT0gbnVsbCkge1xcbiAgICAgIGlkID0gJGVsZW1lbnQuYXR0cignaWQnKTtcXG4gICAgfSBlbHNlIGlmICgkZWxlbWVudC5hdHRyKCduYW1lJykgIT0gbnVsbCkge1xcbiAgICAgIGlkID0gJGVsZW1lbnQuYXR0cignbmFtZScpICsgJy0nICsgVXRpbHMuZ2VuZXJhdGVDaGFycygyKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICBpZCA9IFV0aWxzLmdlbmVyYXRlQ2hhcnMoNCk7XFxuICAgIH1cXG5cXG4gICAgaWQgPSBpZC5yZXBsYWNlKC8oOnxcXFxcLnxcXFxcW3xcXFxcXXwsKS9nLCAnJyk7XFxuICAgIGlkID0gJ3NlbGVjdDItJyArIGlkO1xcblxcbiAgICByZXR1cm4gaWQ7XFxuICB9O1xcblxcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3BsYWNlQ29udGFpbmVyID0gZnVuY3Rpb24gKCRjb250YWluZXIpIHtcXG4gICAgJGNvbnRhaW5lci5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KTtcXG5cXG4gICAgdmFyIHdpZHRoID0gdGhpcy5fcmVzb2x2ZVdpZHRoKHRoaXMuJGVsZW1lbnQsIHRoaXMub3B0aW9ucy5nZXQoJ3dpZHRoJykpO1xcblxcbiAgICBpZiAod2lkdGggIT0gbnVsbCkge1xcbiAgICAgICRjb250YWluZXIuY3NzKCd3aWR0aCcsIHdpZHRoKTtcXG4gICAgfVxcbiAgfTtcXG5cXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZXNvbHZlV2lkdGggPSBmdW5jdGlvbiAoJGVsZW1lbnQsIG1ldGhvZCkge1xcbiAgICB2YXIgV0lEVEggPSAvXndpZHRoOigoWy0rXT8oWzAtOV0qXFxcXC4pP1swLTldKykocHh8ZW18ZXh8JXxpbnxjbXxtbXxwdHxwYykpL2k7XFxuXFxuICAgIGlmIChtZXRob2QgPT0gJ3Jlc29sdmUnKSB7XFxuICAgICAgdmFyIHN0eWxlV2lkdGggPSB0aGlzLl9yZXNvbHZlV2lkdGgoJGVsZW1lbnQsICdzdHlsZScpO1xcblxcbiAgICAgIGlmIChzdHlsZVdpZHRoICE9IG51bGwpIHtcXG4gICAgICAgIHJldHVybiBzdHlsZVdpZHRoO1xcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZVdpZHRoKCRlbGVtZW50LCAnZWxlbWVudCcpO1xcbiAgICB9XFxuXFxuICAgIGlmIChtZXRob2QgPT0gJ2VsZW1lbnQnKSB7XFxuICAgICAgdmFyIGVsZW1lbnRXaWR0aCA9ICRlbGVtZW50Lm91dGVyV2lkdGgoZmFsc2UpO1xcblxcbiAgICAgIGlmIChlbGVtZW50V2lkdGggPD0gMCkge1xcbiAgICAgICAgcmV0dXJuICdhdXRvJztcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIGVsZW1lbnRXaWR0aCArICdweCc7XFxuICAgIH1cXG5cXG4gICAgaWYgKG1ldGhvZCA9PSAnc3R5bGUnKSB7XFxuICAgICAgdmFyIHN0eWxlID0gJGVsZW1lbnQuYXR0cignc3R5bGUnKTtcXG5cXG4gICAgICBpZiAodHlwZW9mKHN0eWxlKSAhPT0gJ3N0cmluZycpIHtcXG4gICAgICAgIHJldHVybiBudWxsO1xcbiAgICAgIH1cXG5cXG4gICAgICB2YXIgYXR0cnMgPSBzdHlsZS5zcGxpdCgnOycpO1xcblxcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSA9IGkgKyAxKSB7XFxuICAgICAgICB2YXIgYXR0ciA9IGF0dHJzW2ldLnJlcGxhY2UoL1xcXFxzL2csICcnKTtcXG4gICAgICAgIHZhciBtYXRjaGVzID0gYXR0ci5tYXRjaChXSURUSCk7XFxuXFxuICAgICAgICBpZiAobWF0Y2hlcyAhPT0gbnVsbCAmJiBtYXRjaGVzLmxlbmd0aCA+PSAxKSB7XFxuICAgICAgICAgIHJldHVybiBtYXRjaGVzWzFdO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG5cXG4gICAgICByZXR1cm4gbnVsbDtcXG4gICAgfVxcblxcbiAgICBpZiAobWV0aG9kID09ICdjb21wdXRlZHN0eWxlJykge1xcbiAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoJGVsZW1lbnRbMF0pO1xcblxcbiAgICAgIHJldHVybiBjb21wdXRlZFN0eWxlLndpZHRoO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiBtZXRob2Q7XFxuICB9O1xcblxcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX2JpbmRBZGFwdGVycyA9IGZ1bmN0aW9uICgpIHtcXG4gICAgdGhpcy5kYXRhQWRhcHRlci5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XFxuICAgIHRoaXMuc2VsZWN0aW9uLmJpbmQodGhpcywgdGhpcy4kY29udGFpbmVyKTtcXG5cXG4gICAgdGhpcy5kcm9wZG93bi5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XFxuICAgIHRoaXMucmVzdWx0cy5iaW5kKHRoaXMsIHRoaXMuJGNvbnRhaW5lcik7XFxuICB9O1xcblxcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX3JlZ2lzdGVyRG9tRXZlbnRzID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgIHRoaXMuJGVsZW1lbnQub24oJ2NoYW5nZS5zZWxlY3QyJywgZnVuY3Rpb24gKCkge1xcbiAgICAgIHNlbGYuZGF0YUFkYXB0ZXIuY3VycmVudChmdW5jdGlvbiAoZGF0YSkge1xcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdzZWxlY3Rpb246dXBkYXRlJywge1xcbiAgICAgICAgICBkYXRhOiBkYXRhXFxuICAgICAgICB9KTtcXG4gICAgICB9KTtcXG4gICAgfSk7XFxuXFxuICAgIHRoaXMuJGVsZW1lbnQub24oJ2ZvY3VzLnNlbGVjdDInLCBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgc2VsZi50cmlnZ2VyKCdmb2N1cycsIGV2dCk7XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLl9zeW5jQSA9IFV0aWxzLmJpbmQodGhpcy5fc3luY0F0dHJpYnV0ZXMsIHRoaXMpO1xcbiAgICB0aGlzLl9zeW5jUyA9IFV0aWxzLmJpbmQodGhpcy5fc3luY1N1YnRyZWUsIHRoaXMpO1xcblxcbiAgICBpZiAodGhpcy4kZWxlbWVudFswXS5hdHRhY2hFdmVudCkge1xcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF0uYXR0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCB0aGlzLl9zeW5jQSk7XFxuICAgIH1cXG5cXG4gICAgdmFyIG9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHxcXG4gICAgICB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlciB8fFxcbiAgICAgIHdpbmRvdy5Nb3pNdXRhdGlvbk9ic2VydmVyXFxuICAgIDtcXG5cXG4gICAgaWYgKG9ic2VydmVyICE9IG51bGwpIHtcXG4gICAgICB0aGlzLl9vYnNlcnZlciA9IG5ldyBvYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XFxuICAgICAgICBzZWxmLl9zeW5jQSgpO1xcbiAgICAgICAgc2VsZi5fc3luY1MobnVsbCwgbXV0YXRpb25zKTtcXG4gICAgICB9KTtcXG4gICAgICB0aGlzLl9vYnNlcnZlci5vYnNlcnZlKHRoaXMuJGVsZW1lbnRbMF0sIHtcXG4gICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXFxuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXFxuICAgICAgICBzdWJ0cmVlOiBmYWxzZVxcbiAgICAgIH0pO1xcbiAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcikge1xcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcihcXG4gICAgICAgICdET01BdHRyTW9kaWZpZWQnLFxcbiAgICAgICAgc2VsZi5fc3luY0EsXFxuICAgICAgICBmYWxzZVxcbiAgICAgICk7XFxuICAgICAgdGhpcy4kZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKFxcbiAgICAgICAgJ0RPTU5vZGVJbnNlcnRlZCcsXFxuICAgICAgICBzZWxmLl9zeW5jUyxcXG4gICAgICAgIGZhbHNlXFxuICAgICAgKTtcXG4gICAgICB0aGlzLiRlbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXIoXFxuICAgICAgICAnRE9NTm9kZVJlbW92ZWQnLFxcbiAgICAgICAgc2VsZi5fc3luY1MsXFxuICAgICAgICBmYWxzZVxcbiAgICAgICk7XFxuICAgIH1cXG4gIH07XFxuXFxuICBTZWxlY3QyLnByb3RvdHlwZS5fcmVnaXN0ZXJEYXRhRXZlbnRzID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgIHRoaXMuZGF0YUFkYXB0ZXIub24oJyonLCBmdW5jdGlvbiAobmFtZSwgcGFyYW1zKSB7XFxuICAgICAgc2VsZi50cmlnZ2VyKG5hbWUsIHBhcmFtcyk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlclNlbGVjdGlvbkV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcbiAgICB2YXIgbm9uUmVsYXlFdmVudHMgPSBbJ3RvZ2dsZScsICdmb2N1cyddO1xcblxcbiAgICB0aGlzLnNlbGVjdGlvbi5vbigndG9nZ2xlJywgZnVuY3Rpb24gKCkge1xcbiAgICAgIHNlbGYudG9nZ2xlRHJvcGRvd24oKTtcXG4gICAgfSk7XFxuXFxuICAgIHRoaXMuc2VsZWN0aW9uLm9uKCdmb2N1cycsIGZ1bmN0aW9uIChwYXJhbXMpIHtcXG4gICAgICBzZWxmLmZvY3VzKHBhcmFtcyk7XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLnNlbGVjdGlvbi5vbignKicsIGZ1bmN0aW9uIChuYW1lLCBwYXJhbXMpIHtcXG4gICAgICBpZiAoJC5pbkFycmF5KG5hbWUsIG5vblJlbGF5RXZlbnRzKSAhPT0gLTEpIHtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuXFxuICAgICAgc2VsZi50cmlnZ2VyKG5hbWUsIHBhcmFtcyk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlckRyb3Bkb3duRXZlbnRzID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgIHRoaXMuZHJvcGRvd24ub24oJyonLCBmdW5jdGlvbiAobmFtZSwgcGFyYW1zKSB7XFxuICAgICAgc2VsZi50cmlnZ2VyKG5hbWUsIHBhcmFtcyk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIFNlbGVjdDIucHJvdG90eXBlLl9yZWdpc3RlclJlc3VsdHNFdmVudHMgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgdGhpcy5yZXN1bHRzLm9uKCcqJywgZnVuY3Rpb24gKG5hbWUsIHBhcmFtcykge1xcbiAgICAgIHNlbGYudHJpZ2dlcihuYW1lLCBwYXJhbXMpO1xcbiAgICB9KTtcXG4gIH07XFxuXFxuICBTZWxlY3QyLnByb3RvdHlwZS5fcmVnaXN0ZXJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgdGhpcy5vbignb3BlbicsIGZ1bmN0aW9uICgpIHtcXG4gICAgICBzZWxmLiRjb250YWluZXIuYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcXG4gICAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLm9uKCdlbmFibGUnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgc2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZGlzYWJsZWQnKTtcXG4gICAgfSk7XFxuXFxuICAgIHRoaXMub24oJ2Rpc2FibGUnLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgc2VsZi4kY29udGFpbmVyLmFkZENsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZGlzYWJsZWQnKTtcXG4gICAgfSk7XFxuXFxuICAgIHRoaXMub24oJ2JsdXInLCBmdW5jdGlvbiAoKSB7XFxuICAgICAgc2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZm9jdXMnKTtcXG4gICAgfSk7XFxuXFxuICAgIHRoaXMub24oJ3F1ZXJ5JywgZnVuY3Rpb24gKHBhcmFtcykge1xcbiAgICAgIGlmICghc2VsZi5pc09wZW4oKSkge1xcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdvcGVuJywge30pO1xcbiAgICAgIH1cXG5cXG4gICAgICB0aGlzLmRhdGFBZGFwdGVyLnF1ZXJ5KHBhcmFtcywgZnVuY3Rpb24gKGRhdGEpIHtcXG4gICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czphbGwnLCB7XFxuICAgICAgICAgIGRhdGE6IGRhdGEsXFxuICAgICAgICAgIHF1ZXJ5OiBwYXJhbXNcXG4gICAgICAgIH0pO1xcbiAgICAgIH0pO1xcbiAgICB9KTtcXG5cXG4gICAgdGhpcy5vbigncXVlcnk6YXBwZW5kJywgZnVuY3Rpb24gKHBhcmFtcykge1xcbiAgICAgIHRoaXMuZGF0YUFkYXB0ZXIucXVlcnkocGFyYW1zLCBmdW5jdGlvbiAoZGF0YSkge1xcbiAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOmFwcGVuZCcsIHtcXG4gICAgICAgICAgZGF0YTogZGF0YSxcXG4gICAgICAgICAgcXVlcnk6IHBhcmFtc1xcbiAgICAgICAgfSk7XFxuICAgICAgfSk7XFxuICAgIH0pO1xcblxcbiAgICB0aGlzLm9uKCdrZXlwcmVzcycsIGZ1bmN0aW9uIChldnQpIHtcXG4gICAgICB2YXIga2V5ID0gZXZ0LndoaWNoO1xcblxcbiAgICAgIGlmIChzZWxmLmlzT3BlbigpKSB7XFxuICAgICAgICBpZiAoa2V5ID09PSBLRVlTLkVTQyB8fCBrZXkgPT09IEtFWVMuVEFCIHx8XFxuICAgICAgICAgICAgKGtleSA9PT0gS0VZUy5VUCAmJiBldnQuYWx0S2V5KSkge1xcbiAgICAgICAgICBzZWxmLmNsb3NlKGV2dCk7XFxuXFxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IEtFWVMuRU5URVIpIHtcXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOnNlbGVjdCcsIHt9KTtcXG5cXG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XFxuICAgICAgICB9IGVsc2UgaWYgKChrZXkgPT09IEtFWVMuU1BBQ0UgJiYgZXZ0LmN0cmxLZXkpKSB7XFxuICAgICAgICAgIHNlbGYudHJpZ2dlcigncmVzdWx0czp0b2dnbGUnLCB7fSk7XFxuXFxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IEtFWVMuVVApIHtcXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOnByZXZpb3VzJywge30pO1xcblxcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBLRVlTLkRPV04pIHtcXG4gICAgICAgICAgc2VsZi50cmlnZ2VyKCdyZXN1bHRzOm5leHQnLCB7fSk7XFxuXFxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xcbiAgICAgICAgfVxcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBpZiAoa2V5ID09PSBLRVlTLkVOVEVSIHx8IGtleSA9PT0gS0VZUy5TUEFDRSB8fFxcbiAgICAgICAgICAgIChrZXkgPT09IEtFWVMuRE9XTiAmJiBldnQuYWx0S2V5KSkge1xcbiAgICAgICAgICBzZWxmLm9wZW4oKTtcXG5cXG4gICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9KTtcXG4gIH07XFxuXFxuICBTZWxlY3QyLnByb3RvdHlwZS5fc3luY0F0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHRoaXMub3B0aW9ucy5zZXQoJ2Rpc2FibGVkJywgdGhpcy4kZWxlbWVudC5wcm9wKCdkaXNhYmxlZCcpKTtcXG5cXG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZCgpKSB7XFxuICAgICAgaWYgKHRoaXMuaXNPcGVuKCkpIHtcXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcXG4gICAgICB9XFxuXFxuICAgICAgdGhpcy50cmlnZ2VyKCdkaXNhYmxlJywge30pO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIHRoaXMudHJpZ2dlcignZW5hYmxlJywge30pO1xcbiAgICB9XFxuICB9O1xcblxcbiAgU2VsZWN0Mi5wcm90b3R5cGUuX2lzQ2hhbmdlTXV0YXRpb24gPSBmdW5jdGlvbiAoZXZ0LCBtdXRhdGlvbnMpIHtcXG4gICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcblxcbiAgICAvLyBJZ25vcmUgYW55IG11dGF0aW9uIGV2ZW50cyByYWlzZWQgZm9yIGVsZW1lbnRzIHRoYXQgYXJlbid0IG9wdGlvbnMgb3JcXG4gICAgLy8gb3B0Z3JvdXBzLiBUaGlzIGhhbmRsZXMgdGhlIGNhc2Ugd2hlbiB0aGUgc2VsZWN0IGVsZW1lbnQgaXMgZGVzdHJveWVkXFxuICAgIGlmIChcXG4gICAgICBldnQgJiYgZXZ0LnRhcmdldCAmJiAoXFxuICAgICAgICBldnQudGFyZ2V0Lm5vZGVOYW1lICE9PSAnT1BUSU9OJyAmJiBldnQudGFyZ2V0Lm5vZGVOYW1lICE9PSAnT1BUR1JPVVAnXFxuICAgICAgKVxcbiAgICApIHtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgaWYgKCFtdXRhdGlvbnMpIHtcXG4gICAgICAvLyBJZiBtdXRhdGlvbiBldmVudHMgYXJlbid0IHN1cHBvcnRlZCwgdGhlbiB3ZSBjYW4gb25seSBhc3N1bWUgdGhhdCB0aGVcXG4gICAgICAvLyBjaGFuZ2UgYWZmZWN0ZWQgdGhlIHNlbGVjdGlvbnNcXG4gICAgICBjaGFuZ2VkID0gdHJ1ZTtcXG4gICAgfSBlbHNlIGlmIChtdXRhdGlvbnMuYWRkZWROb2RlcyAmJiBtdXRhdGlvbnMuYWRkZWROb2Rlcy5sZW5ndGggPiAwKSB7XFxuICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtdXRhdGlvbnMuYWRkZWROb2Rlcy5sZW5ndGg7IG4rKykge1xcbiAgICAgICAgdmFyIG5vZGUgPSBtdXRhdGlvbnMuYWRkZWROb2Rlc1tuXTtcXG5cXG4gICAgICAgIGlmIChub2RlLnNlbGVjdGVkKSB7XFxuICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfSBlbHNlIGlmIChtdXRhdGlvbnMucmVtb3ZlZE5vZGVzICYmIG11dGF0aW9ucy5yZW1vdmVkTm9kZXMubGVuZ3RoID4gMCkge1xcbiAgICAgIGNoYW5nZWQgPSB0cnVlO1xcbiAgICB9IGVsc2UgaWYgKCQuaXNBcnJheShtdXRhdGlvbnMpKSB7XFxuICAgICAgJC5lYWNoKG11dGF0aW9ucywgZnVuY3Rpb24oZXZ0LCBtdXRhdGlvbikge1xcbiAgICAgICAgaWYgKHNlbGYuX2lzQ2hhbmdlTXV0YXRpb24oZXZ0LCBtdXRhdGlvbikpIHtcXG4gICAgICAgICAgLy8gV2UndmUgZm91bmQgYSBjaGFuZ2UgbXV0YXRpb24uXFxuICAgICAgICAgIC8vIExldCdzIGVzY2FwZSBmcm9tIHRoZSBsb29wIGFuZCBjb250aW51ZVxcbiAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9XFxuICAgIHJldHVybiBjaGFuZ2VkO1xcbiAgfTtcXG5cXG4gIFNlbGVjdDIucHJvdG90eXBlLl9zeW5jU3VidHJlZSA9IGZ1bmN0aW9uIChldnQsIG11dGF0aW9ucykge1xcbiAgICB2YXIgY2hhbmdlZCA9IHRoaXMuX2lzQ2hhbmdlTXV0YXRpb24oZXZ0LCBtdXRhdGlvbnMpO1xcbiAgICB2YXIgc2VsZiA9IHRoaXM7XFxuXFxuICAgIC8vIE9ubHkgcmUtcHVsbCB0aGUgZGF0YSBpZiB3ZSB0aGluayB0aGVyZSBpcyBhIGNoYW5nZVxcbiAgICBpZiAoY2hhbmdlZCkge1xcbiAgICAgIHRoaXMuZGF0YUFkYXB0ZXIuY3VycmVudChmdW5jdGlvbiAoY3VycmVudERhdGEpIHtcXG4gICAgICAgIHNlbGYudHJpZ2dlcignc2VsZWN0aW9uOnVwZGF0ZScsIHtcXG4gICAgICAgICAgZGF0YTogY3VycmVudERhdGFcXG4gICAgICAgIH0pO1xcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9O1xcblxcbiAgLyoqXFxuICAgKiBPdmVycmlkZSB0aGUgdHJpZ2dlciBtZXRob2QgdG8gYXV0b21hdGljYWxseSB0cmlnZ2VyIHByZS1ldmVudHMgd2hlblxcbiAgICogdGhlcmUgYXJlIGV2ZW50cyB0aGF0IGNhbiBiZSBwcmV2ZW50ZWQuXFxuICAgKi9cXG4gIFNlbGVjdDIucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xcbiAgICB2YXIgYWN0dWFsVHJpZ2dlciA9IFNlbGVjdDIuX19zdXBlcl9fLnRyaWdnZXI7XFxuICAgIHZhciBwcmVUcmlnZ2VyTWFwID0ge1xcbiAgICAgICdvcGVuJzogJ29wZW5pbmcnLFxcbiAgICAgICdjbG9zZSc6ICdjbG9zaW5nJyxcXG4gICAgICAnc2VsZWN0JzogJ3NlbGVjdGluZycsXFxuICAgICAgJ3Vuc2VsZWN0JzogJ3Vuc2VsZWN0aW5nJyxcXG4gICAgICAnY2xlYXInOiAnY2xlYXJpbmcnXFxuICAgIH07XFxuXFxuICAgIGlmIChhcmdzID09PSB1bmRlZmluZWQpIHtcXG4gICAgICBhcmdzID0ge307XFxuICAgIH1cXG5cXG4gICAgaWYgKG5hbWUgaW4gcHJlVHJpZ2dlck1hcCkge1xcbiAgICAgIHZhciBwcmVUcmlnZ2VyTmFtZSA9IHByZVRyaWdnZXJNYXBbbmFtZV07XFxuICAgICAgdmFyIHByZVRyaWdnZXJBcmdzID0ge1xcbiAgICAgICAgcHJldmVudGVkOiBmYWxzZSxcXG4gICAgICAgIG5hbWU6IG5hbWUsXFxuICAgICAgICBhcmdzOiBhcmdzXFxuICAgICAgfTtcXG5cXG4gICAgICBhY3R1YWxUcmlnZ2VyLmNhbGwodGhpcywgcHJlVHJpZ2dlck5hbWUsIHByZVRyaWdnZXJBcmdzKTtcXG5cXG4gICAgICBpZiAocHJlVHJpZ2dlckFyZ3MucHJldmVudGVkKSB7XFxuICAgICAgICBhcmdzLnByZXZlbnRlZCA9IHRydWU7XFxuXFxuICAgICAgICByZXR1cm47XFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgIGFjdHVhbFRyaWdnZXIuY2FsbCh0aGlzLCBuYW1lLCBhcmdzKTtcXG4gIH07XFxuXFxuICBTZWxlY3QyLnByb3RvdHlwZS50b2dnbGVEcm9wZG93biA9IGZ1bmN0aW9uICgpIHtcXG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZCgpKSB7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuXFxuICAgIGlmICh0aGlzLmlzT3BlbigpKSB7XFxuICAgICAgdGhpcy5jbG9zZSgpO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIHRoaXMub3BlbigpO1xcbiAgICB9XFxuICB9O1xcblxcbiAgU2VsZWN0Mi5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcXG4gICAgaWYgKHRoaXMuaXNPcGVuKCkpIHtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZCgpKSB7XFxuICAgICAgcmV0dXJuO1xcbiAgICB9XFxuXFxuICAgIHRoaXMudHJpZ2dlcigncXVlcnknLCB7fSk7XFxuICB9O1xcblxcbiAgU2VsZWN0Mi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgIGlmICghdGhpcy5pc09wZW4oKSkge1xcbiAgICAgIHJldHVybjtcXG4gICAgfVxcblxcbiAgICB0aGlzLnRyaWdnZXIoJ2Nsb3NlJywgeyBvcmlnaW5hbEV2ZW50IDogZXZ0IH0pO1xcbiAgfTtcXG5cXG4gIC8qKlxcbiAgICogSGVscGVyIG1ldGhvZCB0byBhYnN0cmFjdCB0aGUgXFxcImVuYWJsZWRcXFwiIChub3QgXFxcImRpc2FibGVkXFxcIikgc3RhdGUgb2YgdGhpc1xcbiAgICogb2JqZWN0LlxcbiAgICpcXG4gICAqIEByZXR1cm4ge3RydWV9IGlmIHRoZSBpbnN0YW5jZSBpcyBub3QgZGlzYWJsZWQuXFxuICAgKiBAcmV0dXJuIHtmYWxzZX0gaWYgdGhlIGluc3RhbmNlIGlzIGRpc2FibGVkLlxcbiAgICovXFxuICBTZWxlY3QyLnByb3RvdHlwZS5pc0VuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHJldHVybiAhdGhpcy5pc0Rpc2FibGVkKCk7XFxuICB9O1xcblxcbiAgLyoqXFxuICAgKiBIZWxwZXIgbWV0aG9kIHRvIGFic3RyYWN0IHRoZSBcXFwiZGlzYWJsZWRcXFwiIHN0YXRlIG9mIHRoaXMgb2JqZWN0LlxcbiAgICpcXG4gICAqIEByZXR1cm4ge3RydWV9IGlmIHRoZSBkaXNhYmxlZCBvcHRpb24gaXMgdHJ1ZS5cXG4gICAqIEByZXR1cm4ge2ZhbHNlfSBpZiB0aGUgZGlzYWJsZWQgb3B0aW9uIGlzIGZhbHNlLlxcbiAgICovXFxuICBTZWxlY3QyLnByb3RvdHlwZS5pc0Rpc2FibGVkID0gZnVuY3Rpb24gKCkge1xcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmdldCgnZGlzYWJsZWQnKTtcXG4gIH07XFxuXFxuICBTZWxlY3QyLnByb3RvdHlwZS5pc09wZW4gPSBmdW5jdGlvbiAoKSB7XFxuICAgIHJldHVybiB0aGlzLiRjb250YWluZXIuaGFzQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1vcGVuJyk7XFxuICB9O1xcblxcbiAgU2VsZWN0Mi5wcm90b3R5cGUuaGFzRm9jdXMgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHJldHVybiB0aGlzLiRjb250YWluZXIuaGFzQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS1mb2N1cycpO1xcbiAgfTtcXG5cXG4gIFNlbGVjdDIucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gKGRhdGEpIHtcXG4gICAgLy8gTm8gbmVlZCB0byByZS10cmlnZ2VyIGZvY3VzIGV2ZW50cyBpZiB3ZSBhcmUgYWxyZWFkeSBmb2N1c2VkXFxuICAgIGlmICh0aGlzLmhhc0ZvY3VzKCkpIHtcXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgdGhpcy4kY29udGFpbmVyLmFkZENsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tZm9jdXMnKTtcXG4gICAgdGhpcy50cmlnZ2VyKCdmb2N1cycsIHt9KTtcXG4gIH07XFxuXFxuICBTZWxlY3QyLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoYXJncykge1xcbiAgICBpZiAodGhpcy5vcHRpb25zLmdldCgnZGVidWcnKSAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcXG4gICAgICBjb25zb2xlLndhcm4oXFxuICAgICAgICAnU2VsZWN0MjogVGhlIGBzZWxlY3QyKFxcXCJlbmFibGVcXFwiKWAgbWV0aG9kIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwnICtcXG4gICAgICAgICcgYmUgcmVtb3ZlZCBpbiBsYXRlciBTZWxlY3QyIHZlcnNpb25zLiBVc2UgJGVsZW1lbnQucHJvcChcXFwiZGlzYWJsZWRcXFwiKScgK1xcbiAgICAgICAgJyBpbnN0ZWFkLidcXG4gICAgICApO1xcbiAgICB9XFxuXFxuICAgIGlmIChhcmdzID09IG51bGwgfHwgYXJncy5sZW5ndGggPT09IDApIHtcXG4gICAgICBhcmdzID0gW3RydWVdO1xcbiAgICB9XFxuXFxuICAgIHZhciBkaXNhYmxlZCA9ICFhcmdzWzBdO1xcblxcbiAgICB0aGlzLiRlbGVtZW50LnByb3AoJ2Rpc2FibGVkJywgZGlzYWJsZWQpO1xcbiAgfTtcXG5cXG4gIFNlbGVjdDIucHJvdG90eXBlLmRhdGEgPSBmdW5jdGlvbiAoKSB7XFxuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkZWJ1ZycpICYmXFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiB3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcXG4gICAgICBjb25zb2xlLndhcm4oXFxuICAgICAgICAnU2VsZWN0MjogRGF0YSBjYW4gbm8gbG9uZ2VyIGJlIHNldCB1c2luZyBgc2VsZWN0MihcXFwiZGF0YVxcXCIpYC4gWW91ICcgK1xcbiAgICAgICAgJ3Nob3VsZCBjb25zaWRlciBzZXR0aW5nIHRoZSB2YWx1ZSBpbnN0ZWFkIHVzaW5nIGAkZWxlbWVudC52YWwoKWAuJ1xcbiAgICAgICk7XFxuICAgIH1cXG5cXG4gICAgdmFyIGRhdGEgPSBbXTtcXG5cXG4gICAgdGhpcy5kYXRhQWRhcHRlci5jdXJyZW50KGZ1bmN0aW9uIChjdXJyZW50RGF0YSkge1xcbiAgICAgIGRhdGEgPSBjdXJyZW50RGF0YTtcXG4gICAgfSk7XFxuXFxuICAgIHJldHVybiBkYXRhO1xcbiAgfTtcXG5cXG4gIFNlbGVjdDIucHJvdG90eXBlLnZhbCA9IGZ1bmN0aW9uIChhcmdzKSB7XFxuICAgIGlmICh0aGlzLm9wdGlvbnMuZ2V0KCdkZWJ1ZycpICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xcbiAgICAgIGNvbnNvbGUud2FybihcXG4gICAgICAgICdTZWxlY3QyOiBUaGUgYHNlbGVjdDIoXFxcInZhbFxcXCIpYCBtZXRob2QgaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZScgK1xcbiAgICAgICAgJyByZW1vdmVkIGluIGxhdGVyIFNlbGVjdDIgdmVyc2lvbnMuIFVzZSAkZWxlbWVudC52YWwoKSBpbnN0ZWFkLidcXG4gICAgICApO1xcbiAgICB9XFxuXFxuICAgIGlmIChhcmdzID09IG51bGwgfHwgYXJncy5sZW5ndGggPT09IDApIHtcXG4gICAgICByZXR1cm4gdGhpcy4kZWxlbWVudC52YWwoKTtcXG4gICAgfVxcblxcbiAgICB2YXIgbmV3VmFsID0gYXJnc1swXTtcXG5cXG4gICAgaWYgKCQuaXNBcnJheShuZXdWYWwpKSB7XFxuICAgICAgbmV3VmFsID0gJC5tYXAobmV3VmFsLCBmdW5jdGlvbiAob2JqKSB7XFxuICAgICAgICByZXR1cm4gb2JqLnRvU3RyaW5nKCk7XFxuICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgdGhpcy4kZWxlbWVudC52YWwobmV3VmFsKS50cmlnZ2VyKCdpbnB1dCcpLnRyaWdnZXIoJ2NoYW5nZScpO1xcbiAgfTtcXG5cXG4gIFNlbGVjdDIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XFxuICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmUoKTtcXG5cXG4gICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0uZGV0YWNoRXZlbnQpIHtcXG4gICAgICB0aGlzLiRlbGVtZW50WzBdLmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgdGhpcy5fc3luY0EpO1xcbiAgICB9XFxuXFxuICAgIGlmICh0aGlzLl9vYnNlcnZlciAhPSBudWxsKSB7XFxuICAgICAgdGhpcy5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xcbiAgICAgIHRoaXMuX29ic2VydmVyID0gbnVsbDtcXG4gICAgfSBlbHNlIGlmICh0aGlzLiRlbGVtZW50WzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcXG4gICAgICB0aGlzLiRlbGVtZW50WzBdXFxuICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQXR0ck1vZGlmaWVkJywgdGhpcy5fc3luY0EsIGZhbHNlKTtcXG4gICAgICB0aGlzLiRlbGVtZW50WzBdXFxuICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NTm9kZUluc2VydGVkJywgdGhpcy5fc3luY1MsIGZhbHNlKTtcXG4gICAgICB0aGlzLiRlbGVtZW50WzBdXFxuICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NTm9kZVJlbW92ZWQnLCB0aGlzLl9zeW5jUywgZmFsc2UpO1xcbiAgICB9XFxuXFxuICAgIHRoaXMuX3N5bmNBID0gbnVsbDtcXG4gICAgdGhpcy5fc3luY1MgPSBudWxsO1xcblxcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnNlbGVjdDInKTtcXG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsXFxuICAgIFV0aWxzLkdldERhdGEodGhpcy4kZWxlbWVudFswXSwgJ29sZC10YWJpbmRleCcpKTtcXG5cXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnc2VsZWN0Mi1oaWRkZW4tYWNjZXNzaWJsZScpO1xcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XFxuICAgIFV0aWxzLlJlbW92ZURhdGEodGhpcy4kZWxlbWVudFswXSk7XFxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlRGF0YSgnc2VsZWN0MicpO1xcblxcbiAgICB0aGlzLmRhdGFBZGFwdGVyLmRlc3Ryb3koKTtcXG4gICAgdGhpcy5zZWxlY3Rpb24uZGVzdHJveSgpO1xcbiAgICB0aGlzLmRyb3Bkb3duLmRlc3Ryb3koKTtcXG4gICAgdGhpcy5yZXN1bHRzLmRlc3Ryb3koKTtcXG5cXG4gICAgdGhpcy5kYXRhQWRhcHRlciA9IG51bGw7XFxuICAgIHRoaXMuc2VsZWN0aW9uID0gbnVsbDtcXG4gICAgdGhpcy5kcm9wZG93biA9IG51bGw7XFxuICAgIHRoaXMucmVzdWx0cyA9IG51bGw7XFxuICB9O1xcblxcbiAgU2VsZWN0Mi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xcbiAgICB2YXIgJGNvbnRhaW5lciA9ICQoXFxuICAgICAgJzxzcGFuIGNsYXNzPVxcXCJzZWxlY3QyIHNlbGVjdDItY29udGFpbmVyXFxcIj4nICtcXG4gICAgICAgICc8c3BhbiBjbGFzcz1cXFwic2VsZWN0aW9uXFxcIj48L3NwYW4+JyArXFxuICAgICAgICAnPHNwYW4gY2xhc3M9XFxcImRyb3Bkb3duLXdyYXBwZXJcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48L3NwYW4+JyArXFxuICAgICAgJzwvc3Bhbj4nXFxuICAgICk7XFxuXFxuICAgICRjb250YWluZXIuYXR0cignZGlyJywgdGhpcy5vcHRpb25zLmdldCgnZGlyJykpO1xcblxcbiAgICB0aGlzLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xcblxcbiAgICB0aGlzLiRjb250YWluZXIuYWRkQ2xhc3MoJ3NlbGVjdDItY29udGFpbmVyLS0nICsgdGhpcy5vcHRpb25zLmdldCgndGhlbWUnKSk7XFxuXFxuICAgIFV0aWxzLlN0b3JlRGF0YSgkY29udGFpbmVyWzBdLCAnZWxlbWVudCcsIHRoaXMuJGVsZW1lbnQpO1xcblxcbiAgICByZXR1cm4gJGNvbnRhaW5lcjtcXG4gIH07XFxuXFxuICByZXR1cm4gU2VsZWN0MjtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvY29tcGF0L3V0aWxzJyxbXFxuICAnanF1ZXJ5J1xcbl0sIGZ1bmN0aW9uICgkKSB7XFxuICBmdW5jdGlvbiBzeW5jQ3NzQ2xhc3NlcyAoJGRlc3QsICRzcmMsIGFkYXB0ZXIpIHtcXG4gICAgdmFyIGNsYXNzZXMsIHJlcGxhY2VtZW50cyA9IFtdLCBhZGFwdGVkO1xcblxcbiAgICBjbGFzc2VzID0gJC50cmltKCRkZXN0LmF0dHIoJ2NsYXNzJykpO1xcblxcbiAgICBpZiAoY2xhc3Nlcykge1xcbiAgICAgIGNsYXNzZXMgPSAnJyArIGNsYXNzZXM7IC8vIGZvciBJRSB3aGljaCByZXR1cm5zIG9iamVjdFxcblxcbiAgICAgICQoY2xhc3Nlcy5zcGxpdCgvXFxcXHMrLykpLmVhY2goZnVuY3Rpb24gKCkge1xcbiAgICAgICAgLy8gU2F2ZSBhbGwgU2VsZWN0MiBjbGFzc2VzXFxuICAgICAgICBpZiAodGhpcy5pbmRleE9mKCdzZWxlY3QyLScpID09PSAwKSB7XFxuICAgICAgICAgIHJlcGxhY2VtZW50cy5wdXNoKHRoaXMpO1xcbiAgICAgICAgfVxcbiAgICAgIH0pO1xcbiAgICB9XFxuXFxuICAgIGNsYXNzZXMgPSAkLnRyaW0oJHNyYy5hdHRyKCdjbGFzcycpKTtcXG5cXG4gICAgaWYgKGNsYXNzZXMpIHtcXG4gICAgICBjbGFzc2VzID0gJycgKyBjbGFzc2VzOyAvLyBmb3IgSUUgd2hpY2ggcmV0dXJucyBvYmplY3RcXG5cXG4gICAgICAkKGNsYXNzZXMuc3BsaXQoL1xcXFxzKy8pKS5lYWNoKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgIC8vIE9ubHkgYWRhcHQgbm9uLVNlbGVjdDIgY2xhc3Nlc1xcbiAgICAgICAgaWYgKHRoaXMuaW5kZXhPZignc2VsZWN0Mi0nKSAhPT0gMCkge1xcbiAgICAgICAgICBhZGFwdGVkID0gYWRhcHRlcih0aGlzKTtcXG5cXG4gICAgICAgICAgaWYgKGFkYXB0ZWQgIT0gbnVsbCkge1xcbiAgICAgICAgICAgIHJlcGxhY2VtZW50cy5wdXNoKGFkYXB0ZWQpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfSk7XFxuICAgIH1cXG5cXG4gICAgJGRlc3QuYXR0cignY2xhc3MnLCByZXBsYWNlbWVudHMuam9pbignICcpKTtcXG4gIH1cXG5cXG4gIHJldHVybiB7XFxuICAgIHN5bmNDc3NDbGFzc2VzOiBzeW5jQ3NzQ2xhc3Nlc1xcbiAgfTtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvY29tcGF0L2NvbnRhaW5lckNzcycsW1xcbiAgJ2pxdWVyeScsXFxuICAnLi91dGlscydcXG5dLCBmdW5jdGlvbiAoJCwgQ29tcGF0VXRpbHMpIHtcXG4gIC8vIE5vLW9wIENTUyBhZGFwdGVyIHRoYXQgZGlzY2FyZHMgYWxsIGNsYXNzZXMgYnkgZGVmYXVsdFxcbiAgZnVuY3Rpb24gX2NvbnRhaW5lckFkYXB0ZXIgKGNsYXp6KSB7XFxuICAgIHJldHVybiBudWxsO1xcbiAgfVxcblxcbiAgZnVuY3Rpb24gQ29udGFpbmVyQ1NTICgpIHsgfVxcblxcbiAgQ29udGFpbmVyQ1NTLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoZGVjb3JhdGVkKSB7XFxuICAgIHZhciAkY29udGFpbmVyID0gZGVjb3JhdGVkLmNhbGwodGhpcyk7XFxuXFxuICAgIHZhciBjb250YWluZXJDc3NDbGFzcyA9IHRoaXMub3B0aW9ucy5nZXQoJ2NvbnRhaW5lckNzc0NsYXNzJykgfHwgJyc7XFxuXFxuICAgIGlmICgkLmlzRnVuY3Rpb24oY29udGFpbmVyQ3NzQ2xhc3MpKSB7XFxuICAgICAgY29udGFpbmVyQ3NzQ2xhc3MgPSBjb250YWluZXJDc3NDbGFzcyh0aGlzLiRlbGVtZW50KTtcXG4gICAgfVxcblxcbiAgICB2YXIgY29udGFpbmVyQ3NzQWRhcHRlciA9IHRoaXMub3B0aW9ucy5nZXQoJ2FkYXB0Q29udGFpbmVyQ3NzQ2xhc3MnKTtcXG4gICAgY29udGFpbmVyQ3NzQWRhcHRlciA9IGNvbnRhaW5lckNzc0FkYXB0ZXIgfHwgX2NvbnRhaW5lckFkYXB0ZXI7XFxuXFxuICAgIGlmIChjb250YWluZXJDc3NDbGFzcy5pbmRleE9mKCc6YWxsOicpICE9PSAtMSkge1xcbiAgICAgIGNvbnRhaW5lckNzc0NsYXNzID0gY29udGFpbmVyQ3NzQ2xhc3MucmVwbGFjZSgnOmFsbDonLCAnJyk7XFxuXFxuICAgICAgdmFyIF9jc3NBZGFwdGVyID0gY29udGFpbmVyQ3NzQWRhcHRlcjtcXG5cXG4gICAgICBjb250YWluZXJDc3NBZGFwdGVyID0gZnVuY3Rpb24gKGNsYXp6KSB7XFxuICAgICAgICB2YXIgYWRhcHRlZCA9IF9jc3NBZGFwdGVyKGNsYXp6KTtcXG5cXG4gICAgICAgIGlmIChhZGFwdGVkICE9IG51bGwpIHtcXG4gICAgICAgICAgLy8gQXBwZW5kIHRoZSBvbGQgb25lIGFsb25nIHdpdGggdGhlIGFkYXB0ZWQgb25lXFxuICAgICAgICAgIHJldHVybiBhZGFwdGVkICsgJyAnICsgY2xheno7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gY2xheno7XFxuICAgICAgfTtcXG4gICAgfVxcblxcbiAgICB2YXIgY29udGFpbmVyQ3NzID0gdGhpcy5vcHRpb25zLmdldCgnY29udGFpbmVyQ3NzJykgfHwge307XFxuXFxuICAgIGlmICgkLmlzRnVuY3Rpb24oY29udGFpbmVyQ3NzKSkge1xcbiAgICAgIGNvbnRhaW5lckNzcyA9IGNvbnRhaW5lckNzcyh0aGlzLiRlbGVtZW50KTtcXG4gICAgfVxcblxcbiAgICBDb21wYXRVdGlscy5zeW5jQ3NzQ2xhc3NlcygkY29udGFpbmVyLCB0aGlzLiRlbGVtZW50LCBjb250YWluZXJDc3NBZGFwdGVyKTtcXG5cXG4gICAgJGNvbnRhaW5lci5jc3MoY29udGFpbmVyQ3NzKTtcXG4gICAgJGNvbnRhaW5lci5hZGRDbGFzcyhjb250YWluZXJDc3NDbGFzcyk7XFxuXFxuICAgIHJldHVybiAkY29udGFpbmVyO1xcbiAgfTtcXG5cXG4gIHJldHVybiBDb250YWluZXJDU1M7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2NvbXBhdC9kcm9wZG93bkNzcycsW1xcbiAgJ2pxdWVyeScsXFxuICAnLi91dGlscydcXG5dLCBmdW5jdGlvbiAoJCwgQ29tcGF0VXRpbHMpIHtcXG4gIC8vIE5vLW9wIENTUyBhZGFwdGVyIHRoYXQgZGlzY2FyZHMgYWxsIGNsYXNzZXMgYnkgZGVmYXVsdFxcbiAgZnVuY3Rpb24gX2Ryb3Bkb3duQWRhcHRlciAoY2xhenopIHtcXG4gICAgcmV0dXJuIG51bGw7XFxuICB9XFxuXFxuICBmdW5jdGlvbiBEcm9wZG93bkNTUyAoKSB7IH1cXG5cXG4gIERyb3Bkb3duQ1NTLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoZGVjb3JhdGVkKSB7XFxuICAgIHZhciAkZHJvcGRvd24gPSBkZWNvcmF0ZWQuY2FsbCh0aGlzKTtcXG5cXG4gICAgdmFyIGRyb3Bkb3duQ3NzQ2xhc3MgPSB0aGlzLm9wdGlvbnMuZ2V0KCdkcm9wZG93bkNzc0NsYXNzJykgfHwgJyc7XFxuXFxuICAgIGlmICgkLmlzRnVuY3Rpb24oZHJvcGRvd25Dc3NDbGFzcykpIHtcXG4gICAgICBkcm9wZG93bkNzc0NsYXNzID0gZHJvcGRvd25Dc3NDbGFzcyh0aGlzLiRlbGVtZW50KTtcXG4gICAgfVxcblxcbiAgICB2YXIgZHJvcGRvd25Dc3NBZGFwdGVyID0gdGhpcy5vcHRpb25zLmdldCgnYWRhcHREcm9wZG93bkNzc0NsYXNzJyk7XFxuICAgIGRyb3Bkb3duQ3NzQWRhcHRlciA9IGRyb3Bkb3duQ3NzQWRhcHRlciB8fCBfZHJvcGRvd25BZGFwdGVyO1xcblxcbiAgICBpZiAoZHJvcGRvd25Dc3NDbGFzcy5pbmRleE9mKCc6YWxsOicpICE9PSAtMSkge1xcbiAgICAgIGRyb3Bkb3duQ3NzQ2xhc3MgPSBkcm9wZG93bkNzc0NsYXNzLnJlcGxhY2UoJzphbGw6JywgJycpO1xcblxcbiAgICAgIHZhciBfY3NzQWRhcHRlciA9IGRyb3Bkb3duQ3NzQWRhcHRlcjtcXG5cXG4gICAgICBkcm9wZG93bkNzc0FkYXB0ZXIgPSBmdW5jdGlvbiAoY2xhenopIHtcXG4gICAgICAgIHZhciBhZGFwdGVkID0gX2Nzc0FkYXB0ZXIoY2xhenopO1xcblxcbiAgICAgICAgaWYgKGFkYXB0ZWQgIT0gbnVsbCkge1xcbiAgICAgICAgICAvLyBBcHBlbmQgdGhlIG9sZCBvbmUgYWxvbmcgd2l0aCB0aGUgYWRhcHRlZCBvbmVcXG4gICAgICAgICAgcmV0dXJuIGFkYXB0ZWQgKyAnICcgKyBjbGF6ejtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiBjbGF6ejtcXG4gICAgICB9O1xcbiAgICB9XFxuXFxuICAgIHZhciBkcm9wZG93bkNzcyA9IHRoaXMub3B0aW9ucy5nZXQoJ2Ryb3Bkb3duQ3NzJykgfHwge307XFxuXFxuICAgIGlmICgkLmlzRnVuY3Rpb24oZHJvcGRvd25Dc3MpKSB7XFxuICAgICAgZHJvcGRvd25Dc3MgPSBkcm9wZG93bkNzcyh0aGlzLiRlbGVtZW50KTtcXG4gICAgfVxcblxcbiAgICBDb21wYXRVdGlscy5zeW5jQ3NzQ2xhc3NlcygkZHJvcGRvd24sIHRoaXMuJGVsZW1lbnQsIGRyb3Bkb3duQ3NzQWRhcHRlcik7XFxuXFxuICAgICRkcm9wZG93bi5jc3MoZHJvcGRvd25Dc3MpO1xcbiAgICAkZHJvcGRvd24uYWRkQ2xhc3MoZHJvcGRvd25Dc3NDbGFzcyk7XFxuXFxuICAgIHJldHVybiAkZHJvcGRvd247XFxuICB9O1xcblxcbiAgcmV0dXJuIERyb3Bkb3duQ1NTO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9jb21wYXQvaW5pdFNlbGVjdGlvbicsW1xcbiAgJ2pxdWVyeSdcXG5dLCBmdW5jdGlvbiAoJCkge1xcbiAgZnVuY3Rpb24gSW5pdFNlbGVjdGlvbiAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xcbiAgICBpZiAob3B0aW9ucy5nZXQoJ2RlYnVnJykgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XFxuICAgICAgY29uc29sZS53YXJuKFxcbiAgICAgICAgJ1NlbGVjdDI6IFRoZSBgaW5pdFNlbGVjdGlvbmAgb3B0aW9uIGhhcyBiZWVuIGRlcHJlY2F0ZWQgaW4gZmF2b3InICtcXG4gICAgICAgICcgb2YgYSBjdXN0b20gZGF0YSBhZGFwdGVyIHRoYXQgb3ZlcnJpZGVzIHRoZSBgY3VycmVudGAgbWV0aG9kLiAnICtcXG4gICAgICAgICdUaGlzIG1ldGhvZCBpcyBub3cgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGluc3RlYWQgb2YgYSBzaW5nbGUgJyArXFxuICAgICAgICAndGltZSB3aGVuIHRoZSBpbnN0YW5jZSBpcyBpbml0aWFsaXplZC4gU3VwcG9ydCB3aWxsIGJlIHJlbW92ZWQgJyArXFxuICAgICAgICAnZm9yIHRoZSBgaW5pdFNlbGVjdGlvbmAgb3B0aW9uIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBTZWxlY3QyJ1xcbiAgICAgICk7XFxuICAgIH1cXG5cXG4gICAgdGhpcy5pbml0U2VsZWN0aW9uID0gb3B0aW9ucy5nZXQoJ2luaXRTZWxlY3Rpb24nKTtcXG4gICAgdGhpcy5faXNJbml0aWFsaXplZCA9IGZhbHNlO1xcblxcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XFxuICB9XFxuXFxuICBJbml0U2VsZWN0aW9uLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY2FsbGJhY2spIHtcXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xcblxcbiAgICBpZiAodGhpcy5faXNJbml0aWFsaXplZCkge1xcbiAgICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNhbGxiYWNrKTtcXG5cXG4gICAgICByZXR1cm47XFxuICAgIH1cXG5cXG4gICAgdGhpcy5pbml0U2VsZWN0aW9uLmNhbGwobnVsbCwgdGhpcy4kZWxlbWVudCwgZnVuY3Rpb24gKGRhdGEpIHtcXG4gICAgICBzZWxmLl9pc0luaXRpYWxpemVkID0gdHJ1ZTtcXG5cXG4gICAgICBpZiAoISQuaXNBcnJheShkYXRhKSkge1xcbiAgICAgICAgZGF0YSA9IFtkYXRhXTtcXG4gICAgICB9XFxuXFxuICAgICAgY2FsbGJhY2soZGF0YSk7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIHJldHVybiBJbml0U2VsZWN0aW9uO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9jb21wYXQvaW5wdXREYXRhJyxbXFxuICAnanF1ZXJ5JyxcXG4gICcuLi91dGlscydcXG5dLCBmdW5jdGlvbiAoJCwgVXRpbHMpIHtcXG4gIGZ1bmN0aW9uIElucHV0RGF0YSAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xcbiAgICB0aGlzLl9jdXJyZW50RGF0YSA9IFtdO1xcbiAgICB0aGlzLl92YWx1ZVNlcGFyYXRvciA9IG9wdGlvbnMuZ2V0KCd2YWx1ZVNlcGFyYXRvcicpIHx8ICcsJztcXG5cXG4gICAgaWYgKCRlbGVtZW50LnByb3AoJ3R5cGUnKSA9PT0gJ2hpZGRlbicpIHtcXG4gICAgICBpZiAob3B0aW9ucy5nZXQoJ2RlYnVnJykgJiYgY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcXG4gICAgICAgIGNvbnNvbGUud2FybihcXG4gICAgICAgICAgJ1NlbGVjdDI6IFVzaW5nIGEgaGlkZGVuIGlucHV0IHdpdGggU2VsZWN0MiBpcyBubyBsb25nZXIgJyArXFxuICAgICAgICAgICdzdXBwb3J0ZWQgYW5kIG1heSBzdG9wIHdvcmtpbmcgaW4gdGhlIGZ1dHVyZS4gSXQgaXMgcmVjb21tZW5kZWQgJyArXFxuICAgICAgICAgICd0byB1c2UgYSBgPHNlbGVjdD5gIGVsZW1lbnQgaW5zdGVhZC4nXFxuICAgICAgICApO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XFxuICB9XFxuXFxuICBJbnB1dERhdGEucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbiAoXywgY2FsbGJhY2spIHtcXG4gICAgZnVuY3Rpb24gZ2V0U2VsZWN0ZWQgKGRhdGEsIHNlbGVjdGVkSWRzKSB7XFxuICAgICAgdmFyIHNlbGVjdGVkID0gW107XFxuXFxuICAgICAgaWYgKGRhdGEuc2VsZWN0ZWQgfHwgJC5pbkFycmF5KGRhdGEuaWQsIHNlbGVjdGVkSWRzKSAhPT0gLTEpIHtcXG4gICAgICAgIGRhdGEuc2VsZWN0ZWQgPSB0cnVlO1xcbiAgICAgICAgc2VsZWN0ZWQucHVzaChkYXRhKTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgZGF0YS5zZWxlY3RlZCA9IGZhbHNlO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAoZGF0YS5jaGlsZHJlbikge1xcbiAgICAgICAgc2VsZWN0ZWQucHVzaC5hcHBseShzZWxlY3RlZCwgZ2V0U2VsZWN0ZWQoZGF0YS5jaGlsZHJlbiwgc2VsZWN0ZWRJZHMpKTtcXG4gICAgICB9XFxuXFxuICAgICAgcmV0dXJuIHNlbGVjdGVkO1xcbiAgICB9XFxuXFxuICAgIHZhciBzZWxlY3RlZCA9IFtdO1xcblxcbiAgICBmb3IgKHZhciBkID0gMDsgZCA8IHRoaXMuX2N1cnJlbnREYXRhLmxlbmd0aDsgZCsrKSB7XFxuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9jdXJyZW50RGF0YVtkXTtcXG5cXG4gICAgICBzZWxlY3RlZC5wdXNoLmFwcGx5KFxcbiAgICAgICAgc2VsZWN0ZWQsXFxuICAgICAgICBnZXRTZWxlY3RlZChcXG4gICAgICAgICAgZGF0YSxcXG4gICAgICAgICAgdGhpcy4kZWxlbWVudC52YWwoKS5zcGxpdChcXG4gICAgICAgICAgICB0aGlzLl92YWx1ZVNlcGFyYXRvclxcbiAgICAgICAgICApXFxuICAgICAgICApXFxuICAgICAgKTtcXG4gICAgfVxcblxcbiAgICBjYWxsYmFjayhzZWxlY3RlZCk7XFxuICB9O1xcblxcbiAgSW5wdXREYXRhLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoXywgZGF0YSkge1xcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5nZXQoJ211bHRpcGxlJykpIHtcXG4gICAgICB0aGlzLmN1cnJlbnQoZnVuY3Rpb24gKGFsbERhdGEpIHtcXG4gICAgICAgICQubWFwKGFsbERhdGEsIGZ1bmN0aW9uIChkYXRhKSB7XFxuICAgICAgICAgIGRhdGEuc2VsZWN0ZWQgPSBmYWxzZTtcXG4gICAgICAgIH0pO1xcbiAgICAgIH0pO1xcblxcbiAgICAgIHRoaXMuJGVsZW1lbnQudmFsKGRhdGEuaWQpO1xcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaW5wdXQnKS50cmlnZ2VyKCdjaGFuZ2UnKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLiRlbGVtZW50LnZhbCgpO1xcbiAgICAgIHZhbHVlICs9IHRoaXMuX3ZhbHVlU2VwYXJhdG9yICsgZGF0YS5pZDtcXG5cXG4gICAgICB0aGlzLiRlbGVtZW50LnZhbCh2YWx1ZSk7XFxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdpbnB1dCcpLnRyaWdnZXIoJ2NoYW5nZScpO1xcbiAgICB9XFxuICB9O1xcblxcbiAgSW5wdXREYXRhLnByb3RvdHlwZS51bnNlbGVjdCA9IGZ1bmN0aW9uIChfLCBkYXRhKSB7XFxuICAgIHZhciBzZWxmID0gdGhpcztcXG5cXG4gICAgZGF0YS5zZWxlY3RlZCA9IGZhbHNlO1xcblxcbiAgICB0aGlzLmN1cnJlbnQoZnVuY3Rpb24gKGFsbERhdGEpIHtcXG4gICAgICB2YXIgdmFsdWVzID0gW107XFxuXFxuICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCBhbGxEYXRhLmxlbmd0aDsgZCsrKSB7XFxuICAgICAgICB2YXIgaXRlbSA9IGFsbERhdGFbZF07XFxuXFxuICAgICAgICBpZiAoZGF0YS5pZCA9PSBpdGVtLmlkKSB7XFxuICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgdmFsdWVzLnB1c2goaXRlbS5pZCk7XFxuICAgICAgfVxcblxcbiAgICAgIHNlbGYuJGVsZW1lbnQudmFsKHZhbHVlcy5qb2luKHNlbGYuX3ZhbHVlU2VwYXJhdG9yKSk7XFxuICAgICAgc2VsZi4kZWxlbWVudC50cmlnZ2VyKCdpbnB1dCcpLnRyaWdnZXIoJ2NoYW5nZScpO1xcbiAgICB9KTtcXG4gIH07XFxuXFxuICBJbnB1dERhdGEucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKF8sIHBhcmFtcywgY2FsbGJhY2spIHtcXG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcXG5cXG4gICAgZm9yICh2YXIgZCA9IDA7IGQgPCB0aGlzLl9jdXJyZW50RGF0YS5sZW5ndGg7IGQrKykge1xcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fY3VycmVudERhdGFbZF07XFxuXFxuICAgICAgdmFyIG1hdGNoZXMgPSB0aGlzLm1hdGNoZXMocGFyYW1zLCBkYXRhKTtcXG5cXG4gICAgICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xcbiAgICAgICAgcmVzdWx0cy5wdXNoKG1hdGNoZXMpO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICBjYWxsYmFjayh7XFxuICAgICAgcmVzdWx0czogcmVzdWx0c1xcbiAgICB9KTtcXG4gIH07XFxuXFxuICBJbnB1dERhdGEucHJvdG90eXBlLmFkZE9wdGlvbnMgPSBmdW5jdGlvbiAoXywgJG9wdGlvbnMpIHtcXG4gICAgdmFyIG9wdGlvbnMgPSAkLm1hcCgkb3B0aW9ucywgZnVuY3Rpb24gKCRvcHRpb24pIHtcXG4gICAgICByZXR1cm4gVXRpbHMuR2V0RGF0YSgkb3B0aW9uWzBdLCAnZGF0YScpO1xcbiAgICB9KTtcXG5cXG4gICAgdGhpcy5fY3VycmVudERhdGEucHVzaC5hcHBseSh0aGlzLl9jdXJyZW50RGF0YSwgb3B0aW9ucyk7XFxuICB9O1xcblxcbiAgcmV0dXJuIElucHV0RGF0YTtcXG59KTtcXG5cXG5TMi5kZWZpbmUoJ3NlbGVjdDIvY29tcGF0L21hdGNoZXInLFtcXG4gICdqcXVlcnknXFxuXSwgZnVuY3Rpb24gKCQpIHtcXG4gIGZ1bmN0aW9uIG9sZE1hdGNoZXIgKG1hdGNoZXIpIHtcXG4gICAgZnVuY3Rpb24gd3JhcHBlZE1hdGNoZXIgKHBhcmFtcywgZGF0YSkge1xcbiAgICAgIHZhciBtYXRjaCA9ICQuZXh0ZW5kKHRydWUsIHt9LCBkYXRhKTtcXG5cXG4gICAgICBpZiAocGFyYW1zLnRlcm0gPT0gbnVsbCB8fCAkLnRyaW0ocGFyYW1zLnRlcm0pID09PSAnJykge1xcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAoZGF0YS5jaGlsZHJlbikge1xcbiAgICAgICAgZm9yICh2YXIgYyA9IGRhdGEuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgYyA+PSAwOyBjLS0pIHtcXG4gICAgICAgICAgdmFyIGNoaWxkID0gZGF0YS5jaGlsZHJlbltjXTtcXG5cXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNoaWxkIG9iamVjdCBtYXRjaGVzXFxuICAgICAgICAgIC8vIFRoZSBvbGQgbWF0Y2hlciByZXR1cm5lZCBhIGJvb2xlYW4gdHJ1ZSBvciBmYWxzZVxcbiAgICAgICAgICB2YXIgZG9lc01hdGNoID0gbWF0Y2hlcihwYXJhbXMudGVybSwgY2hpbGQudGV4dCwgY2hpbGQpO1xcblxcbiAgICAgICAgICAvLyBJZiB0aGUgY2hpbGQgZGlkbid0IG1hdGNoLCBwb3AgaXQgb2ZmXFxuICAgICAgICAgIGlmICghZG9lc01hdGNoKSB7XFxuICAgICAgICAgICAgbWF0Y2guY2hpbGRyZW4uc3BsaWNlKGMsIDEpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAobWF0Y2guY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XFxuICAgICAgICB9XFxuICAgICAgfVxcblxcbiAgICAgIGlmIChtYXRjaGVyKHBhcmFtcy50ZXJtLCBkYXRhLnRleHQsIGRhdGEpKSB7XFxuICAgICAgICByZXR1cm4gbWF0Y2g7XFxuICAgICAgfVxcblxcbiAgICAgIHJldHVybiBudWxsO1xcbiAgICB9XFxuXFxuICAgIHJldHVybiB3cmFwcGVkTWF0Y2hlcjtcXG4gIH1cXG5cXG4gIHJldHVybiBvbGRNYXRjaGVyO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9jb21wYXQvcXVlcnknLFtcXG5cXG5dLCBmdW5jdGlvbiAoKSB7XFxuICBmdW5jdGlvbiBRdWVyeSAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xcbiAgICBpZiAob3B0aW9ucy5nZXQoJ2RlYnVnJykgJiYgd2luZG93LmNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7XFxuICAgICAgY29uc29sZS53YXJuKFxcbiAgICAgICAgJ1NlbGVjdDI6IFRoZSBgcXVlcnlgIG9wdGlvbiBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mIGEgJyArXFxuICAgICAgICAnY3VzdG9tIGRhdGEgYWRhcHRlciB0aGF0IG92ZXJyaWRlcyB0aGUgYHF1ZXJ5YCBtZXRob2QuIFN1cHBvcnQgJyArXFxuICAgICAgICAnd2lsbCBiZSByZW1vdmVkIGZvciB0aGUgYHF1ZXJ5YCBvcHRpb24gaW4gZnV0dXJlIHZlcnNpb25zIG9mICcgK1xcbiAgICAgICAgJ1NlbGVjdDIuJ1xcbiAgICAgICk7XFxuICAgIH1cXG5cXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgJGVsZW1lbnQsIG9wdGlvbnMpO1xcbiAgfVxcblxcbiAgUXVlcnkucHJvdG90eXBlLnF1ZXJ5ID0gZnVuY3Rpb24gKF8sIHBhcmFtcywgY2FsbGJhY2spIHtcXG4gICAgcGFyYW1zLmNhbGxiYWNrID0gY2FsbGJhY2s7XFxuXFxuICAgIHZhciBxdWVyeSA9IHRoaXMub3B0aW9ucy5nZXQoJ3F1ZXJ5Jyk7XFxuXFxuICAgIHF1ZXJ5LmNhbGwobnVsbCwgcGFyYW1zKTtcXG4gIH07XFxuXFxuICByZXR1cm4gUXVlcnk7XFxufSk7XFxuXFxuUzIuZGVmaW5lKCdzZWxlY3QyL2Ryb3Bkb3duL2F0dGFjaENvbnRhaW5lcicsW1xcblxcbl0sIGZ1bmN0aW9uICgpIHtcXG4gIGZ1bmN0aW9uIEF0dGFjaENvbnRhaW5lciAoZGVjb3JhdGVkLCAkZWxlbWVudCwgb3B0aW9ucykge1xcbiAgICBkZWNvcmF0ZWQuY2FsbCh0aGlzLCAkZWxlbWVudCwgb3B0aW9ucyk7XFxuICB9XFxuXFxuICBBdHRhY2hDb250YWluZXIucHJvdG90eXBlLnBvc2l0aW9uID1cXG4gICAgZnVuY3Rpb24gKGRlY29yYXRlZCwgJGRyb3Bkb3duLCAkY29udGFpbmVyKSB7XFxuICAgIHZhciAkZHJvcGRvd25Db250YWluZXIgPSAkY29udGFpbmVyLmZpbmQoJy5kcm9wZG93bi13cmFwcGVyJyk7XFxuICAgICRkcm9wZG93bkNvbnRhaW5lci5hcHBlbmQoJGRyb3Bkb3duKTtcXG5cXG4gICAgJGRyb3Bkb3duLmFkZENsYXNzKCdzZWxlY3QyLWRyb3Bkb3duLS1iZWxvdycpO1xcbiAgICAkY29udGFpbmVyLmFkZENsYXNzKCdzZWxlY3QyLWNvbnRhaW5lci0tYmVsb3cnKTtcXG4gIH07XFxuXFxuICByZXR1cm4gQXR0YWNoQ29udGFpbmVyO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9kcm9wZG93bi9zdG9wUHJvcGFnYXRpb24nLFtcXG5cXG5dLCBmdW5jdGlvbiAoKSB7XFxuICBmdW5jdGlvbiBTdG9wUHJvcGFnYXRpb24gKCkgeyB9XFxuXFxuICBTdG9wUHJvcGFnYXRpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoZGVjb3JhdGVkLCBjb250YWluZXIsICRjb250YWluZXIpIHtcXG4gICAgZGVjb3JhdGVkLmNhbGwodGhpcywgY29udGFpbmVyLCAkY29udGFpbmVyKTtcXG5cXG4gICAgdmFyIHN0b3BwZWRFdmVudHMgPSBbXFxuICAgICdibHVyJyxcXG4gICAgJ2NoYW5nZScsXFxuICAgICdjbGljaycsXFxuICAgICdkYmxjbGljaycsXFxuICAgICdmb2N1cycsXFxuICAgICdmb2N1c2luJyxcXG4gICAgJ2ZvY3Vzb3V0JyxcXG4gICAgJ2lucHV0JyxcXG4gICAgJ2tleWRvd24nLFxcbiAgICAna2V5dXAnLFxcbiAgICAna2V5cHJlc3MnLFxcbiAgICAnbW91c2Vkb3duJyxcXG4gICAgJ21vdXNlZW50ZXInLFxcbiAgICAnbW91c2VsZWF2ZScsXFxuICAgICdtb3VzZW1vdmUnLFxcbiAgICAnbW91c2VvdmVyJyxcXG4gICAgJ21vdXNldXAnLFxcbiAgICAnc2VhcmNoJyxcXG4gICAgJ3RvdWNoZW5kJyxcXG4gICAgJ3RvdWNoc3RhcnQnXFxuICAgIF07XFxuXFxuICAgIHRoaXMuJGRyb3Bkb3duLm9uKHN0b3BwZWRFdmVudHMuam9pbignICcpLCBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xcbiAgICB9KTtcXG4gIH07XFxuXFxuICByZXR1cm4gU3RvcFByb3BhZ2F0aW9uO1xcbn0pO1xcblxcblMyLmRlZmluZSgnc2VsZWN0Mi9zZWxlY3Rpb24vc3RvcFByb3BhZ2F0aW9uJyxbXFxuXFxuXSwgZnVuY3Rpb24gKCkge1xcbiAgZnVuY3Rpb24gU3RvcFByb3BhZ2F0aW9uICgpIHsgfVxcblxcbiAgU3RvcFByb3BhZ2F0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKGRlY29yYXRlZCwgY29udGFpbmVyLCAkY29udGFpbmVyKSB7XFxuICAgIGRlY29yYXRlZC5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJGNvbnRhaW5lcik7XFxuXFxuICAgIHZhciBzdG9wcGVkRXZlbnRzID0gW1xcbiAgICAgICdibHVyJyxcXG4gICAgICAnY2hhbmdlJyxcXG4gICAgICAnY2xpY2snLFxcbiAgICAgICdkYmxjbGljaycsXFxuICAgICAgJ2ZvY3VzJyxcXG4gICAgICAnZm9jdXNpbicsXFxuICAgICAgJ2ZvY3Vzb3V0JyxcXG4gICAgICAnaW5wdXQnLFxcbiAgICAgICdrZXlkb3duJyxcXG4gICAgICAna2V5dXAnLFxcbiAgICAgICdrZXlwcmVzcycsXFxuICAgICAgJ21vdXNlZG93bicsXFxuICAgICAgJ21vdXNlZW50ZXInLFxcbiAgICAgICdtb3VzZWxlYXZlJyxcXG4gICAgICAnbW91c2Vtb3ZlJyxcXG4gICAgICAnbW91c2VvdmVyJyxcXG4gICAgICAnbW91c2V1cCcsXFxuICAgICAgJ3NlYXJjaCcsXFxuICAgICAgJ3RvdWNoZW5kJyxcXG4gICAgICAndG91Y2hzdGFydCdcXG4gICAgXTtcXG5cXG4gICAgdGhpcy4kc2VsZWN0aW9uLm9uKHN0b3BwZWRFdmVudHMuam9pbignICcpLCBmdW5jdGlvbiAoZXZ0KSB7XFxuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xcbiAgICB9KTtcXG4gIH07XFxuXFxuICByZXR1cm4gU3RvcFByb3BhZ2F0aW9uO1xcbn0pO1xcblxcbi8qIVxcbiAqIGpRdWVyeSBNb3VzZXdoZWVsIDMuMS4xM1xcbiAqXFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXFxuICovXFxuXFxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XFxuICAgIGlmICggdHlwZW9mIFMyLmRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBTMi5kZWZpbmUuYW1kICkge1xcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxcbiAgICAgICAgUzIuZGVmaW5lKCdqcXVlcnktbW91c2V3aGVlbCcsWydqcXVlcnknXSwgZmFjdG9yeSk7XFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XFxuICAgICAgICAvLyBOb2RlL0NvbW1vbkpTIHN0eWxlIGZvciBCcm93c2VyaWZ5XFxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHNcXG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5KTtcXG4gICAgfVxcbn0oZnVuY3Rpb24gKCQpIHtcXG5cXG4gICAgdmFyIHRvRml4ICA9IFsnd2hlZWwnLCAnbW91c2V3aGVlbCcsICdET01Nb3VzZVNjcm9sbCcsICdNb3pNb3VzZVBpeGVsU2Nyb2xsJ10sXFxuICAgICAgICB0b0JpbmQgPSAoICdvbndoZWVsJyBpbiBkb2N1bWVudCB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPj0gOSApID9cXG4gICAgICAgICAgICAgICAgICAgIFsnd2hlZWwnXSA6IFsnbW91c2V3aGVlbCcsICdEb21Nb3VzZVNjcm9sbCcsICdNb3pNb3VzZVBpeGVsU2Nyb2xsJ10sXFxuICAgICAgICBzbGljZSAgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UsXFxuICAgICAgICBudWxsTG93ZXN0RGVsdGFUaW1lb3V0LCBsb3dlc3REZWx0YTtcXG5cXG4gICAgaWYgKCAkLmV2ZW50LmZpeEhvb2tzICkge1xcbiAgICAgICAgZm9yICggdmFyIGkgPSB0b0ZpeC5sZW5ndGg7IGk7ICkge1xcbiAgICAgICAgICAgICQuZXZlbnQuZml4SG9va3NbIHRvRml4Wy0taV0gXSA9ICQuZXZlbnQubW91c2VIb29rcztcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICB2YXIgc3BlY2lhbCA9ICQuZXZlbnQuc3BlY2lhbC5tb3VzZXdoZWVsID0ge1xcbiAgICAgICAgdmVyc2lvbjogJzMuMS4xMicsXFxuXFxuICAgICAgICBzZXR1cDogZnVuY3Rpb24oKSB7XFxuICAgICAgICAgICAgaWYgKCB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgKSB7XFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gdG9CaW5kLmxlbmd0aDsgaTsgKSB7XFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoIHRvQmluZFstLWldLCBoYW5kbGVyLCBmYWxzZSApO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgdGhpcy5vbm1vdXNld2hlZWwgPSBoYW5kbGVyO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAvLyBTdG9yZSB0aGUgbGluZSBoZWlnaHQgYW5kIHBhZ2UgaGVpZ2h0IGZvciB0aGlzIHBhcnRpY3VsYXIgZWxlbWVudFxcbiAgICAgICAgICAgICQuZGF0YSh0aGlzLCAnbW91c2V3aGVlbC1saW5lLWhlaWdodCcsIHNwZWNpYWwuZ2V0TGluZUhlaWdodCh0aGlzKSk7XFxuICAgICAgICAgICAgJC5kYXRhKHRoaXMsICdtb3VzZXdoZWVsLXBhZ2UtaGVpZ2h0Jywgc3BlY2lhbC5nZXRQYWdlSGVpZ2h0KHRoaXMpKTtcXG4gICAgICAgIH0sXFxuXFxuICAgICAgICB0ZWFyZG93bjogZnVuY3Rpb24oKSB7XFxuICAgICAgICAgICAgaWYgKCB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gdG9CaW5kLmxlbmd0aDsgaTsgKSB7XFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHRvQmluZFstLWldLCBoYW5kbGVyLCBmYWxzZSApO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgdGhpcy5vbm1vdXNld2hlZWwgPSBudWxsO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAvLyBDbGVhbiB1cCB0aGUgZGF0YSB3ZSBhZGRlZCB0byB0aGUgZWxlbWVudFxcbiAgICAgICAgICAgICQucmVtb3ZlRGF0YSh0aGlzLCAnbW91c2V3aGVlbC1saW5lLWhlaWdodCcpO1xcbiAgICAgICAgICAgICQucmVtb3ZlRGF0YSh0aGlzLCAnbW91c2V3aGVlbC1wYWdlLWhlaWdodCcpO1xcbiAgICAgICAgfSxcXG5cXG4gICAgICAgIGdldExpbmVIZWlnaHQ6IGZ1bmN0aW9uKGVsZW0pIHtcXG4gICAgICAgICAgICB2YXIgJGVsZW0gPSAkKGVsZW0pLFxcbiAgICAgICAgICAgICAgICAkcGFyZW50ID0gJGVsZW1bJ29mZnNldFBhcmVudCcgaW4gJC5mbiA/ICdvZmZzZXRQYXJlbnQnIDogJ3BhcmVudCddKCk7XFxuICAgICAgICAgICAgaWYgKCEkcGFyZW50Lmxlbmd0aCkge1xcbiAgICAgICAgICAgICAgICAkcGFyZW50ID0gJCgnYm9keScpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoJHBhcmVudC5jc3MoJ2ZvbnRTaXplJyksIDEwKSB8fCBwYXJzZUludCgkZWxlbS5jc3MoJ2ZvbnRTaXplJyksIDEwKSB8fCAxNjtcXG4gICAgICAgIH0sXFxuXFxuICAgICAgICBnZXRQYWdlSGVpZ2h0OiBmdW5jdGlvbihlbGVtKSB7XFxuICAgICAgICAgICAgcmV0dXJuICQoZWxlbSkuaGVpZ2h0KCk7XFxuICAgICAgICB9LFxcblxcbiAgICAgICAgc2V0dGluZ3M6IHtcXG4gICAgICAgICAgICBhZGp1c3RPbGREZWx0YXM6IHRydWUsIC8vIHNlZSBzaG91bGRBZGp1c3RPbGREZWx0YXMoKSBiZWxvd1xcbiAgICAgICAgICAgIG5vcm1hbGl6ZU9mZnNldDogdHJ1ZSAgLy8gY2FsbHMgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZvciBlYWNoIGV2ZW50XFxuICAgICAgICB9XFxuICAgIH07XFxuXFxuICAgICQuZm4uZXh0ZW5kKHtcXG4gICAgICAgIG1vdXNld2hlZWw6IGZ1bmN0aW9uKGZuKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGZuID8gdGhpcy5iaW5kKCdtb3VzZXdoZWVsJywgZm4pIDogdGhpcy50cmlnZ2VyKCdtb3VzZXdoZWVsJyk7XFxuICAgICAgICB9LFxcblxcbiAgICAgICAgdW5tb3VzZXdoZWVsOiBmdW5jdGlvbihmbikge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVuYmluZCgnbW91c2V3aGVlbCcsIGZuKTtcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuXFxuXFxuICAgIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQpIHtcXG4gICAgICAgIHZhciBvcmdFdmVudCAgID0gZXZlbnQgfHwgd2luZG93LmV2ZW50LFxcbiAgICAgICAgICAgIGFyZ3MgICAgICAgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXFxuICAgICAgICAgICAgZGVsdGEgICAgICA9IDAsXFxuICAgICAgICAgICAgZGVsdGFYICAgICA9IDAsXFxuICAgICAgICAgICAgZGVsdGFZICAgICA9IDAsXFxuICAgICAgICAgICAgYWJzRGVsdGEgICA9IDAsXFxuICAgICAgICAgICAgb2Zmc2V0WCAgICA9IDAsXFxuICAgICAgICAgICAgb2Zmc2V0WSAgICA9IDA7XFxuICAgICAgICBldmVudCA9ICQuZXZlbnQuZml4KG9yZ0V2ZW50KTtcXG4gICAgICAgIGV2ZW50LnR5cGUgPSAnbW91c2V3aGVlbCc7XFxuXFxuICAgICAgICAvLyBPbGQgc2Nob29sIHNjcm9sbHdoZWVsIGRlbHRhXFxuICAgICAgICBpZiAoICdkZXRhaWwnICAgICAgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LmRldGFpbCAqIC0xOyAgICAgIH1cXG4gICAgICAgIGlmICggJ3doZWVsRGVsdGEnICBpbiBvcmdFdmVudCApIHsgZGVsdGFZID0gb3JnRXZlbnQud2hlZWxEZWx0YTsgICAgICAgfVxcbiAgICAgICAgaWYgKCAnd2hlZWxEZWx0YVknIGluIG9yZ0V2ZW50ICkgeyBkZWx0YVkgPSBvcmdFdmVudC53aGVlbERlbHRhWTsgICAgICB9XFxuICAgICAgICBpZiAoICd3aGVlbERlbHRhWCcgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWCA9IG9yZ0V2ZW50LndoZWVsRGVsdGFYICogLTE7IH1cXG5cXG4gICAgICAgIC8vIEZpcmVmb3ggPCAxNyBob3Jpem9udGFsIHNjcm9sbGluZyByZWxhdGVkIHRvIERPTU1vdXNlU2Nyb2xsIGV2ZW50XFxuICAgICAgICBpZiAoICdheGlzJyBpbiBvcmdFdmVudCAmJiBvcmdFdmVudC5heGlzID09PSBvcmdFdmVudC5IT1JJWk9OVEFMX0FYSVMgKSB7XFxuICAgICAgICAgICAgZGVsdGFYID0gZGVsdGFZICogLTE7XFxuICAgICAgICAgICAgZGVsdGFZID0gMDtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC8vIFNldCBkZWx0YSB0byBiZSBkZWx0YVkgb3IgZGVsdGFYIGlmIGRlbHRhWSBpcyAwIGZvciBiYWNrd2FyZHMgY29tcGF0YWJpbGl0aXlcXG4gICAgICAgIGRlbHRhID0gZGVsdGFZID09PSAwID8gZGVsdGFYIDogZGVsdGFZO1xcblxcbiAgICAgICAgLy8gTmV3IHNjaG9vbCB3aGVlbCBkZWx0YSAod2hlZWwgZXZlbnQpXFxuICAgICAgICBpZiAoICdkZWx0YVknIGluIG9yZ0V2ZW50ICkge1xcbiAgICAgICAgICAgIGRlbHRhWSA9IG9yZ0V2ZW50LmRlbHRhWSAqIC0xO1xcbiAgICAgICAgICAgIGRlbHRhICA9IGRlbHRhWTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICggJ2RlbHRhWCcgaW4gb3JnRXZlbnQgKSB7XFxuICAgICAgICAgICAgZGVsdGFYID0gb3JnRXZlbnQuZGVsdGFYO1xcbiAgICAgICAgICAgIGlmICggZGVsdGFZID09PSAwICkgeyBkZWx0YSAgPSBkZWx0YVggKiAtMTsgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy8gTm8gY2hhbmdlIGFjdHVhbGx5IGhhcHBlbmVkLCBubyByZWFzb24gdG8gZ28gYW55IGZ1cnRoZXJcXG4gICAgICAgIGlmICggZGVsdGFZID09PSAwICYmIGRlbHRhWCA9PT0gMCApIHsgcmV0dXJuOyB9XFxuXFxuICAgICAgICAvLyBOZWVkIHRvIGNvbnZlcnQgbGluZXMgYW5kIHBhZ2VzIHRvIHBpeGVscyBpZiB3ZSBhcmVuJ3QgYWxyZWFkeSBpbiBwaXhlbHNcXG4gICAgICAgIC8vIFRoZXJlIGFyZSB0aHJlZSBkZWx0YSBtb2RlczpcXG4gICAgICAgIC8vICAgKiBkZWx0YU1vZGUgMCBpcyBieSBwaXhlbHMsIG5vdGhpbmcgdG8gZG9cXG4gICAgICAgIC8vICAgKiBkZWx0YU1vZGUgMSBpcyBieSBsaW5lc1xcbiAgICAgICAgLy8gICAqIGRlbHRhTW9kZSAyIGlzIGJ5IHBhZ2VzXFxuICAgICAgICBpZiAoIG9yZ0V2ZW50LmRlbHRhTW9kZSA9PT0gMSApIHtcXG4gICAgICAgICAgICB2YXIgbGluZUhlaWdodCA9ICQuZGF0YSh0aGlzLCAnbW91c2V3aGVlbC1saW5lLWhlaWdodCcpO1xcbiAgICAgICAgICAgIGRlbHRhICAqPSBsaW5lSGVpZ2h0O1xcbiAgICAgICAgICAgIGRlbHRhWSAqPSBsaW5lSGVpZ2h0O1xcbiAgICAgICAgICAgIGRlbHRhWCAqPSBsaW5lSGVpZ2h0O1xcbiAgICAgICAgfSBlbHNlIGlmICggb3JnRXZlbnQuZGVsdGFNb2RlID09PSAyICkge1xcbiAgICAgICAgICAgIHZhciBwYWdlSGVpZ2h0ID0gJC5kYXRhKHRoaXMsICdtb3VzZXdoZWVsLXBhZ2UtaGVpZ2h0Jyk7XFxuICAgICAgICAgICAgZGVsdGEgICo9IHBhZ2VIZWlnaHQ7XFxuICAgICAgICAgICAgZGVsdGFZICo9IHBhZ2VIZWlnaHQ7XFxuICAgICAgICAgICAgZGVsdGFYICo9IHBhZ2VIZWlnaHQ7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAvLyBTdG9yZSBsb3dlc3QgYWJzb2x1dGUgZGVsdGEgdG8gbm9ybWFsaXplIHRoZSBkZWx0YSB2YWx1ZXNcXG4gICAgICAgIGFic0RlbHRhID0gTWF0aC5tYXgoIE1hdGguYWJzKGRlbHRhWSksIE1hdGguYWJzKGRlbHRhWCkgKTtcXG5cXG4gICAgICAgIGlmICggIWxvd2VzdERlbHRhIHx8IGFic0RlbHRhIDwgbG93ZXN0RGVsdGEgKSB7XFxuICAgICAgICAgICAgbG93ZXN0RGVsdGEgPSBhYnNEZWx0YTtcXG5cXG4gICAgICAgICAgICAvLyBBZGp1c3Qgb2xkZXIgZGVsdGFzIGlmIG5lY2Vzc2FyeVxcbiAgICAgICAgICAgIGlmICggc2hvdWxkQWRqdXN0T2xkRGVsdGFzKG9yZ0V2ZW50LCBhYnNEZWx0YSkgKSB7XFxuICAgICAgICAgICAgICAgIGxvd2VzdERlbHRhIC89IDQwO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC8vIEFkanVzdCBvbGRlciBkZWx0YXMgaWYgbmVjZXNzYXJ5XFxuICAgICAgICBpZiAoIHNob3VsZEFkanVzdE9sZERlbHRhcyhvcmdFdmVudCwgYWJzRGVsdGEpICkge1xcbiAgICAgICAgICAgIC8vIERpdmlkZSBhbGwgdGhlIHRoaW5ncyBieSA0MCFcXG4gICAgICAgICAgICBkZWx0YSAgLz0gNDA7XFxuICAgICAgICAgICAgZGVsdGFYIC89IDQwO1xcbiAgICAgICAgICAgIGRlbHRhWSAvPSA0MDtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC8vIEdldCBhIHdob2xlLCBub3JtYWxpemVkIHZhbHVlIGZvciB0aGUgZGVsdGFzXFxuICAgICAgICBkZWx0YSAgPSBNYXRoWyBkZWx0YSAgPj0gMSA/ICdmbG9vcicgOiAnY2VpbCcgXShkZWx0YSAgLyBsb3dlc3REZWx0YSk7XFxuICAgICAgICBkZWx0YVggPSBNYXRoWyBkZWx0YVggPj0gMSA/ICdmbG9vcicgOiAnY2VpbCcgXShkZWx0YVggLyBsb3dlc3REZWx0YSk7XFxuICAgICAgICBkZWx0YVkgPSBNYXRoWyBkZWx0YVkgPj0gMSA/ICdmbG9vcicgOiAnY2VpbCcgXShkZWx0YVkgLyBsb3dlc3REZWx0YSk7XFxuXFxuICAgICAgICAvLyBOb3JtYWxpc2Ugb2Zmc2V0WCBhbmQgb2Zmc2V0WSBwcm9wZXJ0aWVzXFxuICAgICAgICBpZiAoIHNwZWNpYWwuc2V0dGluZ3Mubm9ybWFsaXplT2Zmc2V0ICYmIHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICkge1xcbiAgICAgICAgICAgIHZhciBib3VuZGluZ1JlY3QgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xcbiAgICAgICAgICAgIG9mZnNldFggPSBldmVudC5jbGllbnRYIC0gYm91bmRpbmdSZWN0LmxlZnQ7XFxuICAgICAgICAgICAgb2Zmc2V0WSA9IGV2ZW50LmNsaWVudFkgLSBib3VuZGluZ1JlY3QudG9wO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy8gQWRkIGluZm9ybWF0aW9uIHRvIHRoZSBldmVudCBvYmplY3RcXG4gICAgICAgIGV2ZW50LmRlbHRhWCA9IGRlbHRhWDtcXG4gICAgICAgIGV2ZW50LmRlbHRhWSA9IGRlbHRhWTtcXG4gICAgICAgIGV2ZW50LmRlbHRhRmFjdG9yID0gbG93ZXN0RGVsdGE7XFxuICAgICAgICBldmVudC5vZmZzZXRYID0gb2Zmc2V0WDtcXG4gICAgICAgIGV2ZW50Lm9mZnNldFkgPSBvZmZzZXRZO1xcbiAgICAgICAgLy8gR28gYWhlYWQgYW5kIHNldCBkZWx0YU1vZGUgdG8gMCBzaW5jZSB3ZSBjb252ZXJ0ZWQgdG8gcGl4ZWxzXFxuICAgICAgICAvLyBBbHRob3VnaCB0aGlzIGlzIGEgbGl0dGxlIG9kZCBzaW5jZSB3ZSBvdmVyd3JpdGUgdGhlIGRlbHRhWC9ZXFxuICAgICAgICAvLyBwcm9wZXJ0aWVzIHdpdGggbm9ybWFsaXplZCBkZWx0YXMuXFxuICAgICAgICBldmVudC5kZWx0YU1vZGUgPSAwO1xcblxcbiAgICAgICAgLy8gQWRkIGV2ZW50IGFuZCBkZWx0YSB0byB0aGUgZnJvbnQgb2YgdGhlIGFyZ3VtZW50c1xcbiAgICAgICAgYXJncy51bnNoaWZ0KGV2ZW50LCBkZWx0YSwgZGVsdGFYLCBkZWx0YVkpO1xcblxcbiAgICAgICAgLy8gQ2xlYXJvdXQgbG93ZXN0RGVsdGEgYWZ0ZXIgc29tZXRpbWUgdG8gYmV0dGVyXFxuICAgICAgICAvLyBoYW5kbGUgbXVsdGlwbGUgZGV2aWNlIHR5cGVzIHRoYXQgZ2l2ZSBkaWZmZXJlbnRcXG4gICAgICAgIC8vIGEgZGlmZmVyZW50IGxvd2VzdERlbHRhXFxuICAgICAgICAvLyBFeDogdHJhY2twYWQgPSAzIGFuZCBtb3VzZSB3aGVlbCA9IDEyMFxcbiAgICAgICAgaWYgKG51bGxMb3dlc3REZWx0YVRpbWVvdXQpIHsgY2xlYXJUaW1lb3V0KG51bGxMb3dlc3REZWx0YVRpbWVvdXQpOyB9XFxuICAgICAgICBudWxsTG93ZXN0RGVsdGFUaW1lb3V0ID0gc2V0VGltZW91dChudWxsTG93ZXN0RGVsdGEsIDIwMCk7XFxuXFxuICAgICAgICByZXR1cm4gKCQuZXZlbnQuZGlzcGF0Y2ggfHwgJC5ldmVudC5oYW5kbGUpLmFwcGx5KHRoaXMsIGFyZ3MpO1xcbiAgICB9XFxuXFxuICAgIGZ1bmN0aW9uIG51bGxMb3dlc3REZWx0YSgpIHtcXG4gICAgICAgIGxvd2VzdERlbHRhID0gbnVsbDtcXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiBzaG91bGRBZGp1c3RPbGREZWx0YXMob3JnRXZlbnQsIGFic0RlbHRhKSB7XFxuICAgICAgICAvLyBJZiB0aGlzIGlzIGFuIG9sZGVyIGV2ZW50IGFuZCB0aGUgZGVsdGEgaXMgZGl2aXNhYmxlIGJ5IDEyMCxcXG4gICAgICAgIC8vIHRoZW4gd2UgYXJlIGFzc3VtaW5nIHRoYXQgdGhlIGJyb3dzZXIgaXMgdHJlYXRpbmcgdGhpcyBhcyBhblxcbiAgICAgICAgLy8gb2xkZXIgbW91c2Ugd2hlZWwgZXZlbnQgYW5kIHRoYXQgd2Ugc2hvdWxkIGRpdmlkZSB0aGUgZGVsdGFzXFxuICAgICAgICAvLyBieSA0MCB0byB0cnkgYW5kIGdldCBhIG1vcmUgdXNhYmxlIGRlbHRhRmFjdG9yLlxcbiAgICAgICAgLy8gU2lkZSBub3RlLCB0aGlzIGFjdHVhbGx5IGltcGFjdHMgdGhlIHJlcG9ydGVkIHNjcm9sbCBkaXN0YW5jZVxcbiAgICAgICAgLy8gaW4gb2xkZXIgYnJvd3NlcnMgYW5kIGNhbiBjYXVzZSBzY3JvbGxpbmcgdG8gYmUgc2xvd2VyIHRoYW4gbmF0aXZlLlxcbiAgICAgICAgLy8gVHVybiB0aGlzIG9mZiBieSBzZXR0aW5nICQuZXZlbnQuc3BlY2lhbC5tb3VzZXdoZWVsLnNldHRpbmdzLmFkanVzdE9sZERlbHRhcyB0byBmYWxzZS5cXG4gICAgICAgIHJldHVybiBzcGVjaWFsLnNldHRpbmdzLmFkanVzdE9sZERlbHRhcyAmJiBvcmdFdmVudC50eXBlID09PSAnbW91c2V3aGVlbCcgJiYgYWJzRGVsdGEgJSAxMjAgPT09IDA7XFxuICAgIH1cXG5cXG59KSk7XFxuXFxuUzIuZGVmaW5lKCdqcXVlcnkuc2VsZWN0MicsW1xcbiAgJ2pxdWVyeScsXFxuICAnanF1ZXJ5LW1vdXNld2hlZWwnLFxcblxcbiAgJy4vc2VsZWN0Mi9jb3JlJyxcXG4gICcuL3NlbGVjdDIvZGVmYXVsdHMnLFxcbiAgJy4vc2VsZWN0Mi91dGlscydcXG5dLCBmdW5jdGlvbiAoJCwgXywgU2VsZWN0MiwgRGVmYXVsdHMsIFV0aWxzKSB7XFxuICBpZiAoJC5mbi5zZWxlY3QyID09IG51bGwpIHtcXG4gICAgLy8gQWxsIG1ldGhvZHMgdGhhdCBzaG91bGQgcmV0dXJuIHRoZSBlbGVtZW50XFxuICAgIHZhciB0aGlzTWV0aG9kcyA9IFsnb3BlbicsICdjbG9zZScsICdkZXN0cm95J107XFxuXFxuICAgICQuZm4uc2VsZWN0MiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XFxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XFxuXFxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcXG4gICAgICAgICAgdmFyIGluc3RhbmNlT3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcXG5cXG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFNlbGVjdDIoJCh0aGlzKSwgaW5zdGFuY2VPcHRpb25zKTtcXG4gICAgICAgIH0pO1xcblxcbiAgICAgICAgcmV0dXJuIHRoaXM7XFxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcXG4gICAgICAgIHZhciByZXQ7XFxuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XFxuXFxuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBVdGlscy5HZXREYXRhKHRoaXMsICdzZWxlY3QyJyk7XFxuXFxuICAgICAgICAgIGlmIChpbnN0YW5jZSA9PSBudWxsICYmIHdpbmRvdy5jb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxcbiAgICAgICAgICAgICAgJ1RoZSBzZWxlY3QyKFxcXFwnJyArIG9wdGlvbnMgKyAnXFxcXCcpIG1ldGhvZCB3YXMgY2FsbGVkIG9uIGFuICcgK1xcbiAgICAgICAgICAgICAgJ2VsZW1lbnQgdGhhdCBpcyBub3QgdXNpbmcgU2VsZWN0Mi4nXFxuICAgICAgICAgICAgKTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICByZXQgPSBpbnN0YW5jZVtvcHRpb25zXS5hcHBseShpbnN0YW5jZSwgYXJncyk7XFxuICAgICAgICB9KTtcXG5cXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIHNob3VsZCBiZSByZXR1cm5pbmcgYHRoaXNgXFxuICAgICAgICBpZiAoJC5pbkFycmF5KG9wdGlvbnMsIHRoaXNNZXRob2RzKSA+IC0xKSB7XFxuICAgICAgICAgIHJldHVybiB0aGlzO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIHJldDtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50cyBmb3IgU2VsZWN0MjogJyArIG9wdGlvbnMpO1xcbiAgICAgIH1cXG4gICAgfTtcXG4gIH1cXG5cXG4gIGlmICgkLmZuLnNlbGVjdDIuZGVmYXVsdHMgPT0gbnVsbCkge1xcbiAgICAkLmZuLnNlbGVjdDIuZGVmYXVsdHMgPSBEZWZhdWx0cztcXG4gIH1cXG5cXG4gIHJldHVybiBTZWxlY3QyO1xcbn0pO1xcblxcbiAgLy8gUmV0dXJuIHRoZSBBTUQgbG9hZGVyIGNvbmZpZ3VyYXRpb24gc28gaXQgY2FuIGJlIHVzZWQgb3V0c2lkZSBvZiB0aGlzIGZpbGVcXG4gIHJldHVybiB7XFxuICAgIGRlZmluZTogUzIuZGVmaW5lLFxcbiAgICByZXF1aXJlOiBTMi5yZXF1aXJlXFxuICB9O1xcbn0oKSk7XFxuXFxuICAvLyBBdXRvbG9hZCB0aGUgalF1ZXJ5IGJpbmRpbmdzXFxuICAvLyBXZSBrbm93IHRoYXQgYWxsIG9mIHRoZSBtb2R1bGVzIGV4aXN0IGFib3ZlIHRoaXMsIHNvIHdlJ3JlIHNhZmVcXG4gIHZhciBzZWxlY3QyID0gUzIucmVxdWlyZSgnanF1ZXJ5LnNlbGVjdDInKTtcXG5cXG4gIC8vIEhvbGQgdGhlIEFNRCBtb2R1bGUgcmVmZXJlbmNlcyBvbiB0aGUgalF1ZXJ5IGZ1bmN0aW9uIHRoYXQgd2FzIGp1c3QgbG9hZGVkXFxuICAvLyBUaGlzIGFsbG93cyBTZWxlY3QyIHRvIHVzZSB0aGUgaW50ZXJuYWwgbG9hZGVyIG91dHNpZGUgb2YgdGhpcyBmaWxlLCBzdWNoXFxuICAvLyBhcyBpbiB0aGUgbGFuZ3VhZ2UgZmlsZXMuXFxuICBqUXVlcnkuZm4uc2VsZWN0Mi5hbWQgPSBTMjtcXG5cXG4gIC8vIFJldHVybiB0aGUgU2VsZWN0MiBpbnN0YW5jZSBmb3IgYW55b25lIHdobyBpcyBpbXBvcnRpbmcgaXQuXFxuICByZXR1cm4gc2VsZWN0MjtcXG59KSk7XFxuXCIiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihzcmMpIHtcblx0ZnVuY3Rpb24gbG9nKGVycm9yKSB7XG5cdFx0KHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKVxuXHRcdCYmIChjb25zb2xlLmVycm9yIHx8IGNvbnNvbGUubG9nKShcIltTY3JpcHQgTG9hZGVyXVwiLCBlcnJvcik7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgSUUgPTwgOFxuXHRmdW5jdGlvbiBpc0lFKCkge1xuXHRcdHJldHVybiB0eXBlb2YgYXR0YWNoRXZlbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09IFwidW5kZWZpbmVkXCI7XG5cdH1cblxuXHR0cnkge1xuXHRcdGlmICh0eXBlb2YgZXhlY1NjcmlwdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpc0lFKCkpIHtcblx0XHRcdGV4ZWNTY3JpcHQoc3JjKTtcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBldmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRldmFsLmNhbGwobnVsbCwgc3JjKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bG9nKFwiRXZhbEVycm9yOiBObyBldmFsIGZ1bmN0aW9uIGF2YWlsYWJsZVwiKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0bG9nKGVycm9yKTtcblx0fVxufVxuIiwicmVxdWlyZShcIiEhRTpcXFxcX1JlcG9zXFxcXF9tZS1tZXNzaWEtdGhlbWVcXFxcbWVzc2lhXFxcXG5vZGVfbW9kdWxlc1xcXFxzY3JpcHQtbG9hZGVyXFxcXGFkZFNjcmlwdC5qc1wiKShyZXF1aXJlKFwiISFFOlxcXFxfUmVwb3NcXFxcX21lLW1lc3NpYS10aGVtZVxcXFxtZXNzaWFcXFxcbm9kZV9tb2R1bGVzXFxcXHJhdy1sb2FkZXJcXFxcaW5kZXguanMhRTpcXFxcX1JlcG9zXFxcXF9tZS1tZXNzaWEtdGhlbWVcXFxcbWVzc2lhXFxcXG5vZGVfbW9kdWxlc1xcXFxzZWxlY3QyXFxcXGRpc3RcXFxcanNcXFxcc2VsZWN0Mi5mdWxsLmpzXCIpKSIsImltcG9ydCAnbm9kZU1vZHVsZXMvc2VsZWN0Mi9kaXN0L2pzL3NlbGVjdDIuZnVsbC5qcyc7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGU7IH07XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIFN0eWxlc1xuaW1wb3J0IFwiLi4vc2Nzcy9fY29tcG9uZW50cy9fc2VsZWN0Mi5zY3NzXCI7XG5cbi8vIFNjcmlwdHNcbmltcG9ydCBcIi4uL2pzL19jb21wb25lbnRzL19zZWxlY3QyLmpzXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";