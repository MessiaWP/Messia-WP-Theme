/* BLOCK */
/**
 * BOOTSTRAP
 */
/**
 * MESSIA
 */
.mccs .block-testimonials .comment-items {
  grid-template-columns: repeat(3, minmax(100px, 1fr));
}
.mccs .block-testimonials .comment-items .avatar {
  width: 4rem;
  height: 4rem;
  margin-right: 1rem;
}
.mccs .block-testimonials .comment-items .name-right {
  width: calc(100% - 4rem - 1rem);
}
.mccs .block-testimonials .comment-items .comment .comment-inner {
  background: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.25);
  border-radius: 8px;
  font-size: 0.9rem;
}
.mccs .block-testimonials .comment-items .comment-inner {
  padding: 1.5rem;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/