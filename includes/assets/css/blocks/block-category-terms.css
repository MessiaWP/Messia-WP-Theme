/* BLOCK */
/**
 * BOOTSTRAP
 */
/**
 * MESSIA
 */
.categories-terms-items {
  display: grid;
  grid-gap: 1.5rem;
  grid-template-columns: 1fr 1fr 1fr 1fr;
}
.categories-terms-items .category {
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.25);
}
.categories-terms-items .category .category-inner {
  position: relative;
}
.categories-terms-items .category .category-inner:before {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.5) 100%);
  opacity: 1;
  z-index: 10;
}
.categories-terms-items .category img {
  width: 100%;
}
.categories-terms-items .category .term-title {
  color: #fff;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/